/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRedux = __webpack_require__(159);

	var _immutable = __webpack_require__(177);

	var _NetworkWidget = __webpack_require__(178);

	var _NetworkWidget2 = _interopRequireDefault(_NetworkWidget);

	var _store = __webpack_require__(443);

	var _store2 = _interopRequireDefault(_store);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	__webpack_require__(448);

	var redux = (0, _store2.default)({});

	// This is the location of API which provides actual Cytoscape.js data.
	var SAMPLE_NETWORK_URL = 'http://chianti.ucsd.edu/~kono/ci/data/cyjs-with-style.json';

	var DEF_WIDTH = '1200px';
	var DEF_HEIGHT = '800px';
	var DEF_BACKGROUND = '#EFEFEF';

	_reactDom2.default.render(_react2.default.createElement(
	  _reactRedux.Provider,
	  { store: redux },
	  _react2.default.createElement(_NetworkWidget2.default, {
	    networkLocation: SAMPLE_NETWORK_URL,
	    width: DEF_WIDTH,
	    height: DEF_HEIGHT,
	    background: DEF_BACKGROUND
	  })
	), document.getElementById('root'));

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "app.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);

	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);

	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);

	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);

	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(12);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);

	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(21);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var invariant = __webpack_require__(13);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);

	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(31);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(46);

	var invariant = __webpack_require__(13);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(49);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(51);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(52);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(60);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(61);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);

	var assign = __webpack_require__(39);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);

	var keyOf = __webpack_require__(79);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);

	var warning = __webpack_require__(25);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(79);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(47);

	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(28);

	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);

	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(99);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(102);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);

	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);

	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);

	var flattenChildren = __webpack_require__(116);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(50);

	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(124);

	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(25);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(127);

	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);

	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);

	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(136);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var performanceNow = __webpack_require__(144);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(39);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(145);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(28);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);

	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(155);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);

	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(160);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(162);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(161);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/rackt/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	  }
	  /* eslint-disable no-console */
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    var children = this.props.children;

	    return _react.Children.only(children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;

	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;

	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _react.PropTypes.element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	exports["default"] = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  dispatch: _react.PropTypes.func.isRequired,
	  getState: _react.PropTypes.func.isRequired
	});

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = connect;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(161);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(163);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(164);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _isPlainObject = __webpack_require__(167);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(175);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(176);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function checkStateShape(stateProps, dispatch) {
	  (0, _invariant2["default"])((0, _isPlainObject2["default"])(stateProps), '`%sToProps` must return an object. Instead received %s.', dispatch ? 'mapDispatch' : 'mapState', stateProps);
	  return stateProps;
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;
	  var mapDispatch = (0, _isPlainObject2["default"])(mapDispatchToProps) ? (0, _wrapActionCreators2["default"])(mapDispatchToProps) : mapDispatchToProps || defaultMapDispatchToProps;

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var checkMergedEquals = finalMergeProps !== defaultMergeProps;
	  var _options$pure = options.pure;
	  var pure = _options$pure === undefined ? true : _options$pure;
	  var _options$withRef = options.withRef;
	  var withRef = _options$withRef === undefined ? false : _options$withRef;

	  // Helps track hot reloading.

	  var version = nextVersion++;

	  function computeMergedProps(stateProps, dispatchProps, parentProps) {
	    var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	    (0, _invariant2["default"])((0, _isPlainObject2["default"])(mergedProps), '`mergeProps` must return an object. Instead received %s.', mergedProps);
	    return mergedProps;
	  }

	  return function wrapWithConnect(WrappedComponent) {
	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + _this.constructor.displayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + _this.constructor.displayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        return checkStateShape(stateProps);
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        return isFactory ? this.computeStateProps(store, props) : checkStateShape(mappedState);
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        return checkStateShape(dispatchProps, true);
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        return isFactory ? this.computeDispatchProps(store, props) : checkStateShape(mappedDispatch, true);
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var prevStoreState = this.state.storeState;
	        var storeState = this.store.getState();

	        if (!pure || prevStoreState !== storeState) {
	          this.hasStoreStateChanged = true;
	          this.setState({ storeState: storeState });
	        }
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged;
	        var hasStoreStateChanged = this.hasStoreStateChanged;
	        var renderedElement = this.renderedElement;

	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 163 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(165);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(166);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(170);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(172);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(173);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(174);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(171);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;

	var _isPlainObject = __webpack_require__(167);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, initialState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all states changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  };
	}

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var isHostObject = __webpack_require__(168),
	    isObjectLike = __webpack_require__(169);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = objectProto;
	  if (typeof value.constructor == 'function') {
	    proto = getPrototypeOf(value);
	  }
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = combineReducers;

	var _createStore = __webpack_require__(166);

	var _isPlainObject = __webpack_require__(167);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(171);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Reducer "' + key + '" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }

	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];

	    if (sanityError) {
	      throw sanityError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 171 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that you can use this stack
	    // to find the callsite that caused this warning to fire.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 172 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = applyMiddleware;

	var _compose = __webpack_require__(174);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing functions from right to
	 * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return function () {
	    if (funcs.length === 0) {
	      return arguments.length <= 0 ? undefined : arguments[0];
	    }

	    var last = funcs[funcs.length - 1];
	    var rest = funcs.slice(0, -1);

	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent) {
	    var keys = Object.getOwnPropertyNames(sourceComponent);
	    for (var i=0; i<keys.length; ++i) {
	        if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]]) {
	            try {
	                targetComponent[keys[i]] = sourceComponent[keys[i]];
	            } catch (error) {

	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */

	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.Immutable = factory();
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function Iterator(next) {
	      this.next = next;
	    }

	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;

	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); }
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step > 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }

	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(Map, KeyedCollection);

	    // @pragma Construction

	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };

	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };

	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }

	  createClass(MapIterator, Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }

	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }

	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }

	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index !== index) {
	      return list;
	    }

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }

	    var sliceSeq = makeSequence(iterable);

	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var hasInitialized;

	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }

	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }

	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }

	  createClass(Set, SetCollection);

	    // @pragma Construction

	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    findEntry: function(predicate, context) {
	      var found;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findLastEntry: function(predicate, context) {
	      return this.toSeq().reverse().findEntry(predicate, context);
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },

	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;

	  // Temporary warning about using length
	  (function () {
	    try {
	      Object.defineProperty(IterablePrototype, 'length', {
	        get: function () {
	          if (!Iterable.noLengthWarning) {
	            var stack;
	            try {
	              throw new Error();
	            } catch (error) {
	              stack = error.stack;
	            }
	            if (stack.indexOf('_wrapObject') === -1) {
	              console && console.warn && console.warn(
	                'iterable.length has been deprecated, '+
	                'use iterable.size or iterable.count(). '+
	                'This warning will become a silent error in a future version. ' +
	                stack
	              );
	              return this.size;
	            }
	          }
	        }
	      });
	    } catch (e) {}
	  })();



	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLastKey: function(predicate, context) {
	      return this.toSeq().reverse().findKey(predicate, context);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    lastKeyOf: function(searchValue) {
	      return this.findLastKey(function(value ) {return is(value, searchValue)});
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.toKeyedSeq().keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      var key = this.toKeyedSeq().reverse().keyOf(searchValue);
	      return key === undefined ? -1 : key;

	      // var index =
	      // return this.toSeq().reverse().indexOf(searchValue);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var key = this.toKeyedSeq().findLastKey(predicate, context);
	      return key === undefined ? -1 : key;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    includes: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    }

	  });

	  SetIterable.prototype.has = IterablePrototype.includes;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : value;
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS

	  };

	  return Immutable;

	}));

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(159);

	var _DevTools = __webpack_require__(179);

	var _DevTools2 = _interopRequireDefault(_DevTools);

	var _CytoscapeRenderer = __webpack_require__(436);

	var _CytoscapeRenderer2 = _interopRequireDefault(_CytoscapeRenderer);

	var _GraphAction = __webpack_require__(439);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NetworkWidget = function (_React$Component) {
	  _inherits(NetworkWidget, _React$Component);

	  function NetworkWidget() {
	    _classCallCheck(this, NetworkWidget);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(NetworkWidget).apply(this, arguments));
	  }

	  _createClass(NetworkWidget, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      // Fetch Cytoscape.js JSON from remote resource.
	      this.props.fetchNetwork(this.props.networkLocation);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      console.log("===========================");
	      console.log(this.props);
	      var _props = this.props;
	      var cyjsSelected = _props.cyjsSelected;
	      var selected = _props.selected;
	      var graph = _props.graph;
	      var width = _props.width;
	      var height = _props.height;
	      var background = _props.background;

	      var props = _objectWithoutProperties(_props, ['cyjsSelected', 'selected', 'graph', 'width', 'height', 'background']);

	      var style = {
	        width: width,
	        height: height,
	        background: background
	      };

	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_DevTools2.default, null),
	        _react2.default.createElement(_CytoscapeRenderer2.default, {
	          graph: graph,
	          style: style,
	          selected: selected,
	          cyjsSelected: cyjsSelected
	        })
	      );
	    }
	  }]);

	  return NetworkWidget;
	}(_react2.default.Component);

	function mapDispatchToProps(dispatch) {
	  return {
	    cyjsSelected: function cyjsSelected(selected) {
	      return dispatch((0, _GraphAction.cyjsSelected)(selected));
	    },
	    fetchNetwork: function fetchNetwork(networkLocation) {
	      return dispatch((0, _GraphAction.fetchNetwork)(networkLocation));
	    }
	  };
	}

	function mapStateToProps(state) {

	  console.log("888888 Style");
	  console.log(state);
	  return {
	    graph: state.graph,
	    style: state.style,
	    selected: state.selected,
	    graphUrl: state.graphUrl
	  };
	}

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(NetworkWidget);

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "NetworkWidget.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reduxDevtools = __webpack_require__(180);

	var _reduxDevtoolsLogMonitor = __webpack_require__(291);

	var _reduxDevtoolsLogMonitor2 = _interopRequireDefault(_reduxDevtoolsLogMonitor);

	var _reduxDevtoolsDockMonitor = __webpack_require__(358);

	var _reduxDevtoolsDockMonitor2 = _interopRequireDefault(_reduxDevtoolsDockMonitor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DevTools = (0, _reduxDevtools.createDevTools)(_react2.default.createElement(
	  _reduxDevtoolsDockMonitor2.default,
	  { toggleVisibilityKey: 'ctrl-h', changePositionKey: 'ctrl-q' },
	  _react2.default.createElement(_reduxDevtoolsLogMonitor2.default, { theme: 'solarized' })
	));

	exports.default = DevTools;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "DevTools.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _instrument = __webpack_require__(181);

	Object.defineProperty(exports, 'instrument', {
	  enumerable: true,
	  get: function get() {
	    return _instrument.default;
	  }
	});
	Object.defineProperty(exports, 'ActionCreators', {
	  enumerable: true,
	  get: function get() {
	    return _instrument.ActionCreators;
	  }
	});
	Object.defineProperty(exports, 'ActionTypes', {
	  enumerable: true,
	  get: function get() {
	    return _instrument.ActionTypes;
	  }
	});

	var _persistState = __webpack_require__(233);

	Object.defineProperty(exports, 'persistState', {
	  enumerable: true,
	  get: function get() {
	    return _persistState.default;
	  }
	});

	var _createDevTools = __webpack_require__(290);

	Object.defineProperty(exports, 'createDevTools', {
	  enumerable: true,
	  get: function get() {
	    return _createDevTools.default;
	  }
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;
	exports.ActionCreators = exports.ActionTypes = undefined;
	exports.default = instrument;

	var _difference = __webpack_require__(182);

	var _difference2 = _interopRequireDefault(_difference);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ActionTypes = exports.ActionTypes = {
	  PERFORM_ACTION: 'PERFORM_ACTION',
	  RESET: 'RESET',
	  ROLLBACK: 'ROLLBACK',
	  COMMIT: 'COMMIT',
	  SWEEP: 'SWEEP',
	  TOGGLE_ACTION: 'TOGGLE_ACTION',
	  JUMP_TO_STATE: 'JUMP_TO_STATE',
	  IMPORT_STATE: 'IMPORT_STATE'
	};

	/**
	 * Action creators to change the History state.
	 */
	var ActionCreators = exports.ActionCreators = {
	  performAction: function performAction(action) {
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	    return { type: ActionTypes.PERFORM_ACTION, action: action, timestamp: Date.now() };
	  },
	  reset: function reset() {
	    return { type: ActionTypes.RESET, timestamp: Date.now() };
	  },
	  rollback: function rollback() {
	    return { type: ActionTypes.ROLLBACK, timestamp: Date.now() };
	  },
	  commit: function commit() {
	    return { type: ActionTypes.COMMIT, timestamp: Date.now() };
	  },
	  sweep: function sweep() {
	    return { type: ActionTypes.SWEEP };
	  },
	  toggleAction: function toggleAction(id) {
	    return { type: ActionTypes.TOGGLE_ACTION, id: id };
	  },
	  jumpToState: function jumpToState(index) {
	    return { type: ActionTypes.JUMP_TO_STATE, index: index };
	  },
	  importState: function importState(nextLiftedState) {
	    return { type: ActionTypes.IMPORT_STATE, nextLiftedState: nextLiftedState };
	  }
	};

	var INIT_ACTION = { type: '@@INIT' };

	/**
	 * Computes the next entry in the log by applying an action.
	 */
	function computeNextEntry(reducer, action, state, error) {
	  if (error) {
	    return {
	      state: state,
	      error: 'Interrupted by an error up the chain'
	    };
	  }

	  var nextState = state;
	  var nextError = undefined;
	  try {
	    nextState = reducer(state, action);
	  } catch (err) {
	    nextError = err.toString();
	    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && typeof window.chrome !== 'undefined') {
	      // In Chrome, rethrowing provides better source map support
	      setTimeout(function () {
	        throw err;
	      });
	    } else {
	      console.error(err);
	    }
	  }

	  return {
	    state: nextState,
	    error: nextError
	  };
	}

	/**
	 * Runs the reducer on invalidated actions to get a fresh computation log.
	 */
	function recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds) {
	  // Optimization: exit early and return the same reference
	  // if we know nothing could have changed.
	  if (minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {
	    return computedStates;
	  }

	  var nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);
	  for (var i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {
	    var actionId = stagedActionIds[i];
	    var action = actionsById[actionId].action;

	    var previousEntry = nextComputedStates[i - 1];
	    var previousState = previousEntry ? previousEntry.state : committedState;
	    var previousError = previousEntry ? previousEntry.error : undefined;

	    var shouldSkip = skippedActionIds.indexOf(actionId) > -1;
	    var entry = shouldSkip ? previousEntry : computeNextEntry(reducer, action, previousState, previousError);

	    nextComputedStates.push(entry);
	  }

	  return nextComputedStates;
	}

	/**
	 * Lifts an app's action into an action on the lifted store.
	 */
	function liftAction(action) {
	  return ActionCreators.performAction(action);
	}

	/**
	 * Creates a history state reducer from an app's reducer.
	 */
	function liftReducerWith(reducer, initialCommittedState, monitorReducer) {
	  var initialLiftedState = {
	    monitorState: monitorReducer(undefined, {}),
	    nextActionId: 1,
	    actionsById: { 0: liftAction(INIT_ACTION) },
	    stagedActionIds: [0],
	    skippedActionIds: [],
	    committedState: initialCommittedState,
	    currentStateIndex: 0,
	    computedStates: []
	  };

	  /**
	   * Manages how the history actions modify the history state.
	   */
	  return function () {
	    var liftedState = arguments.length <= 0 || arguments[0] === undefined ? initialLiftedState : arguments[0];
	    var liftedAction = arguments[1];
	    var monitorState = liftedState.monitorState;
	    var actionsById = liftedState.actionsById;
	    var nextActionId = liftedState.nextActionId;
	    var stagedActionIds = liftedState.stagedActionIds;
	    var skippedActionIds = liftedState.skippedActionIds;
	    var committedState = liftedState.committedState;
	    var currentStateIndex = liftedState.currentStateIndex;
	    var computedStates = liftedState.computedStates;

	    // By default, agressively recompute every state whatever happens.
	    // This has O(n) performance, so we'll override this to a sensible
	    // value whenever we feel like we don't have to recompute the states.

	    var minInvalidatedStateIndex = 0;

	    switch (liftedAction.type) {
	      case ActionTypes.RESET:
	        {
	          // Get back to the state the store was created with.
	          actionsById = { 0: liftAction(INIT_ACTION) };
	          nextActionId = 1;
	          stagedActionIds = [0];
	          skippedActionIds = [];
	          committedState = initialCommittedState;
	          currentStateIndex = 0;
	          computedStates = [];
	          break;
	        }
	      case ActionTypes.COMMIT:
	        {
	          // Consider the last committed state the new starting point.
	          // Squash any staged actions into a single committed state.
	          actionsById = { 0: liftAction(INIT_ACTION) };
	          nextActionId = 1;
	          stagedActionIds = [0];
	          skippedActionIds = [];
	          committedState = computedStates[currentStateIndex].state;
	          currentStateIndex = 0;
	          computedStates = [];
	          break;
	        }
	      case ActionTypes.ROLLBACK:
	        {
	          // Forget about any staged actions.
	          // Start again from the last committed state.
	          actionsById = { 0: liftAction(INIT_ACTION) };
	          nextActionId = 1;
	          stagedActionIds = [0];
	          skippedActionIds = [];
	          currentStateIndex = 0;
	          computedStates = [];
	          break;
	        }
	      case ActionTypes.TOGGLE_ACTION:
	        {
	          var _ret = function () {
	            // Toggle whether an action with given ID is skipped.
	            // Being skipped means it is a no-op during the computation.
	            var actionId = liftedAction.id;

	            var index = skippedActionIds.indexOf(actionId);
	            if (index === -1) {
	              skippedActionIds = [actionId].concat(skippedActionIds);
	            } else {
	              skippedActionIds = skippedActionIds.filter(function (id) {
	                return id !== actionId;
	              });
	            }
	            // Optimization: we know history before this action hasn't changed
	            minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);
	            return 'break';
	          }();

	          if (_ret === 'break') break;
	        }
	      case ActionTypes.JUMP_TO_STATE:
	        {
	          // Without recomputing anything, move the pointer that tell us
	          // which state is considered the current one. Useful for sliders.
	          currentStateIndex = liftedAction.index;
	          // Optimization: we know the history has not changed.
	          minInvalidatedStateIndex = Infinity;
	          break;
	        }
	      case ActionTypes.SWEEP:
	        {
	          // Forget any actions that are currently being skipped.
	          stagedActionIds = (0, _difference2.default)(stagedActionIds, skippedActionIds);
	          skippedActionIds = [];
	          currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);
	          break;
	        }
	      case ActionTypes.PERFORM_ACTION:
	        {
	          if (currentStateIndex === stagedActionIds.length - 1) {
	            currentStateIndex++;
	          }
	          var actionId = nextActionId++;
	          // Mutation! This is the hottest path, and we optimize on purpose.
	          // It is safe because we set a new key in a cache dictionary.
	          actionsById[actionId] = liftedAction;
	          stagedActionIds = [].concat(stagedActionIds, [actionId]);
	          // Optimization: we know that only the new action needs computing.
	          minInvalidatedStateIndex = stagedActionIds.length - 1;
	          break;
	        }
	      case ActionTypes.IMPORT_STATE:
	        {
	          var _liftedAction$nextLif = liftedAction.nextLiftedState;
	          // Completely replace everything.

	          monitorState = _liftedAction$nextLif.monitorState;
	          actionsById = _liftedAction$nextLif.actionsById;
	          nextActionId = _liftedAction$nextLif.nextActionId;
	          stagedActionIds = _liftedAction$nextLif.stagedActionIds;
	          skippedActionIds = _liftedAction$nextLif.skippedActionIds;
	          committedState = _liftedAction$nextLif.committedState;
	          currentStateIndex = _liftedAction$nextLif.currentStateIndex;
	          computedStates = _liftedAction$nextLif.computedStates;

	          break;
	        }
	      case '@@redux/INIT':
	        {
	          // Always recompute states on hot reload and init.
	          minInvalidatedStateIndex = 0;
	          break;
	        }
	      default:
	        {
	          // If the action is not recognized, it's a monitor action.
	          // Optimization: a monitor action can't change history.
	          minInvalidatedStateIndex = Infinity;
	          break;
	        }
	    }

	    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds);
	    monitorState = monitorReducer(monitorState, liftedAction);
	    return {
	      monitorState: monitorState,
	      actionsById: actionsById,
	      nextActionId: nextActionId,
	      stagedActionIds: stagedActionIds,
	      skippedActionIds: skippedActionIds,
	      committedState: committedState,
	      currentStateIndex: currentStateIndex,
	      computedStates: computedStates
	    };
	  };
	}

	/**
	 * Provides an app's view into the state of the lifted store.
	 */
	function unliftState(liftedState) {
	  var computedStates = liftedState.computedStates;
	  var currentStateIndex = liftedState.currentStateIndex;
	  var state = computedStates[currentStateIndex].state;

	  return state;
	}

	/**
	 * Provides an app's view into the lifted store.
	 */
	function unliftStore(liftedStore, liftReducer) {
	  var lastDefinedState = undefined;

	  return _extends({}, liftedStore, {

	    liftedStore: liftedStore,

	    dispatch: function dispatch(action) {
	      liftedStore.dispatch(liftAction(action));
	      return action;
	    },
	    getState: function getState() {
	      var state = unliftState(liftedStore.getState());
	      if (state !== undefined) {
	        lastDefinedState = state;
	      }
	      return lastDefinedState;
	    },
	    replaceReducer: function replaceReducer(nextReducer) {
	      liftedStore.replaceReducer(liftReducer(nextReducer));
	    }
	  });
	}

	/**
	 * Redux instrumentation store enhancer.
	 */
	function instrument() {
	  var monitorReducer = arguments.length <= 0 || arguments[0] === undefined ? function () {
	    return null;
	  } : arguments[0];

	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {

	      function liftReducer(r) {
	        if (typeof r !== 'function') {
	          if (r && typeof r.default === 'function') {
	            throw new Error('Expected the reducer to be a function. ' + 'Instead got an object with a "default" field. ' + 'Did you pass a module instead of the default export? ' + 'Try passing require(...).default instead.');
	          }
	          throw new Error('Expected the reducer to be a function.');
	        }
	        return liftReducerWith(r, initialState, monitorReducer);
	      }

	      var liftedStore = createStore(liftReducer(reducer), enhancer);
	      if (liftedStore.liftedStore) {
	        throw new Error('DevTools instrumentation should not be applied more than once. ' + 'Check your store configuration.');
	      }

	      return unliftStore(liftedStore, liftReducer);
	    };
	  };
	}

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(183),
	    baseFlatten = __webpack_require__(220),
	    isArrayLikeObject = __webpack_require__(223),
	    rest = __webpack_require__(229);

	/**
	 * Creates an array of unique `array` values not included in the other
	 * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.difference([3, 2, 1], [4, 2]);
	 * // => [3, 1]
	 */
	var difference = rest(function(array, values) {
	  return isArrayLikeObject(array)
	    ? baseDifference(array, baseFlatten(values, false, true))
	    : [];
	});

	module.exports = difference;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(184),
	    arrayIncludes = __webpack_require__(213),
	    arrayIncludesWith = __webpack_require__(216),
	    arrayMap = __webpack_require__(217),
	    baseUnary = __webpack_require__(218),
	    cacheHas = __webpack_require__(219);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of methods like `_.difference` without support for
	 * excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;

	  if (!length) {
	    return result;
	  }
	  if (iteratee) {
	    values = arrayMap(values, baseUnary(iteratee));
	  }
	  if (comparator) {
	    includes = arrayIncludesWith;
	    isCommon = false;
	  }
	  else if (values.length >= LARGE_ARRAY_SIZE) {
	    includes = cacheHas;
	    isCommon = false;
	    values = new SetCache(values);
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(185),
	    cachePush = __webpack_require__(212);

	/**
	 *
	 * Creates a set cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.push(values[index]);
	  }
	}

	// Add functions to the `SetCache`.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var mapClear = __webpack_require__(186),
	    mapDelete = __webpack_require__(197),
	    mapGet = __webpack_require__(204),
	    mapHas = __webpack_require__(207),
	    mapSet = __webpack_require__(209);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function MapCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add functions to the `MapCache`.
	MapCache.prototype.clear = mapClear;
	MapCache.prototype['delete'] = mapDelete;
	MapCache.prototype.get = mapGet;
	MapCache.prototype.has = mapHas;
	MapCache.prototype.set = mapSet;

	module.exports = MapCache;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(187),
	    Map = __webpack_require__(193);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapClear() {
	  this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
	}

	module.exports = mapClear;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(188);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Creates an hash object.
	 *
	 * @private
	 * @returns {Object} Returns the new hash object.
	 */
	function Hash() {}

	// Avoid inheriting from `Object.prototype` when possible.
	Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	module.exports = Hash;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(189);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(190);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(191),
	    isHostObject = __webpack_require__(168),
	    isObjectLike = __webpack_require__(169);

	/** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(funcToString.call(value));
	  }
	  return isObjectLike(value) &&
	    (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}

	module.exports = isNative;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(192);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	module.exports = isFunction;


/***/ },
/* 192 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(189),
	    root = __webpack_require__(194);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {var checkGlobal = __webpack_require__(196);

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

	module.exports = root;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(195)(module), (function() { return this; }())))

/***/ },
/* 195 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 196 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	module.exports = checkGlobal;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(193),
	    assocDelete = __webpack_require__(198),
	    hashDelete = __webpack_require__(201),
	    isKeyable = __webpack_require__(203);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapDelete(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	}

	module.exports = mapDelete;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(199);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the associative array.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function assocDelete(array, key) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = array.length - 1;
	  if (index == lastIndex) {
	    array.pop();
	  } else {
	    splice.call(array, index, 1);
	  }
	  return true;
	}

	module.exports = assocDelete;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(200);

	/**
	 * Gets the index at which the first occurrence of `key` is found in `array`
	 * of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var hashHas = __webpack_require__(202);

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(hash, key) {
	  return hashHas(hash, key) && delete hash[key];
	}

	module.exports = hashDelete;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(188);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(hash, key) {
	  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	}

	module.exports = hashHas;


/***/ },
/* 203 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return type == 'number' || type == 'boolean' ||
	    (type == 'string' && value !== '__proto__') || value == null;
	}

	module.exports = isKeyable;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(193),
	    assocGet = __webpack_require__(205),
	    hashGet = __webpack_require__(206),
	    isKeyable = __webpack_require__(203);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapGet(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.get(key) : assocGet(data.map, key);
	}

	module.exports = mapGet;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(199);

	/**
	 * Gets the associative array value for `key`.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function assocGet(array, key) {
	  var index = assocIndexOf(array, key);
	  return index < 0 ? undefined : array[index][1];
	}

	module.exports = assocGet;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(188);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(hash, key) {
	  if (nativeCreate) {
	    var result = hash[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	}

	module.exports = hashGet;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(193),
	    assocHas = __webpack_require__(208),
	    hashHas = __webpack_require__(202),
	    isKeyable = __webpack_require__(203);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapHas(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.has(key) : assocHas(data.map, key);
	}

	module.exports = mapHas;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(199);

	/**
	 * Checks if an associative array value for `key` exists.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function assocHas(array, key) {
	  return assocIndexOf(array, key) > -1;
	}

	module.exports = assocHas;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(193),
	    assocSet = __webpack_require__(210),
	    hashSet = __webpack_require__(211),
	    isKeyable = __webpack_require__(203);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache object.
	 */
	function mapSet(key, value) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	  } else if (Map) {
	    data.map.set(key, value);
	  } else {
	    assocSet(data.map, key, value);
	  }
	  return this;
	}

	module.exports = mapSet;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(199);

	/**
	 * Sets the associative array `key` to `value`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function assocSet(array, key, value) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    array.push([key, value]);
	  } else {
	    array[index][1] = value;
	  }
	}

	module.exports = assocSet;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(188);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function hashSet(hash, key, value) {
	  hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	}

	module.exports = hashSet;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(203);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the set cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var map = this.__data__;
	  if (isKeyable(value)) {
	    var data = map.__data__,
	        hash = typeof value == 'string' ? data.string : data.hash;

	    hash[value] = HASH_UNDEFINED;
	  }
	  else {
	    map.set(value, HASH_UNDEFINED);
	  }
	}

	module.exports = cachePush;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(214);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  return !!array.length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(215);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 215 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 216 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.includesWith` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;


/***/ },
/* 217 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 218 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing wrapper metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(203);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Checks if `value` is in `cache`.
	 *
	 * @private
	 * @param {Object} cache The set cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function cacheHas(cache, value) {
	  var map = cache.__data__;
	  if (isKeyable(value)) {
	    var data = map.__data__,
	        hash = typeof value == 'string' ? data.string : data.hash;

	    return hash[value] === HASH_UNDEFINED;
	  }
	  return map.has(value);
	}

	module.exports = cacheHas;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(221),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(228),
	    isArrayLikeObject = __webpack_require__(223);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isArrayLikeObject(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 221 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLikeObject = __webpack_require__(223);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	module.exports = isArguments;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(224),
	    isObjectLike = __webpack_require__(169);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @type Function
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(225),
	    isFunction = __webpack_require__(191),
	    isLength = __webpack_require__(227);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @type Function
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(226);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 226 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 227 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 228 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @type Function
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(230),
	    toInteger = __webpack_require__(231);

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.rest(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function rest(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, array);
	      case 1: return func.call(this, args[0], array);
	      case 2: return func.call(this, args[0], args[1], array);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = rest;


/***/ },
/* 230 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {...*} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  var length = args.length;
	  switch (length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(232);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3');
	 * // => 3
	 */
	function toInteger(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  var remainder = value % 1;
	  return value === value ? (remainder ? value - remainder : value) : 0;
	}

	module.exports = toInteger;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(191),
	    isObject = __webpack_require__(192);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3);
	 * // => 3
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3');
	 * // => 3
	 */
	function toNumber(value) {
	  if (isObject(value)) {
	    var other = isFunction(value.valueOf) ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports.default = persistState;

	var _mapValues = __webpack_require__(234);

	var _mapValues2 = _interopRequireDefault(_mapValues);

	var _identity = __webpack_require__(287);

	var _identity2 = _interopRequireDefault(_identity);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function persistState(sessionId) {
	  var deserializeState = arguments.length <= 1 || arguments[1] === undefined ? _identity2.default : arguments[1];
	  var deserializeAction = arguments.length <= 2 || arguments[2] === undefined ? _identity2.default : arguments[2];

	  if (!sessionId) {
	    return function (next) {
	      return function () {
	        return next.apply(undefined, arguments);
	      };
	    };
	  }

	  function deserialize(state) {
	    return _extends({}, state, {
	      actionsById: (0, _mapValues2.default)(state.actionsById, function (liftedAction) {
	        return _extends({}, liftedAction, {
	          action: deserializeAction(liftedAction.action)
	        });
	      }),
	      committedState: deserializeState(state.committedState),
	      computedStates: state.computedStates.map(function (computedState) {
	        return _extends({}, computedState, {
	          state: deserializeState(computedState.state)
	        });
	      })
	    });
	  }

	  return function (next) {
	    return function (reducer, initialState, enhancer) {
	      var key = 'redux-dev-session-' + sessionId;

	      var finalInitialState = undefined;
	      try {
	        var json = localStorage.getItem(key);
	        if (json) {
	          finalInitialState = deserialize(JSON.parse(json)) || initialState;
	          next(reducer, initialState);
	        }
	      } catch (e) {
	        console.warn('Could not read debug session from localStorage:', e);
	        try {
	          localStorage.removeItem(key);
	        } finally {
	          finalInitialState = undefined;
	        }
	      }

	      var store = next(reducer, finalInitialState, enhancer);

	      return _extends({}, store, {
	        dispatch: function dispatch(action) {
	          store.dispatch(action);

	          try {
	            localStorage.setItem(key, JSON.stringify(store.getState()));
	          } catch (e) {
	            console.warn('Could not write debug session to localStorage:', e);
	          }

	          return action;
	        }
	      });
	    };
	  };
	}

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(235),
	    baseIteratee = __webpack_require__(246);

	/**
	 * Creates an object with the same keys as `object` and values generated by
	 * running each own enumerable property of `object` through `iteratee`. The
	 * iteratee function is invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);

	  baseForOwn(object, function(value, key, object) {
	    result[key] = iteratee(value, key, object);
	  });
	  return result;
	}

	module.exports = mapValues;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(236),
	    keys = __webpack_require__(238);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(237);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 237 */
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(239),
	    baseKeys = __webpack_require__(240),
	    indexKeys = __webpack_require__(241),
	    isArrayLike = __webpack_require__(224),
	    isIndex = __webpack_require__(244),
	    isPrototype = __webpack_require__(245);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  var isProto = isPrototype(object);
	  if (!(isProto || isArrayLike(object))) {
	    return baseKeys(object);
	  }
	  var indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  for (var key in object) {
	    if (baseHas(object, key) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(isProto && key == 'constructor')) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 239 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	  // that are composed entirely of index properties, return `false` for
	  // `hasOwnProperty` checks of them.
	  return hasOwnProperty.call(object, key) ||
	    (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
	}

	module.exports = baseHas;


/***/ },
/* 240 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = Object.keys;

	/**
	 * The base implementation of `_.keys` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @type Function
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  return nativeKeys(Object(object));
	}

	module.exports = baseKeys;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(242),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(228),
	    isLength = __webpack_require__(227),
	    isString = __webpack_require__(243);

	/**
	 * Creates an array of index keys for `object` values of arrays,
	 * `arguments` objects, and strings, otherwise `null` is returned.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array|null} Returns index keys, else `null`.
	 */
	function indexKeys(object) {
	  var length = object ? object.length : undefined;
	  if (isLength(length) &&
	      (isArray(object) || isString(object) || isArguments(object))) {
	    return baseTimes(length, String);
	  }
	  return null;
	}

	module.exports = indexKeys;


/***/ },
/* 242 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(228),
	    isObjectLike = __webpack_require__(169);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 244 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 245 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(247),
	    baseMatchesProperty = __webpack_require__(273),
	    identity = __webpack_require__(287),
	    isArray = __webpack_require__(228),
	    property = __webpack_require__(288);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  var type = typeof value;
	  if (type == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(248),
	    getMatchData = __webpack_require__(269);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value &&
	        (value !== undefined || (key in Object(object)));
	    };
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(249),
	    baseIsEqual = __webpack_require__(255);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack,
	          result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var stackClear = __webpack_require__(250),
	    stackDelete = __webpack_require__(251),
	    stackGet = __webpack_require__(252),
	    stackHas = __webpack_require__(253),
	    stackSet = __webpack_require__(254);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function Stack(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add functions to the `Stack` cache.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ },
/* 250 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = { 'array': [], 'map': null };
	}

	module.exports = stackClear;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var assocDelete = __webpack_require__(198);

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocDelete(array, key) : data.map['delete'](key);
	}

	module.exports = stackDelete;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var assocGet = __webpack_require__(205);

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocGet(array, key) : data.map.get(key);
	}

	module.exports = stackGet;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var assocHas = __webpack_require__(208);

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocHas(array, key) : data.map.has(key);
	}

	module.exports = stackHas;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(185),
	    assocSet = __webpack_require__(210);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache object.
	 */
	function stackSet(key, value) {
	  var data = this.__data__,
	      array = data.array;

	  if (array) {
	    if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	      assocSet(array, key, value);
	    } else {
	      data.array = null;
	      data.map = new MapCache(array);
	    }
	  }
	  var map = data.map;
	  if (map) {
	    map.set(key, value);
	  }
	  return this;
	}

	module.exports = stackSet;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(256),
	    isObject = __webpack_require__(192),
	    isObjectLike = __webpack_require__(169);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	module.exports = baseIsEqual;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(249),
	    equalArrays = __webpack_require__(257),
	    equalByTag = __webpack_require__(259),
	    equalObjects = __webpack_require__(264),
	    getTag = __webpack_require__(265),
	    isArray = __webpack_require__(228),
	    isHostObject = __webpack_require__(168),
	    isTypedArray = __webpack_require__(268);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
	  }
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	  if (!isPartial) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(258);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var index = -1,
	      isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(array, other);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isUnordered) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  return result;
	}

	module.exports = equalArrays;


/***/ },
/* 258 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(260),
	    Uint8Array = __webpack_require__(261),
	    mapToArray = __webpack_require__(262),
	    setToArray = __webpack_require__(263);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = Symbol ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
	  switch (tag) {
	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object) ? other != +other : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      // Recursively compare objects (susceptible to call stack limits).
	      return (isPartial || object.size == other.size) &&
	        equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

	    case symbolTag:
	      return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(194);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(194);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ },
/* 262 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to an array.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ },
/* 263 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(239),
	    keys = __webpack_require__(238);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : baseHas(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  return result;
	}

	module.exports = equalObjects;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(193),
	    Set = __webpack_require__(266),
	    WeakMap = __webpack_require__(267);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect maps, sets, and weakmaps. */
	var mapCtorString = Map ? funcToString.call(Map) : '',
	    setCtorString = Set ? funcToString.call(Set) : '',
	    weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function getTag(value) {
	  return objectToString.call(value);
	}

	// Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
	if ((Map && getTag(new Map) != mapTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : null,
	        ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case mapCtorString: return mapTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(189),
	    root = __webpack_require__(194);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(189),
	    root = __webpack_require__(194);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(227),
	    isObjectLike = __webpack_require__(169);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(270),
	    toPairs = __webpack_require__(271);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = toPairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(192);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var baseToPairs = __webpack_require__(272),
	    keys = __webpack_require__(238);

	/**
	 * Creates an array of own enumerable key-value pairs for `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */
	function toPairs(object) {
	  return baseToPairs(object, keys(object));
	}

	module.exports = toPairs;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(217);

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the new array of key-value pairs.
	 */
	function baseToPairs(object, props) {
	  return arrayMap(props, function(key) {
	    return [key, object[key]];
	  });
	}

	module.exports = baseToPairs;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(255),
	    get = __webpack_require__(274),
	    hasIn = __webpack_require__(281);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(275);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined` the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var baseToPath = __webpack_require__(276),
	    isKey = __webpack_require__(280);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path + ''] : baseToPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(228),
	    stringToPath = __webpack_require__(277);

	/**
	 * The base implementation of `_.toPath` which only converts `value` to a
	 * path if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function baseToPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	module.exports = baseToPath;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(278);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	function stringToPath(string) {
	  var result = [];
	  toString(string).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = stringToPath;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(260),
	    isSymbol = __webpack_require__(279);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = Symbol ? symbolProto.toString : undefined;

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (value == null) {
	    return '';
	  }
	  if (isSymbol(value)) {
	    return Symbol ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toString;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(169);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(228);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (typeof value == 'number') {
	    return true;
	  }
	  return !isArray(value) &&
	    (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	      (object != null && value in Object(object)));
	}

	module.exports = isKey;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(282),
	    hasPath = __webpack_require__(283);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b.c');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b', 'c']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ },
/* 282 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return key in Object(object);
	}

	module.exports = baseHasIn;


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var baseToPath = __webpack_require__(276),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(228),
	    isIndex = __webpack_require__(244),
	    isKey = __webpack_require__(280),
	    isLength = __webpack_require__(227),
	    isString = __webpack_require__(243),
	    last = __webpack_require__(284),
	    parent = __webpack_require__(285);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasFunc(object, path);
	  if (!result && !isKey(path)) {
	    path = baseToPath(path);
	    object = parent(object, path);
	    if (object != null) {
	      path = last(path);
	      result = hasFunc(object, path);
	    }
	  }
	  var length = object ? object.length : undefined;
	  return result || (
	    !!length && isLength(length) && isIndex(path, length) &&
	    (isArray(object) || isString(object) || isArguments(object))
	  );
	}

	module.exports = hasPath;


/***/ },
/* 284 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(286),
	    get = __webpack_require__(274);

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
	}

	module.exports = parent;


/***/ },
/* 286 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 287 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument given to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(226),
	    basePropertyDeep = __webpack_require__(289),
	    isKey = __webpack_require__(280);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(275);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports.default = createDevTools;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(159);

	var _instrument = __webpack_require__(181);

	var _instrument2 = _interopRequireDefault(_instrument);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function createDevTools(children) {
	  var _class, _temp;

	  var monitorElement = _react.Children.only(children);
	  var monitorProps = monitorElement.props;
	  var Monitor = monitorElement.type;
	  var ConnectedMonitor = (0, _reactRedux.connect)(function (state) {
	    return state;
	  })(Monitor);
	  var enhancer = (0, _instrument2.default)(function (state, action) {
	    return Monitor.update(monitorProps, state, action);
	  });

	  return _temp = _class = function (_Component) {
	    _inherits(DevTools, _Component);

	    function DevTools(props, context) {
	      _classCallCheck(this, DevTools);

	      var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	      if (!props.store && !context.store) {
	        console.error('Redux DevTools could not render. You must pass the Redux store ' + 'to <DevTools> either as a "store" prop or by wrapping it in a ' + '<Provider store={store}>.');
	        return _possibleConstructorReturn(_this);
	      }

	      if (context.store) {
	        _this.liftedStore = context.store.liftedStore;
	      } else {
	        _this.liftedStore = props.store.liftedStore;
	      }

	      if (!_this.liftedStore) {
	        console.error('Redux DevTools could not render. Did you forget to include ' + 'DevTools.instrument() in your store enhancer chain before ' + 'using createStore()?');
	      }
	      return _this;
	    }

	    DevTools.prototype.render = function render() {
	      if (!this.liftedStore) {
	        return null;
	      }

	      return _react2.default.createElement(ConnectedMonitor, _extends({}, monitorProps, {
	        store: this.liftedStore }));
	    };

	    return DevTools;
	  }(_react.Component), _class.contextTypes = {
	    store: _react.PropTypes.object
	  }, _class.propTypes = {
	    store: _react.PropTypes.object
	  }, _class.instrument = function () {
	    return enhancer;
	  }, _temp;
	}

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = undefined;

	var _LogMonitor = __webpack_require__(292);

	var _LogMonitor2 = _interopRequireDefault(_LogMonitor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _LogMonitor2.default;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _LogMonitorEntry = __webpack_require__(293);

	var _LogMonitorEntry2 = _interopRequireDefault(_LogMonitorEntry);

	var _LogMonitorButton = __webpack_require__(314);

	var _LogMonitorButton2 = _interopRequireDefault(_LogMonitorButton);

	var _function = __webpack_require__(312);

	var _function2 = _interopRequireDefault(_function);

	var _reduxDevtoolsThemes = __webpack_require__(316);

	var themes = _interopRequireWildcard(_reduxDevtoolsThemes);

	var _reduxDevtools = __webpack_require__(180);

	var _actions = __webpack_require__(356);

	var _reducers = __webpack_require__(357);

	var _reducers2 = _interopRequireDefault(_reducers);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var reset = _reduxDevtools.ActionCreators.reset;
	var rollback = _reduxDevtools.ActionCreators.rollback;
	var commit = _reduxDevtools.ActionCreators.commit;
	var sweep = _reduxDevtools.ActionCreators.sweep;
	var toggleAction = _reduxDevtools.ActionCreators.toggleAction;

	var styles = {
	  container: {
	    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
	    position: 'relative',
	    overflowY: 'hidden',
	    width: '100%',
	    height: '100%',
	    minWidth: 300,
	    direction: 'ltr'
	  },
	  buttonBar: {
	    textAlign: 'center',
	    borderBottomWidth: 1,
	    borderBottomStyle: 'solid',
	    borderColor: 'transparent',
	    zIndex: 1,
	    display: 'flex',
	    flexDirection: 'row'
	  },
	  elements: {
	    position: 'absolute',
	    left: 0,
	    right: 0,
	    top: 38,
	    bottom: 0,
	    overflowX: 'hidden',
	    overflowY: 'auto'
	  }
	};

	var LogMonitor = (function (_Component) {
	  _inherits(LogMonitor, _Component);

	  function LogMonitor(props) {
	    _classCallCheck(this, LogMonitor);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.shouldComponentUpdate = _function2.default;

	    _this.handleToggleAction = _this.handleToggleAction.bind(_this);
	    _this.handleReset = _this.handleReset.bind(_this);
	    _this.handleRollback = _this.handleRollback.bind(_this);
	    _this.handleSweep = _this.handleSweep.bind(_this);
	    _this.handleCommit = _this.handleCommit.bind(_this);
	    return _this;
	  }

	  LogMonitor.prototype.scroll = function scroll() {
	    var node = this.refs.container;
	    if (!node) {
	      return;
	    }
	    if (this.scrollDown) {
	      var offsetHeight = node.offsetHeight;
	      var scrollHeight = node.scrollHeight;

	      node.scrollTop = scrollHeight - offsetHeight;
	      this.scrollDown = false;
	    }
	  };

	  LogMonitor.prototype.componentDidMount = function componentDidMount() {
	    var node = this.refs.container;
	    if (!node) {
	      return;
	    }

	    if (this.props.preserveScrollTop) {
	      node.scrollTop = this.props.monitorState.initialScrollTop;
	      this.interval = setInterval(this.updateScrollTop.bind(this), 1000);
	    } else {
	      this.scrollDown = true;
	      this.scroll();
	    }
	  };

	  LogMonitor.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.interval) {
	      clearInterval(this.interval);
	    }
	  };

	  LogMonitor.prototype.updateScrollTop = function updateScrollTop() {
	    var node = this.refs.container;
	    this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));
	  };

	  LogMonitor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var node = this.refs.container;
	    if (!node) {
	      this.scrollDown = true;
	    } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
	      var scrollTop = node.scrollTop;
	      var offsetHeight = node.offsetHeight;
	      var scrollHeight = node.scrollHeight;

	      this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
	    } else {
	      this.scrollDown = false;
	    }
	  };

	  LogMonitor.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.scroll();
	  };

	  LogMonitor.prototype.handleRollback = function handleRollback() {
	    this.props.dispatch(rollback());
	  };

	  LogMonitor.prototype.handleSweep = function handleSweep() {
	    this.props.dispatch(sweep());
	  };

	  LogMonitor.prototype.handleCommit = function handleCommit() {
	    this.props.dispatch(commit());
	  };

	  LogMonitor.prototype.handleToggleAction = function handleToggleAction(id) {
	    this.props.dispatch(toggleAction(id));
	  };

	  LogMonitor.prototype.handleReset = function handleReset() {
	    this.props.dispatch(reset());
	  };

	  LogMonitor.prototype.getTheme = function getTheme() {
	    var theme = this.props.theme;

	    if (typeof theme !== 'string') {
	      return theme;
	    }

	    if (typeof themes[theme] !== 'undefined') {
	      return themes[theme];
	    }

	    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
	    return themes.nicinabox;
	  };

	  LogMonitor.prototype.render = function render() {
	    var elements = [];
	    var theme = this.getTheme();
	    var _props = this.props;
	    var actionsById = _props.actionsById;
	    var skippedActionIds = _props.skippedActionIds;
	    var stagedActionIds = _props.stagedActionIds;
	    var computedStates = _props.computedStates;
	    var select = _props.select;

	    for (var i = 0; i < stagedActionIds.length; i++) {
	      var actionId = stagedActionIds[i];
	      var action = actionsById[actionId].action;
	      var _computedStates$i = computedStates[i];
	      var state = _computedStates$i.state;
	      var error = _computedStates$i.error;

	      var previousState = undefined;
	      if (i > 0) {
	        previousState = computedStates[i - 1].state;
	      }
	      elements.push(_react2.default.createElement(_LogMonitorEntry2.default, { key: actionId,
	        theme: theme,
	        select: select,
	        action: action,
	        actionId: actionId,
	        state: state,
	        previousState: previousState,
	        collapsed: skippedActionIds.indexOf(actionId) > -1,
	        error: error,
	        expandActionRoot: this.props.expandActionRoot,
	        expandStateRoot: this.props.expandStateRoot,
	        onActionClick: this.handleToggleAction }));
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: _extends({}, styles.container, { backgroundColor: theme.base00 }) },
	      _react2.default.createElement(
	        'div',
	        { style: _extends({}, styles.buttonBar, { borderColor: theme.base02 }) },
	        _react2.default.createElement(
	          _LogMonitorButton2.default,
	          {
	            theme: theme,
	            onClick: this.handleReset,
	            enabled: true },
	          'Reset'
	        ),
	        _react2.default.createElement(
	          _LogMonitorButton2.default,
	          {
	            theme: theme,
	            onClick: this.handleRollback,
	            enabled: computedStates.length > 1 },
	          'Revert'
	        ),
	        _react2.default.createElement(
	          _LogMonitorButton2.default,
	          {
	            theme: theme,
	            onClick: this.handleSweep,
	            enabled: skippedActionIds.length > 0 },
	          'Sweep'
	        ),
	        _react2.default.createElement(
	          _LogMonitorButton2.default,
	          {
	            theme: theme,
	            onClick: this.handleCommit,
	            enabled: computedStates.length > 1 },
	          'Commit'
	        )
	      ),
	      _react2.default.createElement(
	        'div',
	        { style: styles.elements, ref: 'container' },
	        elements
	      )
	    );
	  };

	  return LogMonitor;
	})(_react.Component);

	LogMonitor.update = _reducers2.default;
	LogMonitor.propTypes = {
	  dispatch: _react.PropTypes.func,
	  computedStates: _react.PropTypes.array,
	  actionsById: _react.PropTypes.object,
	  stagedActionIds: _react.PropTypes.array,
	  skippedActionIds: _react.PropTypes.array,
	  monitorState: _react.PropTypes.shape({
	    initialScrollTop: _react.PropTypes.number
	  }),

	  preserveScrollTop: _react.PropTypes.bool,
	  select: _react.PropTypes.func.isRequired,
	  theme: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]),
	  expandActionRoot: _react.PropTypes.bool,
	  expandStateRoot: _react.PropTypes.bool
	};
	LogMonitor.defaultProps = {
	  select: function select(state) {
	    return state;
	  },
	  theme: 'nicinabox',
	  preserveScrollTop: true,
	  expandActionRoot: true,
	  expandStateRoot: true
	};
	exports.default = LogMonitor;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactJsonTree = __webpack_require__(294);

	var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

	var _LogMonitorEntryAction = __webpack_require__(311);

	var _LogMonitorEntryAction2 = _interopRequireDefault(_LogMonitorEntryAction);

	var _function = __webpack_require__(312);

	var _function2 = _interopRequireDefault(_function);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  entry: {
	    display: 'block',
	    WebkitUserSelect: 'none'
	  },
	  tree: {
	    paddingLeft: 0
	  }
	};

	var LogMonitorEntry = (function (_Component) {
	  _inherits(LogMonitorEntry, _Component);

	  function LogMonitorEntry(props) {
	    _classCallCheck(this, LogMonitorEntry);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.shouldComponentUpdate = _function2.default;

	    _this.handleActionClick = _this.handleActionClick.bind(_this);
	    return _this;
	  }

	  LogMonitorEntry.prototype.printState = function printState(state, error) {
	    var errorText = error;
	    if (!errorText) {
	      try {
	        return _react2.default.createElement(_reactJsonTree2.default, {
	          theme: this.props.theme,
	          keyName: 'state',
	          data: this.props.select(state),
	          previousData: typeof this.props.previousState !== 'undefined' ? this.props.select(this.props.previousState) : undefined,
	          expandRoot: this.props.expandStateRoot,
	          style: styles.tree });
	      } catch (err) {
	        errorText = 'Error selecting state.';
	      }
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: {
	          color: this.props.theme.base08,
	          paddingTop: 20,
	          paddingLeft: 30,
	          paddingRight: 30,
	          paddingBottom: 35
	        } },
	      errorText
	    );
	  };

	  LogMonitorEntry.prototype.handleActionClick = function handleActionClick() {
	    var _props = this.props;
	    var actionId = _props.actionId;
	    var onActionClick = _props.onActionClick;

	    if (actionId > 0) {
	      onActionClick(actionId);
	    }
	  };

	  LogMonitorEntry.prototype.render = function render() {
	    var _props2 = this.props;
	    var actionId = _props2.actionId;
	    var error = _props2.error;
	    var action = _props2.action;
	    var state = _props2.state;
	    var collapsed = _props2.collapsed;

	    var styleEntry = {
	      opacity: collapsed ? 0.5 : 1,
	      cursor: actionId > 0 ? 'pointer' : 'default'
	    };

	    return _react2.default.createElement(
	      'div',
	      { style: {
	          textDecoration: collapsed ? 'line-through' : 'none',
	          color: this.props.theme.base06
	        } },
	      _react2.default.createElement(_LogMonitorEntryAction2.default, {
	        theme: this.props.theme,
	        collapsed: collapsed,
	        action: action,
	        expandActionRoot: this.props.expandActionRoot,
	        onClick: this.handleActionClick,
	        style: _extends({}, styles.entry, styleEntry) }),
	      !collapsed && _react2.default.createElement(
	        'div',
	        null,
	        this.printState(state, error)
	      )
	    );
	  };

	  return LogMonitorEntry;
	})(_react.Component);

	LogMonitorEntry.propTypes = {
	  state: _react.PropTypes.object.isRequired,
	  action: _react.PropTypes.object.isRequired,
	  actionId: _react.PropTypes.number.isRequired,
	  select: _react.PropTypes.func.isRequired,
	  error: _react.PropTypes.string,
	  onActionClick: _react.PropTypes.func.isRequired,
	  collapsed: _react.PropTypes.bool,
	  expandActionRoot: _react.PropTypes.bool,
	  expandStateRoot: _react.PropTypes.bool
	};
	exports.default = LogMonitorEntry;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _class, _temp; // ES6 + inline style port of JSONViewer https://bitbucket.org/davevedder/react-json-viewer/
	// all credits and original code to the author
	// Dave Vedder <veddermatic@gmail.com> http://www.eskimospy.com/
	// port by Daniele Zannotti http://www.github.com/dzannotti <dzannotti@me.com>

	exports.__esModule = true;
	exports.default = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _grabNode = __webpack_require__(295);

	var _grabNode2 = _interopRequireDefault(_grabNode);

	var _solarized = __webpack_require__(310);

	var _solarized2 = _interopRequireDefault(_solarized);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  tree: {
	    border: 0,
	    padding: 0,
	    marginTop: 8,
	    marginBottom: 8,
	    marginLeft: 2,
	    marginRight: 0,
	    fontSize: '0.90em',
	    listStyle: 'none',
	    MozUserSelect: 'none',
	    WebkitUserSelect: 'none'
	  }
	};

	var getEmptyStyle = function getEmptyStyle() {
	  return {};
	};
	var identity = function identity(value) {
	  return value;
	};

	var JSONTree = (_temp = _class = function (_React$Component) {
	  _inherits(JSONTree, _React$Component);

	  function JSONTree(props) {
	    _classCallCheck(this, JSONTree);

	    return _possibleConstructorReturn(this, _React$Component.call(this, props));
	  }

	  JSONTree.prototype.render = function render() {
	    var getStyles = {
	      getArrowStyle: this.props.getArrowStyle,
	      getListStyle: this.props.getListStyle,
	      getItemStringStyle: this.props.getItemStringStyle,
	      getLabelStyle: this.props.getLabelStyle,
	      getValueStyle: this.props.getValueStyle
	    };

	    var _props = this.props;
	    var value = _props.data;
	    var initialExpanded = _props.expandRoot;
	    var allExpanded = _props.expandAll;
	    var getItemString = _props.getItemString;
	    var labelRenderer = _props.labelRenderer;
	    var valueRenderer = _props.valueRenderer;
	    var key = _props.keyName;
	    var previousData = _props.previousData;
	    var theme = _props.theme;

	    var rootNode = (0, _grabNode2.default)({
	      getItemString: getItemString,
	      initialExpanded: initialExpanded,
	      allExpanded: allExpanded,
	      key: key,
	      previousData: previousData,
	      styles: getStyles,
	      theme: theme,
	      labelRenderer: labelRenderer,
	      value: value,
	      valueRenderer: valueRenderer
	    });

	    return _react2.default.createElement(
	      'ul',
	      { style: _extends({}, styles.tree, this.props.style) },
	      rootNode
	    );
	  };

	  return JSONTree;
	}(_react2.default.Component), _class.propTypes = {
	  data: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired
	}, _class.defaultProps = {
	  expandRoot: true,
	  expandAll: false,
	  keyName: 'root',
	  theme: _solarized2.default,
	  getArrowStyle: getEmptyStyle,
	  getListStyle: getEmptyStyle,
	  getItemStringStyle: getEmptyStyle,
	  getLabelStyle: getEmptyStyle,
	  getValueStyle: getEmptyStyle,
	  getItemString: function getItemString(type, data, itemType, itemString) {
	    return _react2.default.createElement(
	      'span',
	      null,
	      itemType,
	      ' ',
	      itemString
	    );
	  },
	  labelRenderer: identity,
	  valueRenderer: identity
	}, _temp);
	exports.default = JSONTree;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	exports.default = function (_ref) {
	  var getItemString = _ref.getItemString;
	  var _ref$initialExpanded = _ref.initialExpanded;
	  var initialExpanded = _ref$initialExpanded === undefined ? false : _ref$initialExpanded;
	  var allExpanded = _ref.allExpanded;
	  var key = _ref.key;
	  var labelRenderer = _ref.labelRenderer;
	  var previousData = _ref.previousData;
	  var styles = _ref.styles;
	  var theme = _ref.theme;
	  var value = _ref.value;
	  var valueRenderer = _ref.valueRenderer;

	  var nodeType = (0, _objType2.default)(value);

	  var simpleNodeProps = {
	    getItemString: getItemString,
	    initialExpanded: initialExpanded,
	    key: key,
	    keyName: key,
	    labelRenderer: labelRenderer,
	    nodeType: nodeType,
	    previousData: previousData,
	    styles: styles,
	    theme: theme,
	    value: value,
	    valueRenderer: valueRenderer
	  };

	  var nestedNodeProps = _extends({}, simpleNodeProps, {
	    data: value,
	    initialExpanded: initialExpanded,
	    allExpanded: allExpanded,
	    keyName: key
	  });

	  switch (nodeType) {
	    case 'Object':
	      return _react2.default.createElement(_JSONObjectNode2.default, nestedNodeProps);
	    case 'Array':
	      return _react2.default.createElement(_JSONArrayNode2.default, nestedNodeProps);
	    case 'Iterable':
	      return _react2.default.createElement(_JSONIterableNode2.default, nestedNodeProps);
	    case 'String':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base0B, valueGetter: function valueGetter(raw) {
	          return '"' + raw + '"';
	        } }));
	    case 'Number':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base09 }));
	    case 'Boolean':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base09, valueGetter: function valueGetter(raw) {
	          return raw ? 'true' : 'false';
	        } }));
	    case 'Date':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base0B, valueGetter: function valueGetter(raw) {
	          return raw.toISOString();
	        } }));
	    case 'Null':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base08, valueGetter: function valueGetter() {
	          return 'null';
	        } }));
	    case 'Undefined':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base08, valueGetter: function valueGetter() {
	          return 'undefined';
	        } }));
	    case 'Function':
	      return _react2.default.createElement(_JSONValueNode2.default, _extends({}, simpleNodeProps, { valueColor: theme.base08, valueGetter: function valueGetter(raw) {
	          return raw.toString();
	        } }));
	    default:
	      return false;
	  }
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _objType = __webpack_require__(296);

	var _objType2 = _interopRequireDefault(_objType);

	var _JSONObjectNode = __webpack_require__(297);

	var _JSONObjectNode2 = _interopRequireDefault(_JSONObjectNode);

	var _JSONArrayNode = __webpack_require__(306);

	var _JSONArrayNode2 = _interopRequireDefault(_JSONArrayNode);

	var _JSONIterableNode = __webpack_require__(307);

	var _JSONIterableNode2 = _interopRequireDefault(_JSONIterableNode);

	var _JSONValueNode = __webpack_require__(308);

	var _JSONValueNode2 = _interopRequireDefault(_JSONValueNode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 296 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	exports.default = function (obj) {
	  if (obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj) && typeof obj[Symbol.iterator] === 'function') {
	    return 'Iterable';
	  }
	  return Object.prototype.toString.call(obj).slice(8, -1);
	};

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	exports.default = function (_ref3) {
	  var props = _objectWithoutProperties(_ref3, []);

	  return _react2.default.createElement(_JSONNestedNode2.default, _extends({}, props, {
	    getChildNodes: getChildNodes,
	    nodeType: 'Object',
	    nodeTypeIndicator: '{}',
	    renderItemString: renderItemString
	  }));
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _JSONNestedNode = __webpack_require__(298);

	var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

	var _grabNode = __webpack_require__(295);

	var _grabNode2 = _interopRequireDefault(_grabNode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	// Returns the "n Items" string for this node, generating and caching it if it hasn't been created yet.
	function renderItemString(_ref) {
	  var data = _ref.data;
	  var getItemString = _ref.getItemString;
	  var itemString = _ref.itemString;
	  var itemType = _ref.itemType;

	  if (!itemString) {
	    var len = Object.keys(data).length;
	    itemString = len + ' key' + (len !== 1 ? 's' : '');
	  }
	  return getItemString('Object', data, itemType, itemString);
	}

	// Returns the child nodes for each entry in iterable.
	// If we have generated them previously we return from cache; otherwise we create them.
	function getChildNodes(_ref2) {
	  var data = _ref2.data;
	  var getItemString = _ref2.getItemString;
	  var labelRenderer = _ref2.labelRenderer;
	  var previousData = _ref2.previousData;
	  var styles = _ref2.styles;
	  var theme = _ref2.theme;
	  var valueRenderer = _ref2.valueRenderer;
	  var allExpanded = _ref2.allExpanded;

	  var childNodes = [];
	  for (var key in data) {
	    if (Object.getPrototypeOf(data) === null || data.hasOwnProperty(key)) {
	      var previousDataValue = undefined;
	      if (typeof previousData !== 'undefined' && previousData !== null) {
	        previousDataValue = previousData[key];
	      }

	      var node = (0, _grabNode2.default)({
	        getItemString: getItemString,
	        key: key,
	        labelRenderer: labelRenderer,
	        previousData: previousDataValue,
	        renderItemString: renderItemString,
	        styles: styles,
	        theme: theme,
	        value: data[key],
	        valueRenderer: valueRenderer,
	        allExpanded: allExpanded
	      });

	      if (node !== false) {
	        childNodes.push(node);
	      }
	    }
	  }

	  return childNodes;
	}

	// Configures <JSONNestedNode> to render an Object

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _dec, _class;

	exports.__esModule = true;
	exports.default = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactMixin = __webpack_require__(299);

	var _reactMixin2 = _interopRequireDefault(_reactMixin);

	var _mixins = __webpack_require__(302);

	var _JSONArrow = __webpack_require__(305);

	var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Renders nested values (eg. objects, arrays, lists, etc.)
	 */

	var styles = {
	  base: {
	    position: 'relative',
	    paddingTop: 3,
	    paddingBottom: 3,
	    marginLeft: 14
	  },
	  label: {
	    margin: 0,
	    padding: 0,
	    display: 'inline-block'
	  },
	  span: {
	    cursor: 'default'
	  },
	  spanType: {
	    marginLeft: 5,
	    marginRight: 5
	  }
	};

	var JSONNestedNode = (_dec = _reactMixin2.default.decorate(_mixins.ExpandedStateHandlerMixin), _dec(_class = function (_React$Component) {
	  _inherits(JSONNestedNode, _React$Component);

	  // flag to see if we still need to render our child nodes

	  function JSONNestedNode(props) {
	    _classCallCheck(this, JSONNestedNode);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.defaultProps = {
	      data: [],
	      initialExpanded: false,
	      allExpanded: false
	    };
	    _this.itemString = false;
	    _this.needsChildNodes = true;
	    _this.renderedChildren = [];

	    _this.state = {
	      expanded: _this.props.initialExpanded || _this.props.allExpanded,
	      createdChildNodes: false
	    };
	    return _this;
	  }

	  // cache store for our child nodes

	  // cache store for the number of items string we display

	  JSONNestedNode.prototype.render = function render() {
	    var childListStyle = {
	      padding: 0,
	      margin: 0,
	      listStyle: 'none',
	      display: this.state.expanded ? 'block' : 'none'
	    };
	    var containerStyle = undefined;
	    var spanStyle = _extends({}, styles.span, {
	      color: this.props.theme.base0B
	    });
	    containerStyle = _extends({}, styles.base);
	    if (this.state.expanded) {
	      spanStyle = _extends({}, spanStyle, {
	        color: this.props.theme.base03
	      });
	    }

	    if (this.state.expanded && this.needsChildNodes) {
	      this.needsChildNodes = false;
	      this.renderedChildren = this.props.getChildNodes(_extends({}, this.props));
	    }

	    var itemType = _react2.default.createElement(
	      'span',
	      { style: styles.spanType },
	      this.props.nodeTypeIndicator
	    );
	    var renderedItemString = this.props.renderItemString({
	      data: this.props.data,
	      getItemString: this.props.getItemString,
	      itemString: this.itemString,
	      itemType: itemType
	    });

	    return _react2.default.createElement(
	      'li',
	      { style: containerStyle },
	      _react2.default.createElement(_JSONArrow2.default, { theme: this.props.theme, open: this.state.expanded, onClick: this.handleClick.bind(this), style: this.props.styles.getArrowStyle(this.state.expanded) }),
	      _react2.default.createElement(
	        'label',
	        { style: _extends({}, styles.label, {
	            color: this.props.theme.base0D
	          }, this.props.styles.getLabelStyle(this.props.nodeType, this.state.expanded)), onClick: this.handleClick.bind(this) },
	        this.props.labelRenderer(this.props.keyName),
	        ':'
	      ),
	      _react2.default.createElement(
	        'span',
	        { style: _extends({}, spanStyle, this.props.styles.getItemStringStyle(this.props.nodeType, this.state.expanded)), onClick: this.handleClick.bind(this) },
	        renderedItemString
	      ),
	      _react2.default.createElement(
	        'ul',
	        { style: _extends({}, childListStyle, this.props.styles.getListStyle(this.props.nodeType, this.state.expanded)) },
	        this.renderedChildren
	      )
	    );
	  };

	  return JSONNestedNode;
	}(_react2.default.Component)) || _class);
	exports.default = JSONNestedNode;

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var mixin = __webpack_require__(300);
	var assign = __webpack_require__(301);

	var mixinProto = mixin({
	  // lifecycle stuff is as you'd expect
	  componentDidMount: mixin.MANY,
	  componentWillMount: mixin.MANY,
	  componentWillReceiveProps: mixin.MANY,
	  shouldComponentUpdate: mixin.ONCE,
	  componentWillUpdate: mixin.MANY,
	  componentDidUpdate: mixin.MANY,
	  componentWillUnmount: mixin.MANY,
	  getChildContext: mixin.MANY_MERGED
	});

	function setDefaultProps(reactMixin) {
	  var getDefaultProps = reactMixin.getDefaultProps;

	  if (getDefaultProps) {
	    reactMixin.defaultProps = getDefaultProps();

	    delete reactMixin.getDefaultProps;
	  }
	}

	function setInitialState(reactMixin) {
	  var getInitialState = reactMixin.getInitialState;
	  var componentWillMount = reactMixin.componentWillMount;

	  function applyInitialState(instance) {
	    var state = instance.state || {};
	    assign(state, getInitialState.call(instance));
	    instance.state = state;
	  }

	  if (getInitialState) {
	    if (!componentWillMount) {
	      reactMixin.componentWillMount = function() {
	        applyInitialState(this);
	      };
	    } else {
	      reactMixin.componentWillMount = function() {
	        applyInitialState(this);
	        componentWillMount.call(this);
	      };
	    }

	    delete reactMixin.getInitialState;
	  }
	}

	function mixinClass(reactClass, reactMixin) {
	  setDefaultProps(reactMixin);
	  setInitialState(reactMixin);

	  var prototypeMethods = {};
	  var staticProps = {};

	  Object.keys(reactMixin).forEach(function(key) {
	    if (key === 'mixins') {
	      return; // Handled below to ensure proper order regardless of property iteration order
	    }
	    if (key === 'statics') {
	      return; // gets special handling
	    } else if (typeof reactMixin[key] === 'function') {
	      prototypeMethods[key] = reactMixin[key];
	    } else {
	      staticProps[key] = reactMixin[key];
	    }
	  });

	  mixinProto(reactClass.prototype, prototypeMethods);

	  var mergePropTypes = function(left, right, key) {
	    if (!left) return right;
	    if (!right) return left;

	    var result = {};
	    Object.keys(left).forEach(function(leftKey) {
	      if (!right[leftKey]) {
	        result[leftKey] = left[leftKey];
	      }
	    });

	    Object.keys(right).forEach(function(rightKey) {
	      if (left[rightKey]) {
	        result[rightKey] = function checkBothContextTypes() {
	          return right[rightKey].apply(this, arguments) && left[rightKey].apply(this, arguments);
	        };
	      } else {
	        result[rightKey] = right[rightKey];
	      }
	    });

	    return result;
	  };

	  mixin({
	    childContextTypes: mergePropTypes,
	    contextTypes: mergePropTypes,
	    propTypes: mixin.MANY_MERGED_LOOSE,
	    defaultProps: mixin.MANY_MERGED_LOOSE
	  })(reactClass, staticProps);

	  // statics is a special case because it merges directly onto the class
	  if (reactMixin.statics) {
	    Object.getOwnPropertyNames(reactMixin.statics).forEach(function(key) {
	      var left = reactClass[key];
	      var right = reactMixin.statics[key];

	      if (left !== undefined && right !== undefined) {
	        throw new TypeError('Cannot mixin statics because statics.' + key + ' and Component.' + key + ' are defined.');
	      }

	      reactClass[key] = left !== undefined ? left : right;
	    });
	  }

	  // If more mixins are defined, they need to run. This emulate's react's behavior.
	  // See behavior in code at:
	  // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L468
	  // Note the .reverse(). In React, a fresh constructor is created, then all mixins are mixed in recursively,
	  // then the actual spec is mixed in last.
	  //
	  // With ES6 classes, the properties are already there, so smart-mixin mixes functions (a, b) -> b()a(), which is
	  // the opposite of how React does it. If we reverse this array, we basically do the whole logic in reverse,
	  // which makes the result the same. See the test for more.
	  // See also:
	  // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L853
	  if (reactMixin.mixins) {
	    reactMixin.mixins.reverse().forEach(mixinClass.bind(null, reactClass));
	  }

	  return reactClass;
	}

	module.exports = (function() {
	  var reactMixin = mixinProto;

	  reactMixin.onClass = function(reactClass, mixin) {
	    return mixinClass(reactClass, mixin);
	  };

	  reactMixin.decorate = function(mixin) {
	    return function(reactClass) {
	      return reactMixin.onClass(reactClass, mixin);
	    };
	  };

	  return reactMixin;
	})();


/***/ },
/* 300 */
/***/ function(module, exports) {

	var objToStr = function(x){ return Object.prototype.toString.call(x); };

	var thrower = function(error){
	    throw error;
	};

	var mixins = module.exports = function makeMixinFunction(rules, _opts){
	    var opts = _opts || {};
	    if (!opts.unknownFunction) {
	        opts.unknownFunction = mixins.ONCE;
	    }

	    if (!opts.nonFunctionProperty) {
	        opts.nonFunctionProperty = function(left, right, key){
	            if (left !== undefined && right !== undefined) {
	                var getTypeName = function(obj){
	                    if (obj && obj.constructor && obj.constructor.name) {
	                        return obj.constructor.name;
	                    }
	                    else {
	                        return objToStr(obj).slice(8, -1);
	                    }
	                };
	                throw new TypeError('Cannot mixin key ' + key + ' because it is provided by multiple sources, '
	                        + 'and the types are ' + getTypeName(left) + ' and ' + getTypeName(right));
	            }
	            return left === undefined ? right : left;
	        };
	    }

	    function setNonEnumerable(target, key, value){
	        if (key in target){
	            target[key] = value;
	        }
	        else {
	            Object.defineProperty(target, key, {
	                value: value,
	                writable: true,
	                configurable: true
	            });
	        }
	    }

	    return function applyMixin(source, mixin){
	        Object.keys(mixin).forEach(function(key){
	            var left = source[key], right = mixin[key], rule = rules[key];

	            // this is just a weird case where the key was defined, but there's no value
	            // behave like the key wasn't defined
	            if (left === undefined && right === undefined) return;

	            var wrapIfFunction = function(thing){
	                return typeof thing !== "function" ? thing
	                : function(){
	                    return thing.call(this, arguments);
	                };
	            };

	            // do we have a rule for this key?
	            if (rule) {
	                // may throw here
	                var fn = rule(left, right, key);
	                setNonEnumerable(source, key, wrapIfFunction(fn));
	                return;
	            }

	            var leftIsFn = typeof left === "function";
	            var rightIsFn = typeof right === "function";

	            // check to see if they're some combination of functions or undefined
	            // we already know there's no rule, so use the unknown function behavior
	            if (leftIsFn && right === undefined
	             || rightIsFn && left === undefined
	             || leftIsFn && rightIsFn) {
	                // may throw, the default is ONCE so if both are functions
	                // the default is to throw
	                setNonEnumerable(source, key, wrapIfFunction(opts.unknownFunction(left, right, key)));
	                return;
	            }

	            // we have no rule for them, one may be a function but one or both aren't
	            // our default is MANY_MERGED_LOOSE which will merge objects, concat arrays
	            // and throw if there's a type mismatch or both are primitives (how do you merge 3, and "foo"?)
	            source[key] = opts.nonFunctionProperty(left, right, key);
	        });
	    };
	};

	mixins._mergeObjects = function(obj1, obj2) {
	    var assertObject = function(obj, obj2){
	        var type = objToStr(obj);
	        if (type !== '[object Object]') {
	            var displayType = obj.constructor ? obj.constructor.name : 'Unknown';
	            var displayType2 = obj2.constructor ? obj2.constructor.name : 'Unknown';
	            thrower('cannot merge returned value of type ' + displayType + ' with an ' + displayType2);
	        }
	    };

	    if (Array.isArray(obj1) && Array.isArray(obj2)) {
	        return obj1.concat(obj2);
	    }

	    assertObject(obj1, obj2);
	    assertObject(obj2, obj1);

	    var result = {};
	    Object.keys(obj1).forEach(function(k){
	        if (Object.prototype.hasOwnProperty.call(obj2, k)) {
	            thrower('cannot merge returns because both have the ' + JSON.stringify(k) + ' key');
	        }
	        result[k] = obj1[k];
	    });

	    Object.keys(obj2).forEach(function(k){
	        // we can skip the conflict check because all conflicts would already be found
	        result[k] = obj2[k];
	    });
	    return result;

	}

	// define our built-in mixin types
	mixins.ONCE = function(left, right, key){
	    if (left && right) {
	        throw new TypeError('Cannot mixin ' + key + ' because it has a unique constraint.');
	    }

	    var fn = left || right;

	    return function(args){
	        return fn.apply(this, args);
	    };
	};

	mixins.MANY = function(left, right, key){
	    return function(args){
	        if (right) right.apply(this, args);
	        return left ? left.apply(this, args) : undefined;
	    };
	};

	mixins.MANY_MERGED_LOOSE = function(left, right, key) {
	    if(left && right) {
	        return mixins._mergeObjects(left, right);
	    }

	    return left || right;
	}

	mixins.MANY_MERGED = function(left, right, key){
	    return function(args){
	        var res1 = right && right.apply(this, args);
	        var res2 = left && left.apply(this, args);
	        if (res1 && res2) {
	            return mixins._mergeObjects(res1, res2)
	        }
	        return res2 || res1;
	    };
	};


	mixins.REDUCE_LEFT = function(_left, _right, key){
	    var left = _left || function(x){ return x };
	    var right = _right || function(x){ return x };
	    return function(args){
	        return right.call(this, left.apply(this, args));
	    };
	};

	mixins.REDUCE_RIGHT = function(_left, _right, key){
	    var left = _left || function(x){ return x };
	    var right = _right || function(x){ return x };
	    return function(args){
	        return left.call(this, right.apply(this, args));
	    };
	};



/***/ },
/* 301 */
/***/ function(module, exports) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _squashClickEvent = __webpack_require__(303);

	Object.defineProperty(exports, 'SquashClickEventMixin', {
	  enumerable: true,
	  get: function get() {
	    return _squashClickEvent.default;
	  }
	});

	var _expandedStateHandler = __webpack_require__(304);

	Object.defineProperty(exports, 'ExpandedStateHandlerMixin', {
	  enumerable: true,
	  get: function get() {
	    return _expandedStateHandler.default;
	  }
	});

/***/ },
/* 303 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = {
	  handleClick: function handleClick(e) {
	    e.stopPropagation();
	  }
	};

/***/ },
/* 304 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = {
	  handleClick: function handleClick(e) {
	    e.stopPropagation();
	    this.setState({
	      expanded: !this.state.expanded
	    });
	  },
	  componentWillReceiveProps: function componentWillReceiveProps() {
	    // resets our caches and flags we need to build child nodes again
	    this.renderedChildren = [];
	    this.itemString = false;
	    this.needsChildNodes = true;
	  }
	};

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports.default = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  base: {
	    display: 'inline-block',
	    marginLeft: 0,
	    marginTop: 8,
	    marginRight: 5,
	    'float': 'left',
	    transition: '150ms',
	    WebkitTransition: '150ms',
	    MozTransition: '150ms',
	    borderLeft: '5px solid transparent',
	    borderRight: '5px solid transparent',
	    borderTopWidth: 5,
	    borderTopStyle: 'solid',
	    WebkitTransform: 'rotateZ(-90deg)',
	    MozTransform: 'rotateZ(-90deg)',
	    transform: 'rotateZ(-90deg)'
	  },
	  open: {
	    WebkitTransform: 'rotateZ(0deg)',
	    MozTransform: 'rotateZ(0deg)',
	    transform: 'rotateZ(0deg)'
	  }
	};

	var JSONArrow = function (_React$Component) {
	  _inherits(JSONArrow, _React$Component);

	  function JSONArrow() {
	    _classCallCheck(this, JSONArrow);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  JSONArrow.prototype.render = function render() {
	    var style = _extends({}, styles.base, {
	      borderTopColor: this.props.theme.base0D
	    });
	    if (this.props.open) {
	      style = _extends({}, style, styles.open);
	    }
	    style = _extends({}, style, this.props.style);
	    return _react2.default.createElement('div', { style: style, onClick: this.props.onClick });
	  };

	  return JSONArrow;
	}(_react2.default.Component);

	exports.default = JSONArrow;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports.default = JSONArrayNode;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _JSONNestedNode = __webpack_require__(298);

	var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

	var _grabNode = __webpack_require__(295);

	var _grabNode2 = _interopRequireDefault(_grabNode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	// Returns the "n Items" string for this node, generating and caching it if it hasn't been created yet.
	function renderItemString(_ref) {
	  var data = _ref.data;
	  var getItemString = _ref.getItemString;
	  var itemString = _ref.itemString;
	  var itemType = _ref.itemType;

	  if (!itemString) {
	    itemString = data.length + ' item' + (data.length !== 1 ? 's' : '');
	  }
	  return getItemString('Array', data, itemType, itemString);
	}

	// Returns the child nodes for each entry in iterable.
	// If we have generated them previously we return from cache; otherwise we create them.
	function getChildNodes(_ref2) {
	  var data = _ref2.data;
	  var getItemString = _ref2.getItemString;
	  var labelRenderer = _ref2.labelRenderer;
	  var previousData = _ref2.previousData;
	  var styles = _ref2.styles;
	  var theme = _ref2.theme;
	  var valueRenderer = _ref2.valueRenderer;
	  var allExpanded = _ref2.allExpanded;

	  var childNodes = [];
	  data.forEach(function (value, key) {
	    var previousDataValue = undefined;
	    if (typeof previousData !== 'undefined' && previousData !== null) {
	      previousDataValue = previousData[key];
	    }

	    var node = (0, _grabNode2.default)({
	      getItemString: getItemString,
	      key: key,
	      labelRenderer: labelRenderer,
	      previousData: previousDataValue,
	      renderItemString: renderItemString,
	      styles: styles,
	      theme: theme,
	      value: value,
	      valueRenderer: valueRenderer,
	      allExpanded: allExpanded
	    });

	    if (node !== false) {
	      childNodes.push(node);
	    }
	  });

	  return childNodes;
	}

	// Configures <JSONNestedNode> to render an Array
	function JSONArrayNode(_ref3) {
	  var props = _objectWithoutProperties(_ref3, []);

	  return _react2.default.createElement(_JSONNestedNode2.default, _extends({}, props, {
	    getChildNodes: getChildNodes,
	    nodeType: 'Array',
	    nodeTypeIndicator: '[]',
	    renderItemString: renderItemString
	  }));
	}

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	exports.default = function (_ref5) {
	  var props = _objectWithoutProperties(_ref5, []);

	  return _react2.default.createElement(_JSONNestedNode2.default, _extends({}, props, {
	    getChildNodes: getChildNodes,
	    nodeType: 'Iterable',
	    nodeTypeIndicator: '()',
	    renderItemString: renderItemString
	  }));
	};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _JSONNestedNode = __webpack_require__(298);

	var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

	var _grabNode = __webpack_require__(295);

	var _grabNode2 = _interopRequireDefault(_grabNode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	// Returns the "n Items" string for this node, generating and caching it if it hasn't been created yet.
	function renderItemString(_ref) {
	  var data = _ref.data;
	  var getItemString = _ref.getItemString;
	  var itemString = _ref.itemString;
	  var itemType = _ref.itemType;

	  if (!itemString) {
	    var count = 0;
	    if (Number.isSafeInteger(data.size)) {
	      count = data.size;
	    } else {
	      for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	        var _ref2;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref2 = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref2 = _i.value;
	        }

	        var entry = _ref2;
	        // eslint-disable-line no-unused-vars
	        count += 1;
	      }
	    }
	    itemString = count + ' entr' + (count !== 1 ? 'ies' : 'y');
	  }
	  return getItemString('Iterable', data, itemType, itemString);
	}

	// Returns the child nodes for each entry in iterable.
	// If we have generated them previously we return from cache; otherwise we create them.
	function getChildNodes(_ref3) {
	  var data = _ref3.data;
	  var getItemString = _ref3.getItemString;
	  var labelRenderer = _ref3.labelRenderer;
	  var previousData = _ref3.previousData;
	  var styles = _ref3.styles;
	  var theme = _ref3.theme;
	  var valueRenderer = _ref3.valueRenderer;
	  var allExpanded = _ref3.allExpanded;

	  var childNodes = [];
	  for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	    var _ref4;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref4 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref4 = _i2.value;
	    }

	    var entry = _ref4;

	    var key = null;
	    var value = null;
	    if (Array.isArray(entry)) {
	      key = entry[0];
	      value = entry[1];
	    } else {
	      key = childNodes.length;
	      value = entry;
	    }

	    var previousDataValue = undefined;
	    if (typeof previousData !== 'undefined' && previousData !== null) {
	      previousDataValue = previousData[key];
	    }

	    var node = (0, _grabNode2.default)({
	      getItemString: getItemString,
	      key: key,
	      labelRenderer: labelRenderer,
	      previousData: previousDataValue,
	      styles: styles,
	      theme: theme,
	      value: value,
	      valueRenderer: valueRenderer,
	      allExpanded: allExpanded
	    });

	    if (node !== false) {
	      childNodes.push(node);
	    }
	  }

	  return childNodes;
	}

	// Configures <JSONNestedNode> to render an iterable

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _dec, _class, _class2, _temp;

	exports.__esModule = true;
	exports.default = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactMixin = __webpack_require__(299);

	var _reactMixin2 = _interopRequireDefault(_reactMixin);

	var _mixins = __webpack_require__(302);

	var _hexToRgb = __webpack_require__(309);

	var _hexToRgb2 = _interopRequireDefault(_hexToRgb);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Renders simple values (eg. strings, numbers, booleans, etc)
	 */

	var styles = {
	  base: {
	    paddingTop: 3,
	    paddingBottom: 3,
	    paddingRight: 0,
	    marginLeft: 14,
	    WebkitUserSelect: 'text',
	    MozUserSelect: 'text'
	  },
	  label: {
	    display: 'inline-block',
	    marginRight: 5
	  }
	};

	var JSONValueNode = (_dec = _reactMixin2.default.decorate(_mixins.SquashClickEventMixin), _dec(_class = (_temp = _class2 = function (_React$Component) {
	  _inherits(JSONValueNode, _React$Component);

	  function JSONValueNode() {
	    _classCallCheck(this, JSONValueNode);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  JSONValueNode.prototype.render = function render() {
	    var backgroundColor = 'transparent';
	    if (this.props.previousValue !== this.props.value) {
	      var bgColor = (0, _hexToRgb2.default)(this.props.theme.base06);
	      backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
	    }

	    return _react2.default.createElement(
	      'li',
	      { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
	      _react2.default.createElement(
	        'label',
	        { style: _extends({}, styles.label, {
	            color: this.props.theme.base0D
	          }, this.props.styles.getLabelStyle(this.props.nodeType, true)) },
	        this.props.labelRenderer(this.props.keyName),
	        ':'
	      ),
	      _react2.default.createElement(
	        'span',
	        { style: _extends({
	            color: this.props.valueColor
	          }, this.props.styles.getValueStyle(this.props.nodeType, true)) },
	        this.props.valueRenderer(this.props.valueGetter(this.props.value))
	      )
	    );
	  };

	  return JSONValueNode;
	}(_react2.default.Component), _class2.defaultProps = {
	  valueGetter: function valueGetter(value) {
	    return value;
	  }
	}, _temp)) || _class);
	exports.default = JSONValueNode;

/***/ },
/* 309 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (hex) {
	  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	  return result ? {
	    r: parseInt(result[1], 16),
	    g: parseInt(result[2], 16),
	    b: parseInt(result[3], 16)
	  } : null;
	};

/***/ },
/* 310 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = {
	  scheme: 'solarized',
	  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
	  base00: '#002b36',
	  base01: '#073642',
	  base02: '#586e75',
	  base03: '#657b83',
	  base04: '#839496',
	  base05: '#93a1a1',
	  base06: '#eee8d5',
	  base07: '#fdf6e3',
	  base08: '#dc322f',
	  base09: '#cb4b16',
	  base0A: '#b58900',
	  base0B: '#859900',
	  base0C: '#2aa198',
	  base0D: '#268bd2',
	  base0E: '#6c71c4',
	  base0F: '#d33682'
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactJsonTree = __webpack_require__(294);

	var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  actionBar: {
	    paddingTop: 8,
	    paddingBottom: 7,
	    paddingLeft: 16
	  },
	  payload: {
	    margin: 0,
	    overflow: 'auto'
	  }
	};

	var LogMonitorAction = (function (_Component) {
	  _inherits(LogMonitorAction, _Component);

	  function LogMonitorAction() {
	    _classCallCheck(this, LogMonitorAction);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  LogMonitorAction.prototype.renderPayload = function renderPayload(payload) {
	    return _react2.default.createElement(
	      'div',
	      { style: _extends({}, styles.payload, {
	          backgroundColor: this.props.theme.base00
	        }) },
	      Object.keys(payload).length > 0 ? _react2.default.createElement(_reactJsonTree2.default, { theme: this.props.theme,
	        keyName: 'action',
	        data: payload,
	        expandRoot: this.props.expandActionRoot }) : ''
	    );
	  };

	  LogMonitorAction.prototype.render = function render() {
	    var _props$action = this.props.action;
	    var type = _props$action.type;

	    var payload = _objectWithoutProperties(_props$action, ['type']);

	    return _react2.default.createElement(
	      'div',
	      { style: _extends({
	          backgroundColor: this.props.theme.base02,
	          color: this.props.theme.base06
	        }, this.props.style) },
	      _react2.default.createElement(
	        'div',
	        { style: styles.actionBar,
	          onClick: this.props.onClick },
	        type
	      ),
	      !this.props.collapsed ? this.renderPayload(payload) : ''
	    );
	  };

	  return LogMonitorAction;
	})(_react.Component);

	exports.default = LogMonitorAction;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = shouldPureComponentUpdate;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _shallowEqual = __webpack_require__(313);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	function shouldPureComponentUpdate(nextProps, nextState) {
	  return !(0, _shallowEqual2['default'])(this.props, nextProps) || !(0, _shallowEqual2['default'])(this.state, nextState);
	}

	module.exports = exports['default'];

/***/ },
/* 313 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = shallowEqual;

	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports['default'];

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _brighten = __webpack_require__(315);

	var _brighten2 = _interopRequireDefault(_brighten);

	var _function = __webpack_require__(312);

	var _function2 = _interopRequireDefault(_function);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var styles = {
	  base: {
	    cursor: 'pointer',
	    fontWeight: 'bold',
	    borderRadius: 3,
	    padding: 4,
	    marginLeft: 3,
	    marginRight: 3,
	    marginTop: 5,
	    marginBottom: 5,
	    flexGrow: 1,
	    display: 'inline-block',
	    fontSize: '0.8em',
	    color: 'white',
	    textDecoration: 'none'
	  }
	};

	var LogMonitorButton = (function (_React$Component) {
	  _inherits(LogMonitorButton, _React$Component);

	  function LogMonitorButton(props) {
	    _classCallCheck(this, LogMonitorButton);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.shouldComponentUpdate = _function2.default;

	    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
	    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
	    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
	    _this.handleMouseUp = _this.handleMouseUp.bind(_this);
	    _this.onClick = _this.onClick.bind(_this);

	    _this.state = {
	      hovered: false,
	      active: false
	    };
	    return _this;
	  }

	  LogMonitorButton.prototype.handleMouseEnter = function handleMouseEnter() {
	    this.setState({ hovered: true });
	  };

	  LogMonitorButton.prototype.handleMouseLeave = function handleMouseLeave() {
	    this.setState({ hovered: false });
	  };

	  LogMonitorButton.prototype.handleMouseDown = function handleMouseDown() {
	    this.setState({ active: true });
	  };

	  LogMonitorButton.prototype.handleMouseUp = function handleMouseUp() {
	    this.setState({ active: false });
	  };

	  LogMonitorButton.prototype.onClick = function onClick() {
	    if (!this.props.enabled) {
	      return;
	    }
	    if (this.props.onClick) {
	      this.props.onClick();
	    }
	  };

	  LogMonitorButton.prototype.render = function render() {
	    var style = _extends({}, styles.base, {
	      backgroundColor: this.props.theme.base02
	    });
	    if (this.props.enabled && this.state.hovered) {
	      style = _extends({}, style, {
	        backgroundColor: (0, _brighten2.default)(this.props.theme.base02, 0.2)
	      });
	    }
	    if (!this.props.enabled) {
	      style = _extends({}, style, {
	        opacity: 0.2,
	        cursor: 'text',
	        backgroundColor: 'transparent'
	      });
	    }
	    return _react2.default.createElement(
	      'a',
	      { onMouseEnter: this.handleMouseEnter,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp,
	        onClick: this.onClick,
	        style: style },
	      this.props.children
	    );
	  };

	  return LogMonitorButton;
	})(_react2.default.Component);

	exports.default = LogMonitorButton;

/***/ },
/* 315 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (hexColor, lightness) {
	  var hex = String(hexColor).replace(/[^0-9a-f]/gi, '');
	  if (hex.length < 6) {
	    hex = hex.replace(/(.)/g, '$1$1');
	  }
	  var lum = lightness || 0;

	  var rgb = '#';
	  var c = undefined;
	  for (var i = 0; i < 3; ++i) {
	    c = parseInt(hex.substr(i * 2, 2), 16);
	    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
	    rgb += ('00' + c).substr(c.length);
	  }
	  return rgb;
	};

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	var _base16 = __webpack_require__(317);

	_defaults(exports, _interopExportWildcard(_base16, _defaults));

	var _nicinabox = __webpack_require__(355);

	exports.nicinabox = _interopRequire(_nicinabox);

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _threezerotwofour = __webpack_require__(318);

	exports.threezerotwofour = _interopRequire(_threezerotwofour);

	var _apathy = __webpack_require__(319);

	exports.apathy = _interopRequire(_apathy);

	var _ashes = __webpack_require__(320);

	exports.ashes = _interopRequire(_ashes);

	var _atelierDune = __webpack_require__(321);

	exports.atelierDune = _interopRequire(_atelierDune);

	var _atelierForest = __webpack_require__(322);

	exports.atelierForest = _interopRequire(_atelierForest);

	var _atelierHeath = __webpack_require__(323);

	exports.atelierHeath = _interopRequire(_atelierHeath);

	var _atelierLakeside = __webpack_require__(324);

	exports.atelierLakeside = _interopRequire(_atelierLakeside);

	var _atelierSeaside = __webpack_require__(325);

	exports.atelierSeaside = _interopRequire(_atelierSeaside);

	var _bespin = __webpack_require__(326);

	exports.bespin = _interopRequire(_bespin);

	var _brewer = __webpack_require__(327);

	exports.brewer = _interopRequire(_brewer);

	var _bright = __webpack_require__(328);

	exports.bright = _interopRequire(_bright);

	var _chalk = __webpack_require__(329);

	exports.chalk = _interopRequire(_chalk);

	var _codeschool = __webpack_require__(330);

	exports.codeschool = _interopRequire(_codeschool);

	var _colors = __webpack_require__(331);

	exports.colors = _interopRequire(_colors);

	var _default = __webpack_require__(332);

	exports['default'] = _interopRequire(_default);

	var _eighties = __webpack_require__(333);

	exports.eighties = _interopRequire(_eighties);

	var _embers = __webpack_require__(334);

	exports.embers = _interopRequire(_embers);

	var _flat = __webpack_require__(335);

	exports.flat = _interopRequire(_flat);

	var _google = __webpack_require__(336);

	exports.google = _interopRequire(_google);

	var _grayscale = __webpack_require__(337);

	exports.grayscale = _interopRequire(_grayscale);

	var _greenscreen = __webpack_require__(338);

	exports.greenscreen = _interopRequire(_greenscreen);

	var _harmonic = __webpack_require__(339);

	exports.harmonic = _interopRequire(_harmonic);

	var _hopscotch = __webpack_require__(340);

	exports.hopscotch = _interopRequire(_hopscotch);

	var _isotope = __webpack_require__(341);

	exports.isotope = _interopRequire(_isotope);

	var _marrakesh = __webpack_require__(342);

	exports.marrakesh = _interopRequire(_marrakesh);

	var _mocha = __webpack_require__(343);

	exports.mocha = _interopRequire(_mocha);

	var _monokai = __webpack_require__(344);

	exports.monokai = _interopRequire(_monokai);

	var _ocean = __webpack_require__(345);

	exports.ocean = _interopRequire(_ocean);

	var _paraiso = __webpack_require__(346);

	exports.paraiso = _interopRequire(_paraiso);

	var _pop = __webpack_require__(347);

	exports.pop = _interopRequire(_pop);

	var _railscasts = __webpack_require__(348);

	exports.railscasts = _interopRequire(_railscasts);

	var _shapeshifter = __webpack_require__(349);

	exports.shapeshifter = _interopRequire(_shapeshifter);

	var _solarized = __webpack_require__(350);

	exports.solarized = _interopRequire(_solarized);

	var _summerfruit = __webpack_require__(351);

	exports.summerfruit = _interopRequire(_summerfruit);

	var _tomorrow = __webpack_require__(352);

	exports.tomorrow = _interopRequire(_tomorrow);

	var _tube = __webpack_require__(353);

	exports.tube = _interopRequire(_tube);

	var _twilight = __webpack_require__(354);

	exports.twilight = _interopRequire(_twilight);

/***/ },
/* 318 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'threezerotwofour',
	  author: 'jan t. sott (http://github.com/idleberg)',
	  base00: '#090300',
	  base01: '#3a3432',
	  base02: '#4a4543',
	  base03: '#5c5855',
	  base04: '#807d7c',
	  base05: '#a5a2a2',
	  base06: '#d6d5d4',
	  base07: '#f7f7f7',
	  base08: '#db2d20',
	  base09: '#e8bbd0',
	  base0A: '#fded02',
	  base0B: '#01a252',
	  base0C: '#b5e4f4',
	  base0D: '#01a0e4',
	  base0E: '#a16a94',
	  base0F: '#cdab53'
	};
	module.exports = exports['default'];

/***/ },
/* 319 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'apathy',
	  author: 'jannik siebert (https://github.com/janniks)',
	  base00: '#031A16',
	  base01: '#0B342D',
	  base02: '#184E45',
	  base03: '#2B685E',
	  base04: '#5F9C92',
	  base05: '#81B5AC',
	  base06: '#A7CEC8',
	  base07: '#D2E7E4',
	  base08: '#3E9688',
	  base09: '#3E7996',
	  base0A: '#3E4C96',
	  base0B: '#883E96',
	  base0C: '#963E4C',
	  base0D: '#96883E',
	  base0E: '#4C963E',
	  base0F: '#3E965B'
	};
	module.exports = exports['default'];

/***/ },
/* 320 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'ashes',
	  author: 'jannik siebert (https://github.com/janniks)',
	  base00: '#1C2023',
	  base01: '#393F45',
	  base02: '#565E65',
	  base03: '#747C84',
	  base04: '#ADB3BA',
	  base05: '#C7CCD1',
	  base06: '#DFE2E5',
	  base07: '#F3F4F5',
	  base08: '#C7AE95',
	  base09: '#C7C795',
	  base0A: '#AEC795',
	  base0B: '#95C7AE',
	  base0C: '#95AEC7',
	  base0D: '#AE95C7',
	  base0E: '#C795AE',
	  base0F: '#C79595'
	};
	module.exports = exports['default'];

/***/ },
/* 321 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'atelier dune',
	  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)',
	  base00: '#20201d',
	  base01: '#292824',
	  base02: '#6e6b5e',
	  base03: '#7d7a68',
	  base04: '#999580',
	  base05: '#a6a28c',
	  base06: '#e8e4cf',
	  base07: '#fefbec',
	  base08: '#d73737',
	  base09: '#b65611',
	  base0A: '#cfb017',
	  base0B: '#60ac39',
	  base0C: '#1fad83',
	  base0D: '#6684e1',
	  base0E: '#b854d4',
	  base0F: '#d43552'
	};
	module.exports = exports['default'];

/***/ },
/* 322 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'atelier forest',
	  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)',
	  base00: '#1b1918',
	  base01: '#2c2421',
	  base02: '#68615e',
	  base03: '#766e6b',
	  base04: '#9c9491',
	  base05: '#a8a19f',
	  base06: '#e6e2e0',
	  base07: '#f1efee',
	  base08: '#f22c40',
	  base09: '#df5320',
	  base0A: '#d5911a',
	  base0B: '#5ab738',
	  base0C: '#00ad9c',
	  base0D: '#407ee7',
	  base0E: '#6666ea',
	  base0F: '#c33ff3'
	};
	module.exports = exports['default'];

/***/ },
/* 323 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'atelier heath',
	  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)',
	  base00: '#1b181b',
	  base01: '#292329',
	  base02: '#695d69',
	  base03: '#776977',
	  base04: '#9e8f9e',
	  base05: '#ab9bab',
	  base06: '#d8cad8',
	  base07: '#f7f3f7',
	  base08: '#ca402b',
	  base09: '#a65926',
	  base0A: '#bb8a35',
	  base0B: '#379a37',
	  base0C: '#159393',
	  base0D: '#516aec',
	  base0E: '#7b59c0',
	  base0F: '#cc33cc'
	};
	module.exports = exports['default'];

/***/ },
/* 324 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'atelier lakeside',
	  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)',
	  base00: '#161b1d',
	  base01: '#1f292e',
	  base02: '#516d7b',
	  base03: '#5a7b8c',
	  base04: '#7195a8',
	  base05: '#7ea2b4',
	  base06: '#c1e4f6',
	  base07: '#ebf8ff',
	  base08: '#d22d72',
	  base09: '#935c25',
	  base0A: '#8a8a0f',
	  base0B: '#568c3b',
	  base0C: '#2d8f6f',
	  base0D: '#257fad',
	  base0E: '#5d5db1',
	  base0F: '#b72dd2'
	};
	module.exports = exports['default'];

/***/ },
/* 325 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'atelier seaside',
	  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)',
	  base00: '#131513',
	  base01: '#242924',
	  base02: '#5e6e5e',
	  base03: '#687d68',
	  base04: '#809980',
	  base05: '#8ca68c',
	  base06: '#cfe8cf',
	  base07: '#f0fff0',
	  base08: '#e6193c',
	  base09: '#87711d',
	  base0A: '#c3c322',
	  base0B: '#29a329',
	  base0C: '#1999b3',
	  base0D: '#3d62f5',
	  base0E: '#ad2bee',
	  base0F: '#e619c3'
	};
	module.exports = exports['default'];

/***/ },
/* 326 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'bespin',
	  author: 'jan t. sott',
	  base00: '#28211c',
	  base01: '#36312e',
	  base02: '#5e5d5c',
	  base03: '#666666',
	  base04: '#797977',
	  base05: '#8a8986',
	  base06: '#9d9b97',
	  base07: '#baae9e',
	  base08: '#cf6a4c',
	  base09: '#cf7d34',
	  base0A: '#f9ee98',
	  base0B: '#54be0d',
	  base0C: '#afc4db',
	  base0D: '#5ea6ea',
	  base0E: '#9b859d',
	  base0F: '#937121'
	};
	module.exports = exports['default'];

/***/ },
/* 327 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'brewer',
	  author: 'timothée poisot (http://github.com/tpoisot)',
	  base00: '#0c0d0e',
	  base01: '#2e2f30',
	  base02: '#515253',
	  base03: '#737475',
	  base04: '#959697',
	  base05: '#b7b8b9',
	  base06: '#dadbdc',
	  base07: '#fcfdfe',
	  base08: '#e31a1c',
	  base09: '#e6550d',
	  base0A: '#dca060',
	  base0B: '#31a354',
	  base0C: '#80b1d3',
	  base0D: '#3182bd',
	  base0E: '#756bb1',
	  base0F: '#b15928'
	};
	module.exports = exports['default'];

/***/ },
/* 328 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'bright',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#000000',
	  base01: '#303030',
	  base02: '#505050',
	  base03: '#b0b0b0',
	  base04: '#d0d0d0',
	  base05: '#e0e0e0',
	  base06: '#f5f5f5',
	  base07: '#ffffff',
	  base08: '#fb0120',
	  base09: '#fc6d24',
	  base0A: '#fda331',
	  base0B: '#a1c659',
	  base0C: '#76c7b7',
	  base0D: '#6fb3d2',
	  base0E: '#d381c3',
	  base0F: '#be643c'
	};
	module.exports = exports['default'];

/***/ },
/* 329 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'chalk',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#151515',
	  base01: '#202020',
	  base02: '#303030',
	  base03: '#505050',
	  base04: '#b0b0b0',
	  base05: '#d0d0d0',
	  base06: '#e0e0e0',
	  base07: '#f5f5f5',
	  base08: '#fb9fb1',
	  base09: '#eda987',
	  base0A: '#ddb26f',
	  base0B: '#acc267',
	  base0C: '#12cfc0',
	  base0D: '#6fc2ef',
	  base0E: '#e1a3ee',
	  base0F: '#deaf8f'
	};
	module.exports = exports['default'];

/***/ },
/* 330 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'codeschool',
	  author: 'brettof86',
	  base00: '#232c31',
	  base01: '#1c3657',
	  base02: '#2a343a',
	  base03: '#3f4944',
	  base04: '#84898c',
	  base05: '#9ea7a6',
	  base06: '#a7cfa3',
	  base07: '#b5d8f6',
	  base08: '#2a5491',
	  base09: '#43820d',
	  base0A: '#a03b1e',
	  base0B: '#237986',
	  base0C: '#b02f30',
	  base0D: '#484d79',
	  base0E: '#c59820',
	  base0F: '#c98344'
	};
	module.exports = exports['default'];

/***/ },
/* 331 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'colors',
	  author: 'mrmrs (http://clrs.cc)',
	  base00: '#111111',
	  base01: '#333333',
	  base02: '#555555',
	  base03: '#777777',
	  base04: '#999999',
	  base05: '#bbbbbb',
	  base06: '#dddddd',
	  base07: '#ffffff',
	  base08: '#ff4136',
	  base09: '#ff851b',
	  base0A: '#ffdc00',
	  base0B: '#2ecc40',
	  base0C: '#7fdbff',
	  base0D: '#0074d9',
	  base0E: '#b10dc9',
	  base0F: '#85144b'
	};
	module.exports = exports['default'];

/***/ },
/* 332 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'default',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#181818',
	  base01: '#282828',
	  base02: '#383838',
	  base03: '#585858',
	  base04: '#b8b8b8',
	  base05: '#d8d8d8',
	  base06: '#e8e8e8',
	  base07: '#f8f8f8',
	  base08: '#ab4642',
	  base09: '#dc9656',
	  base0A: '#f7ca88',
	  base0B: '#a1b56c',
	  base0C: '#86c1b9',
	  base0D: '#7cafc2',
	  base0E: '#ba8baf',
	  base0F: '#a16946'
	};
	module.exports = exports['default'];

/***/ },
/* 333 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'eighties',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#2d2d2d',
	  base01: '#393939',
	  base02: '#515151',
	  base03: '#747369',
	  base04: '#a09f93',
	  base05: '#d3d0c8',
	  base06: '#e8e6df',
	  base07: '#f2f0ec',
	  base08: '#f2777a',
	  base09: '#f99157',
	  base0A: '#ffcc66',
	  base0B: '#99cc99',
	  base0C: '#66cccc',
	  base0D: '#6699cc',
	  base0E: '#cc99cc',
	  base0F: '#d27b53'
	};
	module.exports = exports['default'];

/***/ },
/* 334 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'embers',
	  author: 'jannik siebert (https://github.com/janniks)',
	  base00: '#16130F',
	  base01: '#2C2620',
	  base02: '#433B32',
	  base03: '#5A5047',
	  base04: '#8A8075',
	  base05: '#A39A90',
	  base06: '#BEB6AE',
	  base07: '#DBD6D1',
	  base08: '#826D57',
	  base09: '#828257',
	  base0A: '#6D8257',
	  base0B: '#57826D',
	  base0C: '#576D82',
	  base0D: '#6D5782',
	  base0E: '#82576D',
	  base0F: '#825757'
	};
	module.exports = exports['default'];

/***/ },
/* 335 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'flat',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#2C3E50',
	  base01: '#34495E',
	  base02: '#7F8C8D',
	  base03: '#95A5A6',
	  base04: '#BDC3C7',
	  base05: '#e0e0e0',
	  base06: '#f5f5f5',
	  base07: '#ECF0F1',
	  base08: '#E74C3C',
	  base09: '#E67E22',
	  base0A: '#F1C40F',
	  base0B: '#2ECC71',
	  base0C: '#1ABC9C',
	  base0D: '#3498DB',
	  base0E: '#9B59B6',
	  base0F: '#be643c'
	};
	module.exports = exports['default'];

/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'google',
	  author: 'seth wright (http://sethawright.com)',
	  base00: '#1d1f21',
	  base01: '#282a2e',
	  base02: '#373b41',
	  base03: '#969896',
	  base04: '#b4b7b4',
	  base05: '#c5c8c6',
	  base06: '#e0e0e0',
	  base07: '#ffffff',
	  base08: '#CC342B',
	  base09: '#F96A38',
	  base0A: '#FBA922',
	  base0B: '#198844',
	  base0C: '#3971ED',
	  base0D: '#3971ED',
	  base0E: '#A36AC7',
	  base0F: '#3971ED'
	};
	module.exports = exports['default'];

/***/ },
/* 337 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'grayscale',
	  author: 'alexandre gavioli (https://github.com/alexx2/)',
	  base00: '#101010',
	  base01: '#252525',
	  base02: '#464646',
	  base03: '#525252',
	  base04: '#ababab',
	  base05: '#b9b9b9',
	  base06: '#e3e3e3',
	  base07: '#f7f7f7',
	  base08: '#7c7c7c',
	  base09: '#999999',
	  base0A: '#a0a0a0',
	  base0B: '#8e8e8e',
	  base0C: '#868686',
	  base0D: '#686868',
	  base0E: '#747474',
	  base0F: '#5e5e5e'
	};
	module.exports = exports['default'];

/***/ },
/* 338 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'green screen',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#001100',
	  base01: '#003300',
	  base02: '#005500',
	  base03: '#007700',
	  base04: '#009900',
	  base05: '#00bb00',
	  base06: '#00dd00',
	  base07: '#00ff00',
	  base08: '#007700',
	  base09: '#009900',
	  base0A: '#007700',
	  base0B: '#00bb00',
	  base0C: '#005500',
	  base0D: '#009900',
	  base0E: '#00bb00',
	  base0F: '#005500'
	};
	module.exports = exports['default'];

/***/ },
/* 339 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'harmonic16',
	  author: 'jannik siebert (https://github.com/janniks)',
	  base00: '#0b1c2c',
	  base01: '#223b54',
	  base02: '#405c79',
	  base03: '#627e99',
	  base04: '#aabcce',
	  base05: '#cbd6e2',
	  base06: '#e5ebf1',
	  base07: '#f7f9fb',
	  base08: '#bf8b56',
	  base09: '#bfbf56',
	  base0A: '#8bbf56',
	  base0B: '#56bf8b',
	  base0C: '#568bbf',
	  base0D: '#8b56bf',
	  base0E: '#bf568b',
	  base0F: '#bf5656'
	};
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'hopscotch',
	  author: 'jan t. sott',
	  base00: '#322931',
	  base01: '#433b42',
	  base02: '#5c545b',
	  base03: '#797379',
	  base04: '#989498',
	  base05: '#b9b5b8',
	  base06: '#d5d3d5',
	  base07: '#ffffff',
	  base08: '#dd464c',
	  base09: '#fd8b19',
	  base0A: '#fdcc59',
	  base0B: '#8fc13e',
	  base0C: '#149b93',
	  base0D: '#1290bf',
	  base0E: '#c85e7c',
	  base0F: '#b33508'
	};
	module.exports = exports['default'];

/***/ },
/* 341 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'isotope',
	  author: 'jan t. sott',
	  base00: '#000000',
	  base01: '#404040',
	  base02: '#606060',
	  base03: '#808080',
	  base04: '#c0c0c0',
	  base05: '#d0d0d0',
	  base06: '#e0e0e0',
	  base07: '#ffffff',
	  base08: '#ff0000',
	  base09: '#ff9900',
	  base0A: '#ff0099',
	  base0B: '#33ff00',
	  base0C: '#00ffff',
	  base0D: '#0066ff',
	  base0E: '#cc00ff',
	  base0F: '#3300ff'
	};
	module.exports = exports['default'];

/***/ },
/* 342 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'marrakesh',
	  author: 'alexandre gavioli (http://github.com/alexx2/)',
	  base00: '#201602',
	  base01: '#302e00',
	  base02: '#5f5b17',
	  base03: '#6c6823',
	  base04: '#86813b',
	  base05: '#948e48',
	  base06: '#ccc37a',
	  base07: '#faf0a5',
	  base08: '#c35359',
	  base09: '#b36144',
	  base0A: '#a88339',
	  base0B: '#18974e',
	  base0C: '#75a738',
	  base0D: '#477ca1',
	  base0E: '#8868b3',
	  base0F: '#b3588e'
	};
	module.exports = exports['default'];

/***/ },
/* 343 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'mocha',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#3B3228',
	  base01: '#534636',
	  base02: '#645240',
	  base03: '#7e705a',
	  base04: '#b8afad',
	  base05: '#d0c8c6',
	  base06: '#e9e1dd',
	  base07: '#f5eeeb',
	  base08: '#cb6077',
	  base09: '#d28b71',
	  base0A: '#f4bc87',
	  base0B: '#beb55b',
	  base0C: '#7bbda4',
	  base0D: '#8ab3b5',
	  base0E: '#a89bb9',
	  base0F: '#bb9584'
	};
	module.exports = exports['default'];

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'monokai',
	  author: 'wimer hazenberg (http://www.monokai.nl)',
	  base00: '#272822',
	  base01: '#383830',
	  base02: '#49483e',
	  base03: '#75715e',
	  base04: '#a59f85',
	  base05: '#f8f8f2',
	  base06: '#f5f4f1',
	  base07: '#f9f8f5',
	  base08: '#f92672',
	  base09: '#fd971f',
	  base0A: '#f4bf75',
	  base0B: '#a6e22e',
	  base0C: '#a1efe4',
	  base0D: '#66d9ef',
	  base0E: '#ae81ff',
	  base0F: '#cc6633'
	};
	module.exports = exports['default'];

/***/ },
/* 345 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'ocean',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#2b303b',
	  base01: '#343d46',
	  base02: '#4f5b66',
	  base03: '#65737e',
	  base04: '#a7adba',
	  base05: '#c0c5ce',
	  base06: '#dfe1e8',
	  base07: '#eff1f5',
	  base08: '#bf616a',
	  base09: '#d08770',
	  base0A: '#ebcb8b',
	  base0B: '#a3be8c',
	  base0C: '#96b5b4',
	  base0D: '#8fa1b3',
	  base0E: '#b48ead',
	  base0F: '#ab7967'
	};
	module.exports = exports['default'];

/***/ },
/* 346 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'paraiso',
	  author: 'jan t. sott',
	  base00: '#2f1e2e',
	  base01: '#41323f',
	  base02: '#4f424c',
	  base03: '#776e71',
	  base04: '#8d8687',
	  base05: '#a39e9b',
	  base06: '#b9b6b0',
	  base07: '#e7e9db',
	  base08: '#ef6155',
	  base09: '#f99b15',
	  base0A: '#fec418',
	  base0B: '#48b685',
	  base0C: '#5bc4bf',
	  base0D: '#06b6ef',
	  base0E: '#815ba4',
	  base0F: '#e96ba8'
	};
	module.exports = exports['default'];

/***/ },
/* 347 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'pop',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#000000',
	  base01: '#202020',
	  base02: '#303030',
	  base03: '#505050',
	  base04: '#b0b0b0',
	  base05: '#d0d0d0',
	  base06: '#e0e0e0',
	  base07: '#ffffff',
	  base08: '#eb008a',
	  base09: '#f29333',
	  base0A: '#f8ca12',
	  base0B: '#37b349',
	  base0C: '#00aabb',
	  base0D: '#0e5a94',
	  base0E: '#b31e8d',
	  base0F: '#7a2d00'
	};
	module.exports = exports['default'];

/***/ },
/* 348 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'railscasts',
	  author: 'ryan bates (http://railscasts.com)',
	  base00: '#2b2b2b',
	  base01: '#272935',
	  base02: '#3a4055',
	  base03: '#5a647e',
	  base04: '#d4cfc9',
	  base05: '#e6e1dc',
	  base06: '#f4f1ed',
	  base07: '#f9f7f3',
	  base08: '#da4939',
	  base09: '#cc7833',
	  base0A: '#ffc66d',
	  base0B: '#a5c261',
	  base0C: '#519f50',
	  base0D: '#6d9cbe',
	  base0E: '#b6b3eb',
	  base0F: '#bc9458'
	};
	module.exports = exports['default'];

/***/ },
/* 349 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'shapeshifter',
	  author: 'tyler benziger (http://tybenz.com)',
	  base00: '#000000',
	  base01: '#040404',
	  base02: '#102015',
	  base03: '#343434',
	  base04: '#555555',
	  base05: '#ababab',
	  base06: '#e0e0e0',
	  base07: '#f9f9f9',
	  base08: '#e92f2f',
	  base09: '#e09448',
	  base0A: '#dddd13',
	  base0B: '#0ed839',
	  base0C: '#23edda',
	  base0D: '#3b48e3',
	  base0E: '#f996e2',
	  base0F: '#69542d'
	};
	module.exports = exports['default'];

/***/ },
/* 350 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'solarized',
	  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
	  base00: '#002b36',
	  base01: '#073642',
	  base02: '#586e75',
	  base03: '#657b83',
	  base04: '#839496',
	  base05: '#93a1a1',
	  base06: '#eee8d5',
	  base07: '#fdf6e3',
	  base08: '#dc322f',
	  base09: '#cb4b16',
	  base0A: '#b58900',
	  base0B: '#859900',
	  base0C: '#2aa198',
	  base0D: '#268bd2',
	  base0E: '#6c71c4',
	  base0F: '#d33682'
	};
	module.exports = exports['default'];

/***/ },
/* 351 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'summerfruit',
	  author: 'christopher corley (http://cscorley.github.io/)',
	  base00: '#151515',
	  base01: '#202020',
	  base02: '#303030',
	  base03: '#505050',
	  base04: '#B0B0B0',
	  base05: '#D0D0D0',
	  base06: '#E0E0E0',
	  base07: '#FFFFFF',
	  base08: '#FF0086',
	  base09: '#FD8900',
	  base0A: '#ABA800',
	  base0B: '#00C918',
	  base0C: '#1faaaa',
	  base0D: '#3777E6',
	  base0E: '#AD00A1',
	  base0F: '#cc6633'
	};
	module.exports = exports['default'];

/***/ },
/* 352 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'tomorrow',
	  author: 'chris kempson (http://chriskempson.com)',
	  base00: '#1d1f21',
	  base01: '#282a2e',
	  base02: '#373b41',
	  base03: '#969896',
	  base04: '#b4b7b4',
	  base05: '#c5c8c6',
	  base06: '#e0e0e0',
	  base07: '#ffffff',
	  base08: '#cc6666',
	  base09: '#de935f',
	  base0A: '#f0c674',
	  base0B: '#b5bd68',
	  base0C: '#8abeb7',
	  base0D: '#81a2be',
	  base0E: '#b294bb',
	  base0F: '#a3685a'
	};
	module.exports = exports['default'];

/***/ },
/* 353 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'london tube',
	  author: 'jan t. sott',
	  base00: '#231f20',
	  base01: '#1c3f95',
	  base02: '#5a5758',
	  base03: '#737171',
	  base04: '#959ca1',
	  base05: '#d9d8d8',
	  base06: '#e7e7e8',
	  base07: '#ffffff',
	  base08: '#ee2e24',
	  base09: '#f386a1',
	  base0A: '#ffd204',
	  base0B: '#00853e',
	  base0C: '#85cebc',
	  base0D: '#009ddc',
	  base0E: '#98005d',
	  base0F: '#b06110'
	};
	module.exports = exports['default'];

/***/ },
/* 354 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'twilight',
	  author: 'david hart (http://hart-dev.com)',
	  base00: '#1e1e1e',
	  base01: '#323537',
	  base02: '#464b50',
	  base03: '#5f5a60',
	  base04: '#838184',
	  base05: '#a7a7a7',
	  base06: '#c3c3c3',
	  base07: '#ffffff',
	  base08: '#cf6a4c',
	  base09: '#cda869',
	  base0A: '#f9ee98',
	  base0B: '#8f9d6a',
	  base0C: '#afc4db',
	  base0D: '#7587a6',
	  base0E: '#9b859d',
	  base0F: '#9b703f'
	};
	module.exports = exports['default'];

/***/ },
/* 355 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = {
	  scheme: 'nicinabox',
	  author: 'nicinabox (http://github.com/nicinabox)',
	  base00: '#2A2F3A',
	  base01: '#3C444F',
	  base02: '#4F5A65',
	  base03: '#BEBEBE',
	  base04: '#b0b0b0', // based on ocean theme
	  base05: '#d0d0d0', // based on ocean theme
	  base06: '#FFFFFF',
	  base07: '#f5f5f5', // based on ocean theme
	  base08: '#fb9fb1', // based on ocean theme
	  base09: '#FC6D24',
	  base0A: '#ddb26f', // based on ocean theme
	  base0B: '#A1C659',
	  base0C: '#12cfc0', // based on ocean theme
	  base0D: '#6FB3D2',
	  base0E: '#D381C3',
	  base0F: '#deaf8f' // based on ocean theme
	};
	module.exports = exports['default'];

/***/ },
/* 356 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.updateScrollTop = updateScrollTop;
	var UPDATE_SCROLL_TOP = exports.UPDATE_SCROLL_TOP = '@@redux-devtools-log-monitor/UPDATE_SCROLL_TOP';
	function updateScrollTop(scrollTop) {
	  return { type: UPDATE_SCROLL_TOP, scrollTop: scrollTop };
	}

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = reducer;

	var _actions = __webpack_require__(356);

	function initialScrollTop(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	  var action = arguments[2];

	  if (!props.preserveScrollTop) {
	    return 0;
	  }

	  return action.type === _actions.UPDATE_SCROLL_TOP ? action.scrollTop : state;
	}

	function reducer(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var action = arguments[2];

	  return {
	    initialScrollTop: initialScrollTop(props, state.initialScrollTop, action)
	  };
	}

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = undefined;

	var _DockMonitor = __webpack_require__(359);

	var _DockMonitor2 = _interopRequireDefault(_DockMonitor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _DockMonitor2.default;

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDock = __webpack_require__(360);

	var _reactDock2 = _interopRequireDefault(_reactDock);

	var _constants = __webpack_require__(431);

	var _actions = __webpack_require__(432);

	var _reducers = __webpack_require__(433);

	var _reducers2 = _interopRequireDefault(_reducers);

	var _parseKey = __webpack_require__(434);

	var _parseKey2 = _interopRequireDefault(_parseKey);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DockMonitor = (function (_Component) {
	  _inherits(DockMonitor, _Component);

	  function DockMonitor(props) {
	    _classCallCheck(this, DockMonitor);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
	    _this.handleSizeChange = _this.handleSizeChange.bind(_this);
	    return _this;
	  }

	  DockMonitor.prototype.componentDidMount = function componentDidMount() {
	    window.addEventListener('keydown', this.handleKeyDown);
	  };

	  DockMonitor.prototype.componentWillUnmount = function componentWillUnmount() {
	    window.removeEventListener('keydown', this.handleKeyDown);
	  };

	  DockMonitor.prototype.matchesKey = function matchesKey(key, event) {
	    var charCode = event.keyCode || event.which;
	    var char = String.fromCharCode(charCode);
	    return key.name.toUpperCase() === char.toUpperCase() && key.alt === event.altKey && key.ctrl === event.ctrlKey && key.meta === event.metaKey && key.shift === event.shiftKey;
	  };

	  DockMonitor.prototype.handleKeyDown = function handleKeyDown(e) {
	    var visibilityKey = (0, _parseKey2.default)(this.props.toggleVisibilityKey);
	    var positionKey = (0, _parseKey2.default)(this.props.changePositionKey);

	    if (this.matchesKey(visibilityKey, e)) {
	      e.preventDefault();
	      this.props.dispatch((0, _actions.toggleVisibility)());
	    } else if (this.matchesKey(positionKey, e)) {
	      e.preventDefault();
	      this.props.dispatch((0, _actions.changePosition)());
	    }
	  };

	  DockMonitor.prototype.handleSizeChange = function handleSizeChange(requestedSize) {
	    this.props.dispatch((0, _actions.changeSize)(requestedSize));
	  };

	  DockMonitor.prototype.render = function render() {
	    var _props = this.props;
	    var monitorState = _props.monitorState;
	    var children = _props.children;
	    var fluid = _props.fluid;

	    var rest = _objectWithoutProperties(_props, ['monitorState', 'children', 'fluid']);

	    var position = monitorState.position;
	    var isVisible = monitorState.isVisible;
	    var size = monitorState.size;

	    var childProps = _extends({}, rest, {
	      monitorState: monitorState.childMonitorState
	    });

	    return _react2.default.createElement(
	      _reactDock2.default,
	      { position: position,
	        isVisible: isVisible,
	        size: size,
	        fluid: fluid,
	        onSizeChange: this.handleSizeChange,
	        dimMode: 'none' },
	      (0, _react.cloneElement)(children, childProps)
	    );
	  };

	  return DockMonitor;
	})(_react.Component);

	DockMonitor.update = _reducers2.default;
	DockMonitor.propTypes = {
	  defaultPosition: _react.PropTypes.oneOf(_constants.POSITIONS).isRequired,
	  defaultIsVisible: _react.PropTypes.bool.isRequired,
	  defaultSize: _react.PropTypes.number.isRequired,
	  toggleVisibilityKey: _react.PropTypes.string.isRequired,
	  changePositionKey: _react.PropTypes.string.isRequired,
	  fluid: _react.PropTypes.bool,
	  children: _react.PropTypes.element,

	  dispatch: _react.PropTypes.func,
	  monitorState: _react.PropTypes.shape({
	    position: _react.PropTypes.oneOf(_constants.POSITIONS).isRequired,
	    size: _react.PropTypes.number.isRequired,
	    isVisible: _react.PropTypes.bool.isRequired,
	    childMonitorState: _react.PropTypes.any
	  })
	};
	DockMonitor.defaultProps = {
	  defaultIsVisible: true,
	  defaultPosition: 'right',
	  defaultSize: 0.3,
	  fluid: true
	};
	exports.default = DockMonitor;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(361)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _Dock = __webpack_require__(362);

	var _Dock2 = _interopRequireDefault(_Dock);

	exports['default'] = _Dock2['default'];
	module.exports = exports['default'];

/***/ },
/* 361 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = __webpack_require__(363)['default'];

	var _inherits = __webpack_require__(379)['default'];

	var _createClass = __webpack_require__(388)['default'];

	var _classCallCheck = __webpack_require__(391)['default'];

	var _extends = __webpack_require__(392)['default'];

	var _toConsumableArray = __webpack_require__(398)['default'];

	var _Object$keys = __webpack_require__(424)['default'];

	var _interopRequireDefault = __webpack_require__(361)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _lodashDebounce = __webpack_require__(427);

	var _lodashDebounce2 = _interopRequireDefault(_lodashDebounce);

	var _objectAssign = __webpack_require__(429);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _autoprefix = __webpack_require__(430);

	var _autoprefix2 = _interopRequireDefault(_autoprefix);

	function autoprefixes(styles) {
	  return _Object$keys(styles).reduce(function (obj, key) {
	    return (obj[key] = (0, _autoprefix2['default'])(styles[key]), obj);
	  }, {});
	}

	var styles = autoprefixes({
	  wrapper: {
	    position: 'fixed',
	    width: 0,
	    height: 0,
	    top: 0,
	    left: 0
	  },

	  dim: {
	    position: 'fixed',
	    left: 0,
	    right: 0,
	    top: 0,
	    bottom: 0,
	    zIndex: 0,
	    background: 'rgba(0, 0, 0, 0.2)',
	    opacity: 1
	  },

	  dimAppear: {
	    opacity: 0
	  },

	  dimTransparent: {
	    pointerEvents: 'none'
	  },

	  dimHidden: {
	    opacity: 0
	  },

	  dock: {
	    position: 'fixed',
	    zIndex: 1,
	    boxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',
	    background: 'white',
	    left: 0,
	    top: 0,
	    width: '100%',
	    height: '100%'
	  },

	  dockHidden: {
	    opacity: 0
	  },

	  dockResizing: {
	    transition: 'none'
	  },

	  dockContent: {
	    width: '100%',
	    height: '100%',
	    overflow: 'auto'
	  },

	  resizer: {
	    position: 'absolute',
	    zIndex: 2,
	    opacity: 0
	  }
	});

	function getTransitions(duration) {
	  return ['left', 'top', 'width', 'height'].map(function (p) {
	    return p + ' ' + duration / 1000 + 's ease-out';
	  });
	}

	function getDockStyles(_ref, _ref2) {
	  var fluid = _ref.fluid;
	  var dockStyle = _ref.dockStyle;
	  var dockHiddenStyle = _ref.dockHiddenStyle;
	  var duration = _ref.duration;
	  var position = _ref.position;
	  var isVisible = _ref.isVisible;
	  var size = _ref2.size;
	  var isResizing = _ref2.isResizing;
	  var fullWidth = _ref2.fullWidth;
	  var fullHeight = _ref2.fullHeight;

	  var posStyle = undefined;
	  var absSize = fluid ? size * 100 + '%' : size + 'px';

	  function getRestSize(fullSize) {
	    return fluid ? 100 - size * 100 + '%' : fullSize - size + 'px';
	  }

	  switch (position) {
	    case 'left':
	      posStyle = {
	        width: absSize,
	        left: isVisible ? 0 : '-' + absSize
	      };
	      break;
	    case 'right':
	      posStyle = {
	        left: isVisible ? getRestSize(fullWidth) : fullWidth,
	        width: absSize
	      };
	      break;
	    case 'top':
	      posStyle = {
	        top: isVisible ? 0 : '-' + absSize,
	        height: absSize
	      };
	      break;
	    case 'bottom':
	      posStyle = {
	        top: isVisible ? getRestSize(fullHeight) : fullHeight,
	        height: absSize
	      };
	      break;
	  }

	  var transitions = getTransitions(duration);

	  return [styles.dock, (0, _autoprefix2['default'])({
	    transition: [].concat(_toConsumableArray(transitions), [!isVisible && 'opacity 0.01s linear ' + duration / 1000 + 's']).filter(function (t) {
	      return t;
	    }).join(',')
	  }), dockStyle, (0, _autoprefix2['default'])(posStyle), isResizing && styles.dockResizing, !isVisible && styles.dockHidden, !isVisible && dockHiddenStyle];
	}

	function getDimStyles(_ref3, _ref4) {
	  var dimMode = _ref3.dimMode;
	  var dimStyle = _ref3.dimStyle;
	  var duration = _ref3.duration;
	  var isVisible = _ref3.isVisible;
	  var isTransitionStarted = _ref4.isTransitionStarted;

	  return [styles.dim, (0, _autoprefix2['default'])({
	    transition: 'opacity ' + duration / 1000 + 's ease-out'
	  }), dimStyle, dimMode === 'transparent' && styles.dimTransparent, !isVisible && styles.dimHidden, isTransitionStarted && isVisible && styles.dimAppear, isTransitionStarted && !isVisible && styles.dimDisappear];
	}

	function getResizerStyles(position) {
	  var resizerStyle = undefined;
	  var size = 10;

	  switch (position) {
	    case 'left':
	      resizerStyle = {
	        right: -size / 2,
	        width: size,
	        top: 0,
	        height: '100%',
	        cursor: 'col-resize'
	      };
	      break;
	    case 'right':
	      resizerStyle = {
	        left: -size / 2,
	        width: size,
	        top: 0,
	        height: '100%',
	        cursor: 'col-resize'
	      };
	      break;
	    case 'top':
	      resizerStyle = {
	        bottom: -size / 2,
	        height: size,
	        left: 0,
	        width: '100%',
	        cursor: 'row-resize'
	      };
	      break;
	    case 'bottom':
	      resizerStyle = {
	        top: -size / 2,
	        height: size,
	        left: 0,
	        width: '100%',
	        cursor: 'row-resize'
	      };
	      break;
	  }

	  return [styles.resizer, (0, _autoprefix2['default'])(resizerStyle)];
	}

	function getFullSize(position, fullWidth, fullHeight) {
	  return position === 'left' || position === 'right' ? fullWidth : fullHeight;
	}

	var Dock = (function (_Component) {
	  _inherits(Dock, _Component);

	  function Dock(props) {
	    var _this = this;

	    _classCallCheck(this, Dock);

	    _get(Object.getPrototypeOf(Dock.prototype), 'constructor', this).call(this, props);

	    this.transitionEnd = function () {
	      _this.setState({ isTransitionStarted: false });
	    };

	    this.hideDim = function () {
	      if (!_this.props.isVisible) {
	        _this.setState({ isDimHidden: true });
	      }
	    };

	    this.handleDimClick = function () {
	      if (_this.props.dimMode === 'opaque') {
	        _this.props.onVisibleChange && _this.props.onVisibleChange(false);
	      }
	    };

	    this.handleResize = function () {
	      if (window.requestAnimationFrame) {
	        window.requestAnimationFrame(_this.updateWindowSize.bind(_this, true));
	      } else {
	        _this.updateWindowSize(true);
	      }
	    };

	    this.updateWindowSize = function (windowResize) {
	      var sizeState = {
	        fullWidth: window.innerWidth,
	        fullHeight: window.innerHeight
	      };

	      if (windowResize) {
	        _this.setState(_extends({}, sizeState, {
	          isResizing: true,
	          isWindowResizing: windowResize
	        }));

	        _this.debouncedUpdateWindowSizeEnd();
	      } else {
	        _this.setState(sizeState);
	      }
	    };

	    this.updateWindowSizeEnd = function () {
	      _this.setState({
	        isResizing: false,
	        isWindowResizing: false
	      });
	    };

	    this.debouncedUpdateWindowSizeEnd = (0, _lodashDebounce2['default'])(this.updateWindowSizeEnd, 30);

	    this.handleWrapperLeave = function () {
	      _this.setState({ isResizing: false });
	    };

	    this.handleMouseDown = function () {
	      _this.setState({ isResizing: true });
	    };

	    this.handleMouseUp = function () {
	      _this.setState({ isResizing: false });
	    };

	    this.handleMouseMove = function (e) {
	      if (!_this.state.isResizing || _this.state.isWindowResizing) return;
	      e.preventDefault();

	      var _props = _this.props;
	      var position = _props.position;
	      var fluid = _props.fluid;
	      var _state = _this.state;
	      var fullWidth = _state.fullWidth;
	      var fullHeight = _state.fullHeight;
	      var isControlled = _state.isControlled;
	      var x = e.clientX;
	      var y = e.clientY;

	      var size = undefined;

	      switch (position) {
	        case 'left':
	          size = fluid ? x / fullWidth : x;
	          break;
	        case 'right':
	          size = fluid ? (fullWidth - x) / fullWidth : fullWidth - x;
	          break;
	        case 'top':
	          size = fluid ? y / fullHeight : y;
	          break;
	        case 'bottom':
	          size = fluid ? (fullHeight - y) / fullHeight : fullHeight - y;
	          break;
	      }

	      _this.props.onSizeChange && _this.props.onSizeChange(size);

	      if (!isControlled) {
	        _this.setState({ size: size });
	      }
	    };

	    this.state = {
	      isControlled: typeof props.size !== 'undefined',
	      size: props.size || props.defaultSize,
	      isDimHidden: !props.isVisible,
	      fullWidth: typeof window !== 'undefined' && window.innerWidth,
	      fullHeight: typeof window !== 'undefined' && window.innerHeight,
	      isTransitionStarted: false,
	      isWindowResizing: false
	    };
	  }

	  _createClass(Dock, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      window.addEventListener('mouseup', this.handleMouseUp);
	      window.addEventListener('mousemove', this.handleMouseMove);
	      window.addEventListener('resize', this.handleResize);

	      if (!window.fullWidth) {
	        this.updateWindowSize();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('mouseup', this.handleMouseUp);
	      window.removeEventListener('mousemove', this.handleMouseMove);
	      window.removeEventListener('resize', this.handleResize);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var isControlled = typeof nextProps.size !== 'undefined';

	      this.setState({ isControlled: isControlled });

	      if (isControlled && this.props.size !== nextProps.size) {
	        this.setState({ size: nextProps.size });
	      } else if (this.props.fluid !== nextProps.fluid) {
	        this.updateSize(nextProps);
	      }

	      if (this.props.isVisible !== nextProps.isVisible) {
	        this.setState({
	          isTransitionStarted: true
	        });
	      }
	    }
	  }, {
	    key: 'updateSize',
	    value: function updateSize(props) {
	      var _state2 = this.state;
	      var fullWidth = _state2.fullWidth;
	      var fullHeight = _state2.fullHeight;

	      this.setState({
	        size: props.fluid ? this.state.size / getFullSize(props.position, fullWidth, fullHeight) : getFullSize(props.position, fullWidth, fullHeight) * this.state.size
	      });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var _this2 = this;

	      if (this.props.isVisible !== prevProps.isVisible) {
	        if (!this.props.isVisible) {
	          window.setTimeout(function () {
	            return _this2.hideDim();
	          }, this.props.duration);
	        } else {
	          this.setState({ isDimHidden: false });
	        }

	        window.setTimeout(function () {
	          return _this2.setState({ isTransitionStarted: false });
	        }, 0);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props;
	      var children = _props2.children;
	      var zIndex = _props2.zIndex;
	      var dimMode = _props2.dimMode;
	      var position = _props2.position;
	      var isVisible = _props2.isVisible;
	      var _state3 = this.state;
	      var isResizing = _state3.isResizing;
	      var size = _state3.size;
	      var isDimHidden = _state3.isDimHidden;

	      var dimStyles = _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(getDimStyles(this.props, this.state))));
	      var dockStyles = _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(getDockStyles(this.props, this.state))));
	      var resizerStyles = _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(getResizerStyles(position))));

	      return _react2['default'].createElement(
	        'div',
	        { style: (0, _objectAssign2['default'])({}, styles.wrapper, { zIndex: zIndex }) },
	        dimMode !== 'none' && !isDimHidden && _react2['default'].createElement('div', { style: dimStyles, onClick: this.handleDimClick }),
	        _react2['default'].createElement(
	          'div',
	          { style: dockStyles },
	          _react2['default'].createElement('div', { style: resizerStyles,
	            onMouseDown: this.handleMouseDown }),
	          _react2['default'].createElement(
	            'div',
	            { style: styles.dockContent },
	            typeof children === 'function' ? children({
	              position: position,
	              isResizing: isResizing,
	              size: size,
	              isVisible: isVisible
	            }) : children
	          )
	        )
	      );
	    }
	  }], [{
	    key: 'propTypes',
	    value: {
	      position: _react.PropTypes.oneOf(['left', 'right', 'top', 'bottom']),
	      zIndex: _react.PropTypes.number,
	      fluid: _react.PropTypes.bool,
	      size: _react.PropTypes.number,
	      defaultSize: _react.PropTypes.number,
	      dimMode: _react.PropTypes.oneOf(['none', 'transparent', 'opaque']),
	      isVisible: _react.PropTypes.bool,
	      onVisibleChange: _react.PropTypes.func,
	      onSizeChange: _react.PropTypes.func,
	      dimStyle: _react.PropTypes.object,
	      dockStyle: _react.PropTypes.object,
	      duration: _react.PropTypes.number
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      position: 'left',
	      zIndex: 99999999,
	      fluid: true,
	      defaultSize: 0.3,
	      dimMode: 'opaque',
	      duration: 200
	    },
	    enumerable: true
	  }]);

	  return Dock;
	})(_react.Component);

	exports['default'] = Dock;
	module.exports = exports['default'];

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$getOwnPropertyDescriptor = __webpack_require__(364)["default"];

	exports["default"] = function get(_x, _x2, _x3) {
	  var _again = true;

	  _function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;
	    _again = false;
	    if (object === null) object = Function.prototype;

	    var desc = _Object$getOwnPropertyDescriptor(object, property);

	    if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);

	      if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;
	        _x2 = property;
	        _x3 = receiver;
	        _again = true;
	        desc = parent = undefined;
	        continue _function;
	      }
	    } else if ("value" in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;

	      if (getter === undefined) {
	        return undefined;
	      }

	      return getter.call(receiver);
	    }
	  }
	};

	exports.__esModule = true;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(365), __esModule: true };

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(366);
	__webpack_require__(367);
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $.getDesc(it, key);
	};

/***/ },
/* 366 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(368);

	__webpack_require__(372)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(369)
	  , defined = __webpack_require__(371);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(370);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 370 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 371 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(373)
	  , core    = __webpack_require__(375)
	  , fails   = __webpack_require__(378);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(374)
	  , core      = __webpack_require__(375)
	  , ctx       = __webpack_require__(376)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 374 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 375 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(377);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 377 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 378 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(380)["default"];

	var _Object$setPrototypeOf = __webpack_require__(382)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(381), __esModule: true };

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(366);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(383), __esModule: true };

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(384);
	module.exports = __webpack_require__(375).Object.setPrototypeOf;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(373);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(385).set});

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(366).getDesc
	  , isObject = __webpack_require__(386)
	  , anObject = __webpack_require__(387);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(376)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 386 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(386);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$defineProperty = __webpack_require__(389)["default"];

	exports["default"] = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;

	      _Object$defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	})();

	exports.__esModule = true;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(390), __esModule: true };

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(366);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 391 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$assign = __webpack_require__(393)["default"];

	exports["default"] = _Object$assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(394), __esModule: true };

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(395);
	module.exports = __webpack_require__(375).Object.assign;

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(373);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(396)});

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(366)
	  , toObject = __webpack_require__(397)
	  , IObject  = __webpack_require__(369);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(378)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(371);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Array$from = __webpack_require__(399)["default"];

	exports["default"] = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return _Array$from(arr);
	  }
	};

	exports.__esModule = true;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(400), __esModule: true };

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(401);
	__webpack_require__(417);
	module.exports = __webpack_require__(375).Array.from;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(402)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(404)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(403)
	  , defined   = __webpack_require__(371);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 403 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(405)
	  , $export        = __webpack_require__(373)
	  , redefine       = __webpack_require__(406)
	  , hide           = __webpack_require__(407)
	  , has            = __webpack_require__(410)
	  , Iterators      = __webpack_require__(411)
	  , $iterCreate    = __webpack_require__(412)
	  , setToStringTag = __webpack_require__(413)
	  , getProto       = __webpack_require__(366).getProto
	  , ITERATOR       = __webpack_require__(414)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 405 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(407);

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(366)
	  , createDesc = __webpack_require__(408);
	module.exports = __webpack_require__(409) ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 408 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(378)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 410 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 411 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $              = __webpack_require__(366)
	  , descriptor     = __webpack_require__(408)
	  , setToStringTag = __webpack_require__(413)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(407)(IteratorPrototype, __webpack_require__(414)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(366).setDesc
	  , has = __webpack_require__(410)
	  , TAG = __webpack_require__(414)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	var store  = __webpack_require__(415)('wks')
	  , uid    = __webpack_require__(416)
	  , Symbol = __webpack_require__(374).Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(374)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 416 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx         = __webpack_require__(376)
	  , $export     = __webpack_require__(373)
	  , toObject    = __webpack_require__(397)
	  , call        = __webpack_require__(418)
	  , isArrayIter = __webpack_require__(419)
	  , toLength    = __webpack_require__(420)
	  , getIterFn   = __webpack_require__(421);
	$export($export.S + $export.F * !__webpack_require__(423)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , $$      = arguments
	      , $$len   = $$.length
	      , mapfn   = $$len > 1 ? $$[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        result[index] = mapping ? mapfn(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(387);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(411)
	  , ITERATOR   = __webpack_require__(414)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(403)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(422)
	  , ITERATOR  = __webpack_require__(414)('iterator')
	  , Iterators = __webpack_require__(411);
	module.exports = __webpack_require__(375).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(370)
	  , TAG = __webpack_require__(414)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(414)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(425), __esModule: true };

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(426);
	module.exports = __webpack_require__(375).Object.keys;

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(397);

	__webpack_require__(372)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(428);

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeNow = getNative(Date, 'now');

	/**
	 * Gets the number of milliseconds that have elapsed since the Unix epoch
	 * (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @category Date
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => logs the number of milliseconds it took for the deferred function to be invoked
	 */
	var now = nativeNow || function() {
	  return new Date().getTime();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed invocations. Provide an options object to indicate that `func`
	 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	 * Subsequent calls to the debounced function return the result of the last
	 * `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the debounced function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=false] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	 *  delayed before it is invoked.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // avoid costly calculations while the window size is in flux
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // ensure `batchLog` is invoked once after 1 second of debounced calls
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', _.debounce(batchLog, 250, {
	 *   'maxWait': 1000
	 * }));
	 *
	 * // cancel a debounced call
	 * var todoChanges = _.debounce(batchLog, 1000);
	 * Object.observe(models.todo, todoChanges);
	 *
	 * Object.observe(models, function(changes) {
	 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	 *     todoChanges.cancel();
	 *   }
	 * }, ['delete']);
	 *
	 * // ...at some point `models.todo` is changed
	 * models.todo.completed = true;
	 *
	 * // ...before 1 second has passed `models.todo` is deleted
	 * // which cancels the debounced `todoChanges` call
	 * delete models.todo;
	 */
	function debounce(func, wait, options) {
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = wait < 0 ? 0 : (+wait || 0);
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (isObject(options)) {
	    leading = !!options.leading;
	    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function cancel() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    if (maxTimeoutId) {
	      clearTimeout(maxTimeoutId);
	    }
	    lastCalled = 0;
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	  }

	  function complete(isCalled, id) {
	    if (id) {
	      clearTimeout(id);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (isCalled) {
	      lastCalled = now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = undefined;
	      }
	    }
	  }

	  function delayed() {
	    var remaining = wait - (now() - stamp);
	    if (remaining <= 0 || remaining > wait) {
	      complete(trailingCall, maxTimeoutId);
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  }

	  function maxDelayed() {
	    complete(trailing, timeoutId);
	  }

	  function debounced() {
	    args = arguments;
	    stamp = now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);

	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0 || remaining > maxWait;

	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = undefined;
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  return debounced;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = debounce;


/***/ },
/* 428 */
/***/ function(module, exports) {

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = getNative;


/***/ },
/* 429 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	// Same as https://github.com/SimenB/react-vendor-prefixes/blob/master/src/index.js,
	// but dumber

	'use strict';

	var _extends = __webpack_require__(392)['default'];

	var _Object$keys = __webpack_require__(424)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = autoprefix;
	var vendorSpecificProperties = ['animation', 'animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction', 'appearance', 'backfaceVisibility', 'backgroundClip', 'borderImage', 'borderImageSlice', 'boxSizing', 'boxShadow', 'contentColumns', 'transform', 'transformOrigin', 'transformStyle', 'transition', 'transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction', 'perspective', 'perspectiveOrigin', 'userSelect'];

	var prefixes = ['Moz', 'Webkit', 'ms', 'O'];

	function prefixProp(key, value) {
	  return prefixes.reduce(function (obj, pre) {
	    return (obj[pre + key[0].toUpperCase() + key.substr(1)] = value, obj);
	  }, {});
	}

	function autoprefix(style) {
	  return _Object$keys(style).reduce(function (obj, key) {
	    return vendorSpecificProperties.indexOf(key) !== -1 ? _extends({}, obj, prefixProp(key, style[key])) : obj;
	  }, style);
	}

	module.exports = exports['default'];

/***/ },
/* 431 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var POSITIONS = exports.POSITIONS = ['left', 'top', 'right', 'bottom'];

/***/ },
/* 432 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.toggleVisibility = toggleVisibility;
	exports.changePosition = changePosition;
	exports.changeSize = changeSize;
	var TOGGLE_VISIBILITY = exports.TOGGLE_VISIBILITY = '@@redux-devtools-log-monitor/TOGGLE_VISIBILITY';
	function toggleVisibility() {
	  return { type: TOGGLE_VISIBILITY };
	}

	var CHANGE_POSITION = exports.CHANGE_POSITION = '@@redux-devtools-log-monitor/CHANGE_POSITION';
	function changePosition() {
	  return { type: CHANGE_POSITION };
	}

	var CHANGE_SIZE = exports.CHANGE_SIZE = '@@redux-devtools-log-monitor/CHANGE_SIZE';
	function changeSize(size) {
	  return { type: CHANGE_SIZE, size: size };
	}

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = reducer;

	var _actions = __webpack_require__(432);

	var _constants = __webpack_require__(431);

	function position(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? props.defaultPosition : arguments[1];
	  var action = arguments[2];

	  return action.type === _actions.CHANGE_POSITION ? _constants.POSITIONS[(_constants.POSITIONS.indexOf(state) + 1) % _constants.POSITIONS.length] : state;
	}

	function size(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? props.defaultSize : arguments[1];
	  var action = arguments[2];

	  return action.type === _actions.CHANGE_SIZE ? action.size : state;
	}

	function isVisible(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? props.defaultIsVisible : arguments[1];
	  var action = arguments[2];

	  return action.type === _actions.TOGGLE_VISIBILITY ? !state : state;
	}

	function childMonitorState(props, state, action) {
	  var child = props.children;
	  return child.type.update(child.props, state, action);
	}

	function reducer(props) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var action = arguments[2];

	  return {
	    position: position(props, state.position, action),
	    isVisible: isVisible(props, state.isVisible, action),
	    size: size(props, state.size, action),
	    childMonitorState: childMonitorState(props, state.childMonitorState, action)
	  };
	}

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keycodes = __webpack_require__(435);

	function assertKeyString(s) {
	  if (!/^(ctrl-|shift-|alt-|meta-){0,4}\w+$/.test(s))
	    throw new Error('The string to parse needs to be of the format "c", "ctrl-c", "shift-ctrl-c".');
	}

	module.exports = function parse(s) {
	  var keyString = s.trim().toLowerCase();

	  assertKeyString(keyString);

	  var key = {
	      name     :  undefined
	    , ctrl     :  false
	    , meta     :  false
	    , shift    :  false
	    , alt      :  false
	    , sequence :  undefined
	  }
	  , parts = keyString.split('-')
	  , c;

	  key.name = parts.pop();
	  while((c = parts.pop())) key[c] = true;
	  key.sequence = key.ctrl 
	    ? keycodes.ctrl[key.name] || key.name
	    : keycodes.nomod[key.name] || key.name;

	  // uppercase sequence for single chars when shift was pressed
	  if (key.shift && key.sequence && key.sequence.length === 1)
	    key.sequence = key.sequence.toUpperCase();

	  return key;
	};


/***/ },
/* 435 */
/***/ function(module, exports) {

	// Most of these are according to this table: http://www.ssicom.org/js/x171166.htm
	// However where nodejs readline diverges, they are adjusted to conform to it
	module.exports = {
	  nomod: {
	      escape: '\u001b'
	    , space: ' ' // actually '\u0020'
	    }
	  , ctrl: {
	        ' ': '\u0000'
	      , 'a': '\u0001'
	      , 'b': '\u0002'
	      , 'c': '\u0003'
	      , 'd': '\u0004'
	      , 'e': '\u0005'
	      , 'f': '\u0006'
	      , 'g': '\u0007'
	      , 'h': '\u0008'
	      , 'i': '\u0009'
	      , 'j': '\u000a'
	      , 'k': '\u000b'
	      , 'm': '\u000c'
	      , 'n': '\u000d'
	      , 'l': '\u000e'
	      , 'o': '\u000f'
	      , 'p': '\u0010'
	      , 'q': '\u0011'
	      , 'r': '\u0012'
	      , 's': '\u0013'
	      , 't': '\u0014'
	      , 'u': '\u0015'
	      , 'v': '\u0016'
	      , 'w': '\u0017'
	      , 'x': '\u0018'
	      , 'y': '\u0019'
	      , 'z': '\u001a'
	      , '[': '\u001b'
	      , '\\':'\u001c'
	      , ']': '\u001d'
	      , '^': '\u001e'
	      , '_': '\u001f'

	      , 'space': '\u0000'
	    }
	};


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _cytoscape = __webpack_require__(437);

	var _cytoscape2 = _interopRequireDefault(_cytoscape);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// Cytoscape.js


	// TODO: consolidate Cytoscape-dependent tags
	var CYTOSCAPE_TAG = 'cy';
	var DEF_LAYOUT = 'preset';
	var CYJS_SELECT = 'select';
	var SUPPORTED_CYJS_EVENTS = [CYJS_SELECT];

	/**
	 *
	 * Simple Network Viewer Component
	 */

	var CytoscapeRenderer = function (_React$Component) {
	  _inherits(CytoscapeRenderer, _React$Component);

	  function CytoscapeRenderer(props) {
	    _classCallCheck(this, CytoscapeRenderer);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(CytoscapeRenderer).call(this, props));
	  }

	  _createClass(CytoscapeRenderer, [{
	    key: "updateCyjs",
	    value: function updateCyjs() {

	      console.log('########## Cytoscape JS rendering called ############');

	      console.log("3===========================");
	      console.log(this.props);
	      var visualStyle = this.props.graph.graph.style;

	      this.cy = (0, _cytoscape2.default)({

	        container: document.getElementById(CYTOSCAPE_TAG),
	        elements: this.props.graph.graph.elements,
	        style: visualStyle,
	        layout: {
	          name: DEF_LAYOUT
	        }

	      });

	      this.setEventListener();
	    }
	  }, {
	    key: "setEventListener",
	    value: function setEventListener() {
	      var _this2 = this;

	      this.cy.on('data select unselect add remove', function (ev) {

	        console.log("GOT CyJS Event ::::::::::");
	        console.log(ev);

	        if (ev.originalEvent.type === CYJS_SELECT) {
	          var selected = ev.cyTarget;
	          _this2.handleSelect(selected);
	        }
	      });
	    }
	  }, {
	    key: "handleSelect",
	    value: function handleSelect(selected) {
	      console.log("* Selection Handler");
	      this.props.cyjsSelected(selected);
	    }

	    /**
	     * Once "cy" is ready, draw network calling raw Cytoscape.js API.
	     */

	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      console.log("$$$$$$$$$CyJS");

	      this.updateCyjs();
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {

	      console.log("NEXR===========================");
	      console.log(nextProps);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      console.log("rend===========================");
	      console.log(this.props);

	      return _react2.default.createElement(
	        "div",
	        { "class": "network-widget" },
	        _react2.default.createElement("div", { id: "cy", style: this.props.style })
	      );
	    }
	  }]);

	  return CytoscapeRenderer;
	}(_react2.default.Component);

	exports.default = CytoscapeRenderer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "CytoscapeRenderer.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(setImmediate, __dirname) {/*!
	Copyright (c) 2016 The Cytoscape Consortium

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the “Software”), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/

	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.cytoscape = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('./util');
	var is = _dereq_('./is');
	var Promise = _dereq_('./promise');

	var Animation = function( target, opts, opts2 ){
	  if( !(this instanceof Animation) ){
	    return new Animation( target, opts, opts2 );
	  }

	  var _p = this._private = util.extend( {
	    duration: 1000
	  }, opts, opts2 );

	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];

	  if( _p.complete && is.fn(_p.complete) ){
	    _p.completes.push( _p.complete );
	  }

	  // for future timeline/animations impl
	  this.length = 1;
	  this[0] = this;
	};

	var anifn = Animation.prototype;

	util.extend( anifn, {

	  instanceString: function(){ return 'animation'; },

	  hook: function(){
	    var _p = this._private;

	    if( !_p.hooked ){
	      // add to target's animation queue
	      var q;
	      var tAni = _p.target._private.animation;
	      if( _p.queue ){
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }
	      q.push( this );

	      // add to the animation loop pool
	      if( is.elementOrCollection( _p.target ) ){
	        _p.target.cy().addToAnimationPool( _p.target );
	      }

	      _p.hooked = true;
	    }

	    return this;
	  },

	  play: function(){
	    var _p = this._private;

	    // autorewind
	    if( _p.progress === 1 ){
	      _p.progress = 0;
	    }

	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will start the animation...

	    return this;
	  },

	  playing: function(){
	    return this._private.playing;
	  },

	  apply: function(){
	    var _p = this._private;

	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will apply the animation at this progress

	    return this;
	  },

	  applying: function(){
	    return this._private.applying;
	  },

	  pause: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;

	    return this;
	  },

	  stop: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },

	  rewind: function(){
	    return this.progress(0);
	  },

	  fastforward: function(){
	    return this.progress(1);
	  },

	  time: function( t ){
	    var _p = this._private;

	    if( t === undefined ){
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress( t / _p.duration );
	    }
	  },

	  progress: function( p ){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( p === undefined ){
	      return _p.progress;
	    } else {
	      if( wasPlaying ){
	        this.pause();
	      }

	      _p.progress = p;
	      _p.started = false;

	      if( wasPlaying ){
	        this.play();
	      }
	    }

	    return this;
	  },

	  completed: function(){
	    return this._private.progress === 1;
	  },

	  reverse: function(){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( wasPlaying ){
	      this.pause();
	    }

	    _p.progress = 1 - _p.progress;
	    _p.started = false;

	    var swap = function( a, b ){
	      var _pa = _p[a];

	      _p[a] = _p[b];
	      _p[b] = _pa;
	    };

	    swap( 'zoom', 'startZoom' );
	    swap( 'pan', 'startPan' );
	    swap( 'position', 'startPosition' );

	    // swap styles
	    for( var i = 0; i < _p.style.length; i++ ){
	      var prop = _p.style[i];
	      var name = prop.name;
	      var startStyleProp = _p.startStyle[ name ];

	      _p.startStyle[ name ] = _p.startStyle[ util.dash2camel( name ) ] = prop;
	      _p.style[i] = startStyleProp;
	    }

	    if( wasPlaying ){
	      this.play();
	    }

	    return this;
	  },

	  promise: function( type ){
	    var _p = this._private;

	    var arr;

	    switch( type ){
	      case 'frame':
	        arr = _p.frames;
	        break;
	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }

	    return new Promise(function( resolve, reject ){
	      arr.push(function(){
	        resolve();
	      });
	    });
	  }

	} );

	anifn.complete = anifn.completed;

	module.exports = Animation;

	},{"./is":77,"./promise":80,"./util":94}],2:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  aStar: function(options) {
	    var eles = this;

	    options = options || {};

	    // Reconstructs the path from Start to End, acumulating the result in pathAcum
	    var reconstructPath = function(start, end, cameFromMap, pathAcum) {
	      // Base case
	      if (start == end) {
	        pathAcum.push( cy.getElementById(end) );
	        return pathAcum;
	      }

	      if (end in cameFromMap) {
	        // We know which node is before the last one
	        var previous = cameFromMap[end];
	        var previousEdge = cameFromEdge[end];

	        pathAcum.push( cy.getElementById(end) );
	        pathAcum.push( cy.getElementById(previousEdge) );


	        return reconstructPath(start,
	                     previous,
	                     cameFromMap,
	                     pathAcum);
	      }

	      // We should not reach here!
	      return undefined;
	    };

	    // Returns the index of the element in openSet which has minimum fScore
	    var findMin = function(openSet, fScore) {
	      if (openSet.length === 0) {
	        // Should never be the case
	        return undefined;
	      }
	      var minPos = 0;
	      var tempScore = fScore[openSet[0]];
	      for (var i = 1; i < openSet.length; i++) {
	        var s = fScore[openSet[i]];
	        if (s < tempScore) {
	          tempScore = s;
	          minPos = i;
	        }
	      }
	      return minPos;
	    };

	    var cy = this._private.cy;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var source = is.string(options.root) ?
	        // use it as a selector, e.g. "#rootID
	        this.filter(options.root)[0] :
	        options.root[0];
	    } else {
	      return undefined;
	    }

	    // goal - mandatory!
	    if (options.goal != null) {
	      var target = is.string(options.goal) ?
	        // use it as a selector, e.g. "#goalID
	        this.filter(options.goal)[0] :
	        options.goal[0];
	    } else {
	      return undefined;
	    }

	    // Heuristic function - optional
	    if (options.heuristic != null && is.fn(options.heuristic)) {
	      var heuristic = options.heuristic;
	    } else {
	      var heuristic = function(){ return 0; }; // use constant if unspecified
	    }

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var closedSet = [];
	    var openSet = [source.id()];
	    var cameFrom = {};
	    var cameFromEdge = {};
	    var gScore = {};
	    var fScore = {};

	    gScore[source.id()] = 0;
	    fScore[source.id()] = heuristic(source);

	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();

	    // Counter
	    var steps = 0;

	    // Main loop
	    while (openSet.length > 0) {
	      var minPos = findMin(openSet, fScore);
	      var cMin = cy.getElementById( openSet[minPos] );
	      steps++;

	      // If we've found our goal, then we are done
	      if (cMin.id() == target.id()) {
	        var rPath = reconstructPath(source.id(), target.id(), cameFrom, []);
	        rPath.reverse();
	        return {
	          found : true,
	          distance : gScore[cMin.id()],
	          path : eles.spawn(rPath),
	          steps : steps
	        };
	      }

	      // Add cMin to processed nodes
	      closedSet.push(cMin.id());
	      // Remove cMin from boundary nodes
	      openSet.splice(minPos, 1);

	      // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not
	      var vwEdges = cMin.connectedEdges();
	      if( directed ){ vwEdges = vwEdges.stdFilter(function(ele){ return ele.data('source') === cMin.id(); }); }
	      vwEdges = vwEdges.intersect(edges);

	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i];
	        var w = e.connectedNodes().stdFilter(function(n){ return n.id() !== cMin.id(); }).intersect(nodes);

	        // if node is in closedSet, ignore it
	        if (closedSet.indexOf(w.id()) != -1) {
	          continue;
	        }

	        // New tentative score for node w
	        var tempScore = gScore[cMin.id()] + weightFn.apply(e, [e]);

	        // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value

	        // w not in openSet
	        if (openSet.indexOf(w.id()) == -1) {
	          gScore[w.id()] = tempScore;
	          fScore[w.id()] = tempScore + heuristic(w);
	          openSet.push(w.id()); // Add node to openSet
	          cameFrom[w.id()] = cMin.id();
	          cameFromEdge[w.id()] = e.id();
	          continue;
	        }
	        // w already in openSet, but with greater gScore
	        if (tempScore < gScore[w.id()]) {
	          gScore[w.id()] = tempScore;
	          fScore[w.id()] = tempScore + heuristic(w);
	          cameFrom[w.id()] = cMin.id();
	        }

	      } // End of neighbors update

	    } // End of main loop

	    // If we've reached here, then we've not reached our goal
	    return {
	      found : false,
	      distance : undefined,
	      path : undefined,
	      steps : steps
	    };
	  }

	}); // elesfn


	module.exports = elesfn;

	},{"../../is":77}],3:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var util = _dereq_('../../util');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function(options) {
	    var eles = this;

	    options = options || {};

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var source = this.filter(options.root)[0];
	      } else {
	        var source = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initializations
	    var cost = [];
	    var predecessor = [];
	    var predEdge = [];

	    for (var i = 0; i < numNodes; i++) {
	      if (nodes[i].id() === source.id()) {
	        cost[i] = 0;
	      } else {
	        cost[i] = Infinity;
	      }
	      predecessor[i] = undefined;
	    }

	    // Edges relaxation
	    var flag = false;
	    for (var i = 1; i < numNodes; i++) {
	      flag = false;
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn.apply(edges[e], [edges[e]]);

	        var temp = cost[sourceIndex] + weight;
	        if (temp < cost[targetIndex]) {
	          cost[targetIndex] = temp;
	          predecessor[targetIndex] = sourceIndex;
	          predEdge[targetIndex] = edges[e];
	          flag = true;
	        }

	        // If undirected graph, we need to take into account the 'reverse' edge
	        if (!directed) {
	          var temp = cost[targetIndex] + weight;
	          if (temp < cost[sourceIndex]) {
	            cost[sourceIndex] = temp;
	            predecessor[sourceIndex] = targetIndex;
	            predEdge[sourceIndex] = edges[e];
	            flag = true;
	          }
	        }
	      }

	      if (!flag) {
	        break;
	      }
	    }

	    if (flag) {
	      // Check for negative weight cycles
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn.apply(edges[e], [edges[e]]);

	        if (cost[sourceIndex] + weight < cost[targetIndex]) {
	          util.error("Graph contains a negative weight cycle for Bellman-Ford");
	          return { pathTo: undefined,
	               distanceTo: undefined,
	               hasNegativeWeightCycle: true};
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }


	    var res = {
	      distanceTo : function(to) {
	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return cost[id2position[toId]];
	      },

	      pathTo : function(to) {

	        var reconstructPathAux = function(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {
	          for(;;){
	            // Add toId to path
	            acumPath.push( cy.getElementById(position2id[toPos]) );
	            acumPath.push( predEdge[toPos] );

	            if (fromPos === toPos) {
	              // reached starting node
	              return acumPath;
	            }

	            // If no path exists, discart acumulated path and return undefined
	            var predPos = predecessor[toPos];
	            if (typeof predPos === "undefined") {
	              return undefined;
	            }

	            toPos = predPos;
	          }

	        };

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }
	        var path = [];

	        // This returns a reversed path
	        var res =  reconstructPathAux(predecessor,
	                      id2position[source.id()],
	                      id2position[toId],
	                      position2id,
	                      path,
	                      predEdge);

	        // Get it in the correct order and return it
	        if (res != null) {
	          res.reverse();
	        }

	        return eles.spawn(res);
	      },

	      hasNegativeWeightCycle: false
	    };

	    return res;

	  } // bellmanFord

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77,"../../util":94}],4:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function (options) {
	    options = options || {};

	    // Weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	      var weighted = true;
	    } else {
	      var weighted = false;
	    }

	    // Directed - default false
	    if (options.directed != null && is.bool(options.directed)) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var priorityInsert = function (queue, ele) {
	      queue.unshift(ele);
	      for (var i = 0; d[queue[i]] < d[queue[i + 1]] && i < queue.length - 1; i++) {
	        var tmp = queue[i];
	        queue[i] = queue[i + 1];
	        queue[i + 1] = tmp;
	      }
	    };

	    var cy = this._private.cy;

	    // starting
	    var V = this.nodes();
	    var A = {};
	    var C = {};

	    // A contains the neighborhoods of every node
	    for (var i = 0; i < V.length; i++) {
	      if (directed) {
	        A[V[i].id()] = V[i].outgoers("node"); // get outgoers of every node
	      } else {
	        A[V[i].id()] = V[i].openNeighborhood("node"); // get neighbors of every node
	      }
	    }

	    // C contains the betweenness values
	    for (var i = 0; i < V.length; i++) {
	      C[V[i].id()] = 0;
	    }

	    for (var s = 0; s < V.length; s++) {
	      var S = []; // stack
	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = []; // queue

	      // init dictionaries
	      for (var i = 0; i < V.length; i++) {
	        P[V[i].id()] = [];
	        g[V[i].id()] = 0;
	        d[V[i].id()] = Number.POSITIVE_INFINITY;
	      }

	      g[V[s].id()] = 1; // sigma
	      d[V[s].id()] = 0; // distance to s

	      Q.unshift(V[s].id());

	      while (Q.length > 0) {
	        var v = Q.pop();
	        S.push(v);
	        if (weighted) {
	          A[v].forEach(function (w) {
	            if (cy.$('#' + v).edgesTo(w).length > 0) {
	              var edge = cy.$('#' + v).edgesTo(w)[0];
	            } else {
	              var edge = w.edgesTo('#' + v)[0];
	            }

	            var edgeWeight = weightFn.apply(edge, [edge]);

	            if (d[w.id()] > d[v] + edgeWeight) {
	              d[w.id()] = d[v] + edgeWeight;
	              if (Q.indexOf(w.id()) < 0) { //if w is not in Q
	                priorityInsert(Q, w.id());
	              } else { // update position if w is in Q
	                Q.splice(Q.indexOf(w.id()), 1);
	                priorityInsert(Q, w.id());
	              }
	              g[w.id()] = 0;
	              P[w.id()] = [];
	            }
	            if (d[w.id()] == d[v] + edgeWeight) {
	              g[w.id()] = g[w.id()] + g[v];
	              P[w.id()].push(v);
	            }
	          });
	        } else {
	          A[v].forEach(function (w) {
	            if (d[w.id()] == Number.POSITIVE_INFINITY) {
	              Q.unshift(w.id());
	              d[w.id()] = d[v] + 1;
	            }
	            if (d[w.id()] == d[v] + 1) {
	              g[w.id()] = g[w.id()] + g[v];
	              P[w.id()].push(v);
	            }
	          });
	        }
	      }

	      var e = {};
	      for (var i = 0; i < V.length; i++) {
	        e[V[i].id()] = 0;
	      }

	      while (S.length > 0) {
	        var w = S.pop();
	        P[w].forEach(function (v) {
	          e[v] = e[v] + (g[v] / g[w]) * (1 + e[w]);
	          if (w != V[s].id())
	            C[w] = C[w] + e[w];
	        });
	      }
	    }

	    var max = 0;
	    for (var key in C) {
	      if (max < C[key])
	        max = C[key];
	    }

	    var ret = {
	      betweenness: function (node) {
	        if (is.string(node)) {
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          var node = node.id();
	        }

	        return C[node];
	      },

	      betweennessNormalized: function (node) {
	        if (is.string(node)) {
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          var node = node.id();
	        }

	        return C[node] / max;
	      }
	    };

	    // alias
	    ret.betweennessNormalised = ret.betweennessNormalized;

	    return ret;
	  } // betweennessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.bc = elesfn.betweennessCentrality;

	module.exports = elesfn;

	},{"../../is":77}],5:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var Heap = _dereq_('../../heap');

	var defineSearch = function( params ){
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  };

	  // from pseudocode on wikipedia
	  return function searchFn( roots, fn, directed ){
	    var options;
	    var std;
	    var thisArg;
	    if( is.plainObject(roots) && !is.elementOrCollection(roots) ){
	      options = roots;
	      roots = options.roots || options.root;
	      fn = options.visit;
	      directed = options.directed;
	      std = options.std;
	      thisArg = options.thisArg;
	    }

	    directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;
	    fn = is.fn(fn) ? fn : function(){};

	    var cy = this._private.cy;
	    var v = roots = is.string(roots) ? this.filter(roots) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;
	    var nodes = this.nodes();
	    var edges = this.edges();

	    // enqueue v
	    for( var i = 0; i < v.length; i++ ){
	      if( v[i].isNode() ){
	        Q.unshift( v[i] );

	        if( params.bfs ){
	          V[ v[i].id() ] = true;

	          connectedNodes.push( v[i] );
	        }

	        id2depth[ v[i].id() ] = 0;
	      }
	    }

	    while( Q.length !== 0 ){
	      var v = params.bfs ? Q.shift() : Q.pop();

	      if( params.dfs ){
	        if( V[ v.id() ] ){ continue; }

	        V[ v.id() ] = true;

	        connectedNodes.push( v );
	      }

	      var depth = id2depth[ v.id() ];
	      var prevEdge = connectedBy[ v.id() ];
	      var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not( v )[0];
	      var ret;

	      if( std ){
	        ret = fn.call(thisArg, v, prevEdge, prevNode, j++, depth);
	      } else {
	        ret = fn.call(v, j++, depth, v, prevEdge, prevNode);
	      }

	      if( ret === true ){
	        found = v;
	        break;
	      }

	      if( ret === false ){
	        break;
	      }

	      var vwEdges = v.connectedEdges(directed ? function(){ return this.data('source') === v.id(); } : undefined).intersect( edges );
	      for( var i = 0; i < vwEdges.length; i++ ){
	        var e = vwEdges[i];
	        var w = e.connectedNodes(function(){ return this.id() !== v.id(); }).intersect( nodes );

	        if( w.length !== 0 && !V[ w.id() ] ){
	          w = w[0];

	          Q.push( w );

	          if( params.bfs ){
	            V[ w.id() ] = true;

	            connectedNodes.push( w );
	          }

	          connectedBy[ w.id() ] = e;

	          id2depth[ w.id() ] = id2depth[ v.id() ] + 1;
	        }
	      }

	    }

	    var connectedEles = [];

	    for( var i = 0; i < connectedNodes.length; i++ ){
	      var node = connectedNodes[i];
	      var edge = connectedBy[ node.id() ];

	      if( edge ){
	        connectedEles.push( edge );
	      }

	      connectedEles.push( node );
	    }

	    return {
	      path: cy.collection( connectedEles, { unique: true } ),
	      found: cy.collection( found )
	    };
	  };
	};

	// search, spanning trees, etc
	var elesfn = ({

	  breadthFirstSearch: defineSearch({ bfs: true }),
	  depthFirstSearch: defineSearch({ dfs: true }),

	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function( weightFn ){
	    var cy = this.cy();

	    weightFn = is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    function findSet(ele){
	      for( var i = 0; i < forest.length; i++ ){
	        var eles = forest[i];

	        if( eles.anySame(ele) ){
	          return {
	            eles: eles,
	            index: i
	          };
	        }
	      }
	    }

	    var A = cy.collection(cy, []);
	    var forest = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      forest.push( nodes[i].collection() );
	    }

	    var edges = this.edges();
	    var S = edges.toArray().sort(function(a, b){
	      var weightA = weightFn.call(a, a);
	      var weightB = weightFn.call(b, b);

	      return weightA - weightB;
	    });

	    for(var i = 0; i < S.length; i++){
	      var edge = S[i];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setU = findSet(u);
	      var setV = findSet(v);

	      if( setU.index !== setV.index ){
	        A = A.add( edge );

	        // combine forests for u and v
	        forest[ setU.index ] = setU.eles.add( setV.eles );
	        forest.splice( setV.index, 1 );
	      }
	    }

	    return nodes.add( A );

	  },

	  dijkstra: function( root, weightFn, directed ){
	    var options;
	    if( is.plainObject(root) && !is.elementOrCollection(root) ){
	      options = root;
	      root = options.root;
	      weightFn = options.weight;
	      directed = options.directed;
	    }

	    var cy = this._private.cy;
	    weightFn = is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    var source = is.string(root) ? this.filter(root)[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};

	    var edges = this.edges().filter(function(){ return !this.isLoop(); });
	    var nodes = this.nodes();

	    var getDist = function(node){
	      return dist[ node.id() ];
	    };

	    var setDist = function(node, d){
	      dist[ node.id() ] = d;

	      Q.updateItem( node );
	    };

	    var Q = new Heap(function( a, b ){
	      return getDist(a) - getDist(b);
	    });

	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[i];

	      dist[ node.id() ] = node.same( source ) ? 0 : Infinity;
	      Q.push( node );
	    }

	    var distBetween = function(u, v){
	      var uvs = ( directed ? u.edgesTo(v) : u.edgesWith(v) ).intersect(edges);
	      var smallestDistance = Infinity;
	      var smallestEdge;

	      for( var i = 0; i < uvs.length; i++ ){
	        var edge = uvs[i];
	        var weight = weightFn.apply( edge, [edge] );

	        if( weight < smallestDistance || !smallestEdge ){
	          smallestDistance = weight;
	          smallestEdge = edge;
	        }
	      }

	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };

	    while( Q.size() > 0 ){
	      var u = Q.pop();
	      var smalletsDist = getDist(u);
	      var uid = u.id();

	      knownDist[uid] = smalletsDist;

	      if( smalletsDist === Math.Infinite ){
	        break;
	      }

	      var neighbors = u.neighborhood().intersect(nodes);
	      for( var i = 0; i < neighbors.length; i++ ){
	        var v = neighbors[i];
	        var vid = v.id();
	        var vDist = distBetween(u, v);

	        var alt = smalletsDist + vDist.dist;

	        if( alt < getDist(v) ){
	          setDist(v, alt);

	          prev[ vid ] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for
	    } // while

	    return {
	      distanceTo: function(node){
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];

	        return knownDist[ target.id() ];
	      },

	      pathTo: function(node){
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];
	        var S = [];
	        var u = target;

	        if( target.length > 0 ){
	          S.unshift( target );

	          while( prev[ u.id() ] ){
	            var p = prev[ u.id() ];

	            S.unshift( p.edge );
	            S.unshift( p.node );

	            u = p.node;
	          }
	        }

	        return cy.collection( S );
	      }
	    };
	  }
	});

	// nice, short mathemathical alias
	elesfn.bfs = elesfn.breadthFirstSearch;
	elesfn.dfs = elesfn.depthFirstSearch;

	module.exports = elesfn;

	},{"../../heap":75,"../../is":77}],6:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  closenessCentralityNormalized: function (options) {
	    options = options || {};

	    var cy = this.cy();

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall({ weight: options.weight, directed: options.directed });

	    // Compute closeness for every node and find the maximum closeness
	    for(var i = 0; i < nodes.length; i++){
	      var currCloseness = 0;
	      for (var j = 0; j < nodes.length; j++) {
	        if (i != j) {
	          var d = fw.distance(nodes[i], nodes[j]);

	          if( harmonic ){
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }

	      if( !harmonic ){
	        currCloseness = 1 / currCloseness;
	      }

	      if (maxCloseness < currCloseness){
	        maxCloseness = currCloseness;
	      }

	      closenesses[nodes[i].id()] = currCloseness;
	    }

	    return {
	      closeness: function (node) {
	        if (is.string(node)) {
	          // from is a selector string
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          // from is a node
	          var node = node.id();
	        }

	        return closenesses[node] / maxCloseness;
	      }
	    };
	  },

	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function (options) {
	    options = options || {};

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var root = this.filter(options.root)[0];
	      } else {
	        var root = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weight = options.weight;
	    } else {
	      var weight = function(){return 1;};
	    }

	    // directed - optional
	    if (options.directed != null && is.bool(options.directed)) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    // we need distance from this node to every other node
	    var dijkstra = this.dijkstra({
	      root: root,
	      weight: weight,
	      directed: directed
	    });
	    var totalDistance = 0;

	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++){
	      if (nodes[i].id() != root.id()){
	        var d = dijkstra.distanceTo(nodes[i]);

	        if( harmonic ){
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }

	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.cc = elesfn.closenessCentrality;
	elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

	module.exports = elesfn;

	},{"../../is":77}],7:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var util = _dereq_('../../util');

	var elesfn = ({

	  degreeCentralityNormalized: function (options) {
	    options = options || {};

	    var cy = this.cy();

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    if (!directed) {
	      var degrees = {};
	      var maxDegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, {root: node}));
	        if (maxDegree < currDegree.degree)
	          maxDegree = currDegree.degree;

	        degrees[node.id()] = currDegree.degree;
	      }

	      return {
	        degree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return degrees[node] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, {root: node}));

	        if (maxIndegree < currDegree.indegree)
	          maxIndegree = currDegree.indegree;

	        if (maxOutdegree < currDegree.outdegree)
	          maxOutdegree = currDegree.outdegree;

	        indegrees[node.id()] = currDegree.indegree;
	        outdegrees[node.id()] = currDegree.outdegree;
	      }

	      return {
	        indegree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return indegrees[node] / maxIndegree;
	        },
	        outdegree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return outdegrees[node] / maxOutdegree;
	        }

	      };
	    }

	  }, // degreeCentralityNormalized

	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function (options) {
	    options = options || {};

	    var callingEles = this;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var root = is.string(options.root) ? this.filter(options.root)[0] : options.root[0];
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function (e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // alpha - optional
	    if (options.alpha != null && is.number(options.alpha)) {
	      var alpha = options.alpha;
	    } else {
	      alpha = 0;
	    }


	    if (!directed) {
	      var connEdges = root.connectedEdges().intersection( callingEles );
	      var k = connEdges.length;
	      var s = 0;

	      // Now, sum edge weights
	      for (var i = 0; i < connEdges.length; i++) {
	        var edge = connEdges[i];
	        s += weightFn.apply(edge, [edge]);
	      }

	      return {
	        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
	      };
	    } else {
	      var incoming = root.connectedEdges('edge[target = "' + root.id() + '"]').intersection( callingEles );
	      var outgoing = root.connectedEdges('edge[source = "' + root.id() + '"]').intersection( callingEles );
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0;

	      // Now, sum incoming edge weights
	      for (var i = 0; i < incoming.length; i++) {
	        var edge = incoming[i];
	        s_in += weightFn.apply(edge, [edge]);
	      }

	      // Now, sum outgoing edge weights
	      for (var i = 0; i < outgoing.length; i++) {
	        var edge = outgoing[i];
	        s_out += weightFn.apply(edge, [edge]);
	      }

	      return {
	        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
	        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
	      };
	    }
	  } // degreeCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.dc = elesfn.degreeCentrality;
	elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

	module.exports = elesfn;

	},{"../../is":77,"../../util":94}],8:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function(options) {
	    options = options || {};

	    var cy = this.cy();

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initialize distance matrix
	    var dist = [];
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = new Array(numNodes);
	      for (var j = 0; j < numNodes; j++) {
	        if (i == j) {
	          newRow[j] = 0;
	        } else {
	          newRow[j] = Infinity;
	        }
	      }
	      dist.push(newRow);
	    }

	    // Initialize matrix used for path reconstruction
	    // Initialize distance matrix
	    var next = [];
	    var edgeNext = [];

	    var initMatrix = function(next){
	      for (var i = 0; i < numNodes; i++) {
	        var newRow = new Array(numNodes);
	        for (var j = 0; j < numNodes; j++) {
	          newRow[j] = undefined;
	        }
	        next.push(newRow);
	      }
	    };

	    initMatrix(next);
	    initMatrix(edgeNext);

	    // Process edges
	    for (var i = 0; i < edges.length ; i++) {
	      var sourceIndex = id2position[edges[i].source().id()];
	      var targetIndex = id2position[edges[i].target().id()];
	      var weight = weightFn.apply(edges[i], [edges[i]]);

	      // Check if already process another edge between same 2 nodes
	      if (dist[sourceIndex][targetIndex] > weight) {
	        dist[sourceIndex][targetIndex] = weight;
	        next[sourceIndex][targetIndex] = targetIndex;
	        edgeNext[sourceIndex][targetIndex] = edges[i];
	      }
	    }

	    // If undirected graph, process 'reversed' edges
	    if (!directed) {
	      for (var i = 0; i < edges.length ; i++) {
	        var sourceIndex = id2position[edges[i].target().id()];
	        var targetIndex = id2position[edges[i].source().id()];
	        var weight = weightFn.apply(edges[i], [edges[i]]);

	        // Check if already process another edge between same 2 nodes
	        if (dist[sourceIndex][targetIndex] > weight) {
	          dist[sourceIndex][targetIndex] = weight;
	          next[sourceIndex][targetIndex] = targetIndex;
	          edgeNext[sourceIndex][targetIndex] = edges[i];
	        }
	      }
	    }

	    // Main loop
	    for (var k = 0; k < numNodes; k++) {
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          if (dist[i][k] + dist[k][j] < dist[i][j]) {
	            dist[i][j] = dist[i][k] + dist[k][j];
	            next[i][j] = next[i][k];
	          }
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }

	    var res = {
	      distance: function(from, to) {
	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = (cy.filter(from)[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return dist[id2position[fromId]][id2position[toId]];
	      },

	      path: function(from, to) {
	        var reconstructPathAux = function(from, to, next, position2id, edgeNext) {
	          if (from === to) {
	            return cy.getElementById( position2id[from] );
	          }
	          if (next[from][to] === undefined) {
	            return undefined;
	          }

	          var path = [ cy.getElementById(position2id[from]) ];
	          var prev = from;
	          while (from !== to) {
	            prev = from;
	            from = next[from][to];

	            var edge = edgeNext[prev][from];
	            path.push( edge );

	            path.push( cy.getElementById(position2id[from]) );
	          }
	          return path;
	        };

	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = (cy.filter(from)[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        var pathArr = reconstructPathAux(id2position[fromId],
	                      id2position[toId],
	                      next,
	                      position2id,
	                      edgeNext);

	        return cy.collection( pathArr );
	      }
	    };

	    return res;

	  } // floydWarshall

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77}],9:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	var elesfn = {};

	[
	  _dereq_('./bfs-dfs'),
	  _dereq_('./a-star'),
	  _dereq_('./floyd-warshall'),
	  _dereq_('./bellman-ford'),
	  _dereq_('./kerger-stein'),
	  _dereq_('./page-rank'),
	  _dereq_('./degree-centrality'),
	  _dereq_('./closeness-centrality'),
	  _dereq_('./betweenness-centrality')
	].forEach(function( props ){
	  util.extend( elesfn, props );
	});

	module.exports = elesfn;

	},{"../../util":94,"./a-star":2,"./bellman-ford":3,"./betweenness-centrality":4,"./bfs-dfs":5,"./closeness-centrality":6,"./degree-centrality":7,"./floyd-warshall":8,"./kerger-stein":10,"./page-rank":11}],10:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	var elesfn = ({

	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function(options) {
	    var eles = this;

	    options = options || {};

	    // Function which colapses 2 (meta) nodes into one
	    // Updates the remaining edge lists
	    // Receives as a paramater the edge which causes the collapse
	    var colapse = function(edgeIndex, nodeMap, remainingEdges) {
	      var edgeInfo = remainingEdges[edgeIndex];
	      var sourceIn = edgeInfo[1];
	      var targetIn = edgeInfo[2];
	      var partition1 = nodeMap[sourceIn];
	      var partition2 = nodeMap[targetIn];

	      // Delete all edges between partition1 and partition2
	      var newEdges = remainingEdges.filter(function(edge) {
	        if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {
	          return false;
	        }
	        if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {
	          return false;
	        }
	        return true;
	      });

	      // All edges pointing to partition2 should now point to partition1
	      for (var i = 0; i < newEdges.length; i++) {
	        var edge = newEdges[i];
	        if (edge[1] === partition2) { // Check source
	          newEdges[i] = edge.slice(0);
	          newEdges[i][1] = partition1;
	        } else if (edge[2] === partition2) { // Check target
	          newEdges[i] = edge.slice(0);
	          newEdges[i][2] = partition1;
	        }
	      }

	      // Move all nodes from partition2 to partition1
	      for (var i = 0; i < nodeMap.length; i++) {
	        if (nodeMap[i] === partition2) {
	          nodeMap[i] = partition1;
	        }
	      }

	      return newEdges;
	    };


	    // Contracts a graph until we reach a certain number of meta nodes
	    var contractUntil = function(metaNodeMap,
	                   remainingEdges,
	                   size,
	                   sizeLimit) {
	      // Stop condition
	      if (size <= sizeLimit) {
	        return remainingEdges;
	      }

	      // Choose an edge randomly
	      var edgeIndex = Math.floor((Math.random() * remainingEdges.length));

	      // Colapse graph based on edge
	      var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);

	      return contractUntil(metaNodeMap,
	                 newEdges,
	                 size - 1,
	                 sizeLimit);
	    };

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
	    var stopSize = Math.floor(numNodes / Math.sqrt(2));

	    if (numNodes < 2) {
	      util.error("At least 2 nodes are required for Karger-Stein algorithm");
	      return undefined;
	    }

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)
	    var edgeIndexes = [];
	    for (var i = 0; i < numEdges; i++) {
	      var e = edges[i];
	      edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);
	    }

	    // We will store the best cut found here
	    var minCutSize = Infinity;
	    var minCut;

	    // Initial meta node partition
	    var originalMetaNode = [];
	    for (var i = 0; i < numNodes; i++) {
	      originalMetaNode.push(i);
	    }

	    // Main loop
	    for (var iter = 0; iter <= numIter; iter++) {
	      // Create new meta node partition
	      var metaNodeMap = originalMetaNode.slice(0);

	      // Contract until stop point (stopSize nodes)
	      var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize);

	      // Create a copy of the colapsed nodes state
	      var metaNodeMap2 = metaNodeMap.slice(0);

	      // Run 2 iterations starting in the stop state
	      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
	      var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2);

	      // Is any of the 2 results the best cut so far?
	      if (res1.length <= res2.length && res1.length < minCutSize) {
	        minCutSize = res1.length;
	        minCut = [res1, metaNodeMap];
	      } else if (res2.length <= res1.length && res2.length < minCutSize) {
	        minCutSize = res2.length;
	        minCut = [res2, metaNodeMap2];
	      }
	    } // end of main loop


	    // Construct result
	    var resEdges = (minCut[0]).map(function(e){ return edges[e[0]]; });
	    var partition1 = [];
	    var partition2 = [];

	    // traverse metaNodeMap for best cut
	    var witnessNodePartition = minCut[1][0];
	    for (var i = 0; i < minCut[1].length; i++) {
	      var partitionId = minCut[1][i];
	      if (partitionId === witnessNodePartition) {
	        partition1.push(nodes[i]);
	      } else {
	        partition2.push(nodes[i]);
	      }
	    }

	    var ret = {
	      cut: eles.spawn(cy, resEdges),
	      partition1: eles.spawn(partition1),
	      partition2: eles.spawn(partition2)
	    };

	    return ret;
	  }
	}); // elesfn


	module.exports = elesfn;

	},{"../../util":94}],11:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  pageRank: function(options) {
	    options = options || {};

	    var normalizeVector = function(vector) {
	      var length = vector.length;

	      // First, get sum of all elements
	      var total = 0;
	      for (var i = 0; i < length; i++) {
	        total += vector[i];
	      }

	      // Now, divide each by the sum of all elements
	      for (var i = 0; i < length; i++) {
	        vector[i] = vector[i] / total;
	      }
	    };

	    // dampingFactor - optional
	    if (options != null &&
	      options.dampingFactor != null) {
	      var dampingFactor = options.dampingFactor;
	    } else {
	      var dampingFactor = 0.8; // Default damping factor
	    }

	    // desired precision - optional
	    if (options != null &&
	      options.precision != null) {
	      var epsilon = options.precision;
	    } else {
	      var epsilon = 0.000001; // Default precision
	    }

	    // Max number of iterations - optional
	    if (options != null &&
	      options.iterations != null) {
	      var numIter = options.iterations;
	    } else {
	      var numIter = 200; // Default number of iterations
	    }

	    // Weight function - optional
	    if (options != null &&
	      options.weight != null &&
	      is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column
	    var matrix = [];
	    var columnSum = [];
	    var additionalProb = (1 - dampingFactor) / numNodes;

	    // Create null matric
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = [];
	      for (var j = 0; j < numNodes; j++) {
	        newRow.push(0.0);
	      }
	      matrix.push(newRow);
	      columnSum.push(0.0);
	    }

	    // Now, process edges
	    for (var i = 0; i < numEdges; i++) {
	      var edge = edges[i];
	      var s = id2position[edge.source().id()];
	      var t = id2position[edge.target().id()];
	      var w = weightFn.apply(edge, [edge]);

	      // Update matrix
	      matrix[t][s] += w;

	      // Update column sum
	      columnSum[s] += w;
	    }

	    // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0
	    var p = 1.0 / numNodes + additionalProb; // Shorthand
	    // Traverse matrix, column by column
	    for (var j = 0; j < numNodes; j++) {
	      if (columnSum[j] === 0) {
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;
	        }
	      }
	    }

	    // Compute dominant eigenvector using power method
	    var eigenvector = [];
	    var nullVector = [];
	    var previous;

	    // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand
	    for (var i = 0; i < numNodes; i++) {
	      eigenvector.push(1.0);
	      nullVector.push(0.0);
	    }

	    for (var iter = 0; iter < numIter; iter++) {
	      // New array with all 0's
	      var temp = nullVector.slice(0);

	      // Multiply matrix with previous result
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          temp[i] += matrix[i][j] * eigenvector[j];
	        }
	      }

	      normalizeVector(temp);
	      previous = eigenvector;
	      eigenvector = temp;

	      var diff = 0;
	      // Compute difference (squared module) of both vectors
	      for (var i = 0; i < numNodes; i++) {
	        diff += Math.pow(previous[i] - eigenvector[i], 2);
	      }

	      // If difference is less than the desired threshold, stop iterating
	      if (diff < epsilon) {
	        break;
	      }
	    }

	    // Construct result
	    var res = {
	      rank : function(node) {
	        if (is.string(node)) {
	          // is a selector string
	          var nodeId = (cy.filter(node)[0]).id();
	        } else {
	          // is a node object
	          var nodeId = node.id();
	        }
	        return eigenvector[id2position[nodeId]];
	      }
	    };


	    return res;
	  } // pageRank

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77}],12:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var elesfn = ({
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop()
	});

	module.exports = elesfn;

	},{"../define":41}],13:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var elesfn = ({
	  classes: function( classes ){
	    classes = classes.match(/\S+/g) || [];
	    var self = this;
	    var changed = [];
	    var classesMap = {};

	    // fill in classes map
	    for( var i = 0; i < classes.length; i++ ){
	      var cls = classes[i];

	      classesMap[ cls ] = true;
	    }

	    // check and update each ele
	    for( var j = 0; j < self.length; j++ ){
	      var ele = self[j];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false;

	      // check if ele has all of the passed classes
	      for( var i = 0; i < classes.length; i++ ){
	        var cls = classes[i];
	        var eleHasClass = eleClasses[ cls ];

	        if( !eleHasClass ){
	          changedEle = true;
	          break;
	        }
	      }

	      // check if ele has classes outside of those passed
	      if( !changedEle ){ for( var eleCls in eleClasses ){
	        var eleHasClass = eleClasses[ eleCls ];
	        var specdClass = classesMap[ eleCls ]; // i.e. this class is passed to the function

	        if( eleHasClass && !specdClass ){
	          changedEle = true;
	          break;
	        }
	      } }

	      if( changedEle ){
	        _p.classes = util.copy( classesMap );

	        changed.push( ele );
	      }
	    }

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn(changed)
	        .updateStyle()
	        .trigger('class')
	      ;
	    }

	    return self;
	  },

	  addClass: function( classes ){
	    return this.toggleClass( classes, true );
	  },

	  hasClass: function( className ){
	    var ele = this[0];
	    return ( ele != null && ele._private.classes[className] ) ? true : false;
	  },

	  toggleClass: function( classesStr, toggle ){
	    var classes = classesStr.match(/\S+/g) || [];
	    var self = this;
	    var changed = []; // eles who had classes changed

	    for( var i = 0, il = self.length; i < il; i++ ){
	      var ele = self[i];
	      var changedEle = false;

	      for( var j = 0; j < classes.length; j++ ){
	        var cls = classes[j];
	        var eleClasses = ele._private.classes;
	        var hasClass = eleClasses[cls];
	        var shouldAdd = toggle || (toggle === undefined && !hasClass);

	        if( shouldAdd ){
	          eleClasses[cls] = true;

	          if( !hasClass && !changedEle ){
	            changed.push(ele);
	            changedEle = true;
	          }
	        } else { // then remove
	          eleClasses[cls] = false;

	          if( hasClass && !changedEle ){
	            changed.push(ele);
	            changedEle = true;
	          }
	        }

	      } // for j classes
	    } // for i eles

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn(changed)
	        .updateStyle()
	        .trigger('class')
	      ;
	    }

	    return self;
	  },

	  removeClass: function( classes ){
	    return this.toggleClass( classes, false );
	  },

	  flashClass: function( classes, duration ){
	    var self = this;

	    if( duration == null ){
	      duration = 250;
	    } else if( duration === 0 ){
	      return self; // nothing to do really
	    }

	    self.addClass( classes );
	    setTimeout(function(){
	      self.removeClass( classes );
	    }, duration);

	    return self;
	  }
	});

	module.exports = elesfn;

	},{"../util":94}],14:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  allAre: function( selector ){
	    return this.filter(selector).length === this.length;
	  },

	  is: function( selector ){
	    return this.filter(selector).length > 0;
	  },

	  some: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );

	      if( ret ){
	        return true;
	      }
	    }

	    return false;
	  },

	  every: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );

	      if( !ret ){
	        return false;
	      }
	    }

	    return true;
	  },

	  same: function( collection ){
	    collection = this.cy().collection( collection );

	    // cheap extra check
	    if( this.length !== collection.length ){
	      return false;
	    }

	    return this.intersect( collection ).length === this.length;
	  },

	  anySame: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.intersect( collection ).length > 0;
	  },

	  allAreNeighbors: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.neighborhood().intersect( collection ).length === collection.length;
	  }
	});

	elesfn.allAreNeighbours = elesfn.allAreNeighbors;

	module.exports = elesfn;

	},{}],15:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  parent: function( selector ){
	    var parents = [];
	    var cy = this._private.cy;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var parent = cy.getElementById( ele._private.data.parent );

	      if( parent.size() > 0 ){
	        parents.push( parent );
	      }
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  parents: function( selector ){
	    var parents = [];

	    var eles = this.parent();
	    while( eles.nonempty() ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];
	        parents.push( ele );
	      }

	      eles = eles.parent();
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  commonAncestors: function( selector ){
	    var ancestors;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var parents = ele.parents();

	      ancestors = ancestors || parents;

	      ancestors = ancestors.intersect( parents ); // current list must be common with current ele parents set
	    }

	    return ancestors.filter( selector );
	  },

	  orphans: function( selector ){
	    return this.stdFilter(function( ele ){
	      return ele.isNode() && ele.parent().empty();
	    }).filter( selector );
	  },

	  nonorphans: function( selector ){
	    return this.stdFilter(function( ele ){
	      return ele.isNode() && ele.parent().nonempty();
	    }).filter( selector );
	  },

	  children: function( selector ){
	    var children = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      children = children.concat( ele._private.children );
	    }

	    return this.spawn( children, { unique: true } ).filter( selector );
	  },

	  siblings: function( selector ){
	    return this.parent().children().not( this ).filter( selector );
	  },

	  isParent: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.children.length !== 0;
	    }
	  },

	  isChild: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.parent !== undefined && ele.parent().length !== 0;
	    }
	  },

	  descendants: function( selector ){
	    var elements = [];

	    function add( eles ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        elements.push( ele );

	        if( ele.children().nonempty() ){
	          add( ele.children() );
	        }
	      }
	    }

	    add( this.children() );

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  }
	});

	// aliases
	elesfn.ancestors = elesfn.parents;

	module.exports = elesfn;

	},{}],16:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var fn, elesfn;

	fn = elesfn = ({

	  data: define.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  removeData: define.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),

	  rscratch: define.data({
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  }),

	  removeRscratch: define.removeData({
	    field: 'rscratch',
	    triggerEvent: false
	  }),

	  id: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.id;
	    }
	  }

	});

	// aliases
	fn.attr = fn.data;
	fn.removeAttr = fn.removeData;

	module.exports = elesfn;

	},{"../define":41}],17:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var elesfn = {};

	function defineDegreeFunction(callback){
	  return function( includeLoops ){
	    var self = this;

	    if( includeLoops === undefined ){
	      includeLoops = true;
	    }

	    if( self.length === 0 ){ return; }

	    if( self.isNode() && !self.removed() ){
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;

	      for( var i = 0; i < connectedEdges.length; i++ ){
	        var edge = connectedEdges[i];

	        if( !includeLoops && edge.isLoop() ){
	          continue;
	        }

	        degree += callback( node, edge );
	      }

	      return degree;
	    } else {
	      return;
	    }
	  };
	}

	util.extend(elesfn, {
	  degree: defineDegreeFunction(function(node, edge){
	    if( edge.source().same( edge.target() ) ){
	      return 2;
	    } else {
	      return 1;
	    }
	  }),

	  indegree: defineDegreeFunction(function(node, edge){
	    if( edge.target().same(node) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  }),

	  outdegree: defineDegreeFunction(function(node, edge){
	    if( edge.source().same(node) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  })
	});

	function defineDegreeBoundsFunction(degreeFn, callback){
	  return function( includeLoops ){
	    var ret;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      var ele = nodes[i];
	      var degree = ele[degreeFn]( includeLoops );
	      if( degree !== undefined && (ret === undefined || callback(degree, ret)) ){
	        ret = degree;
	      }
	    }

	    return ret;
	  };
	}

	util.extend(elesfn, {
	  minDegree: defineDegreeBoundsFunction('degree', function(degree, min){
	    return degree < min;
	  }),

	  maxDegree: defineDegreeBoundsFunction('degree', function(degree, max){
	    return degree > max;
	  }),

	  minIndegree: defineDegreeBoundsFunction('indegree', function(degree, min){
	    return degree < min;
	  }),

	  maxIndegree: defineDegreeBoundsFunction('indegree', function(degree, max){
	    return degree > max;
	  }),

	  minOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, min){
	    return degree < min;
	  }),

	  maxOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, max){
	    return degree > max;
	  })
	});

	util.extend(elesfn, {
	  totalDegree: function( includeLoops ){
	    var total = 0;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      total += nodes[i].degree( includeLoops );
	    }

	    return total;
	  }
	});

	module.exports = elesfn;

	},{"../util":94}],18:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var fn, elesfn;

	fn = elesfn = ({

	  position: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: true,
	    triggerFnName: 'rtrigger',
	    allowGetting: true,
	    validKeys: ['x', 'y'],
	    onSet: function( eles ){
	      var updatedEles = eles.updateCompoundBounds();
	      updatedEles.rtrigger('position');
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  }),

	  // position but no notification to renderer
	  silentPosition: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: false,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: false,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    validKeys: ['x', 'y'],
	    onSet: function( eles ){
	      eles.updateCompoundBounds();
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  }),

	  positions: function( pos, silent ){
	    if( is.plainObject(pos) ){
	      this.position(pos);

	    } else if( is.fn(pos) ){
	      var fn = pos;

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];

	        var pos = fn.apply(ele, [i, ele]);

	        if( pos && !ele.locked() && !ele.isParent() ){
	          var elePos = ele._private.position;
	          elePos.x = pos.x;
	          elePos.y = pos.y;
	        }
	      }

	      var updatedEles = this.updateCompoundBounds();
	      var toTrigger = updatedEles.length > 0 ? this.add( updatedEles ) : this;

	      if( silent ){
	        toTrigger.trigger('position');
	      } else {
	        toTrigger.rtrigger('position');
	      }
	    }

	    return this; // chaining
	  },

	  silentPositions: function( pos ){
	    return this.positions( pos, true );
	  },

	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = is.plainObject( dim ) ? dim : undefined;
	    var setting = rpos !== undefined || ( val !== undefined && is.string(dim) );

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[i];

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[dim] = ( val - pan[dim] )/zoom;
	          } else if( rpos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ( rpos.x - pan.x ) /zoom,
	              y: ( rpos.y - pan.y ) /zoom
	            };
	          }
	        }

	        this.rtrigger('position');
	      } else { // getting
	        var pos = ele._private.position;
	        rpos = {
	          x: pos.x * zoom + pan.x,
	          y: pos.y * zoom + pan.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return rpos;
	        } else { // then return the specified dimension
	          return rpos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  // get/set the position relative to the parent
	  relativePosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = is.plainObject( dim ) ? dim : undefined;
	    var setting = ppos !== undefined || ( val !== undefined && is.string(dim) );
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[i];
	          var parent = hasCompoundNodes ? ele.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;

	          if( hasParent ){
	            parent = parent[0];
	          }

	          var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[dim] = val + origin[dim];
	          } else if( ppos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            };
	          }
	        }

	        this.rtrigger('position');

	      } else { // getting
	        var pos = ele._private.position;
	        var parent = hasCompoundNodes ? ele.parent() : null;
	        var hasParent = parent && parent.length > 0;
	        var relativeToParent = hasParent;

	        if( hasParent ){
	          parent = parent[0];
	        }

	        var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	        ppos = {
	          x: pos.x - origin.x,
	          y: pos.y - origin.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return ppos;
	        } else { // then return the specified dimension
	          return ppos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  renderedBoundingBox: function( options ){
	    var bb = this.boundingBox( options );
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();

	    var x1 = bb.x1 * zoom + pan.x;
	    var x2 = bb.x2 * zoom + pan.x;
	    var y1 = bb.y1 * zoom + pan.y;
	    var y2 = bb.y2 * zoom + pan.y;

	    return {
	      x1: x1,
	      x2: x2,
	      y1: y1,
	      y2: y2,
	      w: x2 - x1,
	      h: y2 - y1
	    };
	  },

	  updateCompoundBounds: function(){
	    var cy = this.cy();

	    if( !cy.styleEnabled() || !cy.hasCompoundNodes() ){ return cy.collection(); } // save cycles for non compound graphs or when style disabled

	    var updated = [];

	    function update( parent ){
	      var children = parent.children();
	      var style = parent._private.style;
	      var includeLabels = style['compound-sizing-wrt-labels'].value === 'include';
	      var bb = children.boundingBox({ includeLabels: includeLabels, includeEdges: true });
	      var padding = {
	        top: style['padding-top'].pfValue,
	        bottom: style['padding-bottom'].pfValue,
	        left: style['padding-left'].pfValue,
	        right: style['padding-right'].pfValue
	      };
	      var pos = parent._private.position;
	      var didUpdate = false;

	      if( style['width'].value === 'auto' ){
	        parent._private.autoWidth = bb.w;
	        pos.x = (bb.x1 + bb.x2 - padding.left + padding.right)/2;
	        didUpdate = true;
	      }

	      if( style['height'].value === 'auto' ){
	        parent._private.autoHeight = bb.h;
	        pos.y = (bb.y1 + bb.y2 - padding.top + padding.bottom)/2;
	        didUpdate = true;
	      }

	      if( didUpdate ){
	        updated.push( parent );
	      }
	    }

	    // go up, level by level
	    var eles = this.parent();
	    while( eles.nonempty() ){

	      // update each parent node in this level
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        update( ele );
	      }

	      // next level
	      eles = eles.parent();
	    }

	    // return changed
	    return this.spawn( updated );
	  },

	  // get the bounding box of the elements (in raw model position)
	  boundingBox: function( options ){
	    var eles = this;
	    var cy = eles._private.cy;
	    var cy_p = cy._private;
	    var styleEnabled = cy_p.styleEnabled;

	    options = options || util.staticEmptyObject();

	    var includeNodes = options.includeNodes === undefined ? true : options.includeNodes;
	    var includeEdges = options.includeEdges === undefined ? true : options.includeEdges;
	    var includeLabels = options.includeLabels === undefined ? true : options.includeLabels;

	    // recalculate projections etc
	    if( styleEnabled ){
	      cy_p.renderer.recalculateRenderedStyle( this );
	    }

	    var x1 = Infinity;
	    var x2 = -Infinity;
	    var y1 = Infinity;
	    var y2 = -Infinity;

	    // find bounds of elements
	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var _p = ele._private;
	      var style = _p.style;
	      var display = styleEnabled ? _p.style['display'].value : 'element';
	      var isNode = _p.group === 'nodes';
	      var ex1, ex2, ey1, ey2, x, y;
	      var includedEle = false;

	      if( display === 'none' ){ continue; } // then ele doesn't take up space

	      if( isNode && includeNodes ){
	        includedEle = true;

	        var pos = _p.position;
	        x = pos.x;
	        y = pos.y;
	        var w = ele.outerWidth();
	        var halfW = w/2;
	        var h = ele.outerHeight();
	        var halfH = h/2;

	        // handle node dimensions
	        /////////////////////////

	        ex1 = x - halfW;
	        ex2 = x + halfW;
	        ey1 = y - halfH;
	        ey2 = y + halfH;

	        x1 = ex1 < x1 ? ex1 : x1;
	        x2 = ex2 > x2 ? ex2 : x2;
	        y1 = ey1 < y1 ? ey1 : y1;
	        y2 = ey2 > y2 ? ey2 : y2;

	      } else if( ele.isEdge() && includeEdges ){
	        includedEle = true;

	        var n1 = _p.source;
	        var n1_p = n1._private;
	        var n1pos = n1_p.position;

	        var n2 = _p.target;
	        var n2_p = n2._private;
	        var n2pos = n2_p.position;


	        // handle edge dimensions (rough box estimate)
	        //////////////////////////////////////////////

	        var rstyle = _p.rstyle || {};
	        var w = 0;
	        var wHalf = 0;

	        if( styleEnabled ){
	          w = style['width'].pfValue;
	          wHalf = w/2;
	        }

	        ex1 = n1pos.x;
	        ex2 = n2pos.x;
	        ey1 = n1pos.y;
	        ey2 = n2pos.y;

	        if( ex1 > ex2 ){
	          var temp = ex1;
	          ex1 = ex2;
	          ex2 = temp;
	        }

	        if( ey1 > ey2 ){
	          var temp = ey1;
	          ey1 = ey2;
	          ey2 = temp;
	        }

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;

	        x1 = ex1 < x1 ? ex1 : x1;
	        x2 = ex2 > x2 ? ex2 : x2;
	        y1 = ey1 < y1 ? ey1 : y1;
	        y2 = ey2 > y2 ? ey2 : y2;

	        // handle points along edge (sanity check)
	        //////////////////////////////////////////

	        if( styleEnabled ){
	          var pts = rstyle.bezierPts || rstyle.linePts || [];

	          for( var j = 0; j < pts.length; j++ ){
	            var pt = pts[j];

	            ex1 = pt.x - wHalf;
	            ex2 = pt.x + wHalf;
	            ey1 = pt.y - wHalf;
	            ey2 = pt.y + wHalf;

	            x1 = ex1 < x1 ? ex1 : x1;
	            x2 = ex2 > x2 ? ex2 : x2;
	            y1 = ey1 < y1 ? ey1 : y1;
	            y2 = ey2 > y2 ? ey2 : y2;
	          }
	        }

	        // precise haystacks (sanity check)
	        ///////////////////////////////////

	        if( styleEnabled && style['curve-style'].strValue === 'haystack' ){
	          var hpts = rstyle.haystackPts;

	          ex1 = hpts[0].x;
	          ey1 = hpts[0].y;
	          ex2 = hpts[1].x;
	          ey2 = hpts[1].y;

	          if( ex1 > ex2 ){
	            var temp = ex1;
	            ex1 = ex2;
	            ex2 = temp;
	          }

	          if( ey1 > ey2 ){
	            var temp = ey1;
	            ey1 = ey2;
	            ey2 = temp;
	          }

	          x1 = ex1 < x1 ? ex1 : x1;
	          x2 = ex2 > x2 ? ex2 : x2;
	          y1 = ey1 < y1 ? ey1 : y1;
	          y2 = ey2 > y2 ? ey2 : y2;
	        }

	      } // edges


	      // handle label dimensions
	      //////////////////////////

	      if( styleEnabled ){

	        var _p = ele._private;
	        var style = _p.style;
	        var rstyle = _p.rstyle;
	        var label = style['label'].strValue;
	        var fontSize = style['font-size'];
	        var halign = style['text-halign'];
	        var valign = style['text-valign'];
	        var labelWidth = rstyle.labelWidth;
	        var labelHeight = rstyle.labelHeight;
	        var labelX = rstyle.labelX;
	        var labelY = rstyle.labelY;
	        var isEdge = ele.isEdge();
	        var autorotate = style['edge-text-rotation'].strValue === 'autorotate';

	        if( includeLabels && label && fontSize && labelHeight != null && labelWidth != null && labelX != null && labelY != null && halign && valign ){
	          var lh = labelHeight;
	          var lw = labelWidth;
	          var lx1, lx2, ly1, ly2;

	          if( isEdge ){
	            lx1 = labelX - lw/2;
	            lx2 = labelX + lw/2;
	            ly1 = labelY - lh/2;
	            ly2 = labelY + lh/2;

	            if( autorotate ){
	              var theta = _p.rscratch.labelAngle;
	              var cos = Math.cos( theta );
	              var sin = Math.sin( theta );

	              var rotate = function( x, y ){
	                x = x - labelX;
	                y = y - labelY;

	                return {
	                  x: x*cos - y*sin + labelX,
	                  y: x*sin + y*cos + labelY
	                };
	              };

	              var px1y1 = rotate( lx1, ly1 );
	              var px1y2 = rotate( lx1, ly2 );
	              var px2y1 = rotate( lx2, ly1 );
	              var px2y2 = rotate( lx2, ly2 );

	              lx1 = Math.min( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	              lx2 = Math.max( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	              ly1 = Math.min( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	              ly2 = Math.max( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	            }
	          } else {
	            switch( halign.value ){
	              case 'left':
	                lx1 = labelX - lw;
	                lx2 = labelX;
	                break;

	              case 'center':
	                lx1 = labelX - lw/2;
	                lx2 = labelX + lw/2;
	                break;

	              case 'right':
	                lx1 = labelX;
	                lx2 = labelX + lw;
	                break;
	            }

	            switch( valign.value ){
	              case 'top':
	                ly1 = labelY - lh;
	                ly2 = labelY;
	                break;

	              case 'center':
	                ly1 = labelY - lh/2;
	                ly2 = labelY + lh/2;
	                break;

	              case 'bottom':
	                ly1 = labelY;
	                ly2 = labelY + lh;
	                break;
	            }
	          }

	          x1 = lx1 < x1 ? lx1 : x1;
	          x2 = lx2 > x2 ? lx2 : x2;
	          y1 = ly1 < y1 ? ly1 : y1;
	          y2 = ly2 > y2 ? ly2 : y2;
	        }
	      } // style enabled for labels
	    } // for

	    var noninf = function(x){
	      if( x === Infinity || x === -Infinity ){
	        return 0;
	      }

	      return x;
	    };

	    x1 = noninf(x1);
	    x2 = noninf(x2);
	    y1 = noninf(y1);
	    y2 = noninf(y2);

	    return {
	      x1: x1,
	      x2: x2,
	      y1: y1,
	      y2: y2,
	      w: x2 - x1,
	      h: y2 - y1
	    };
	  }
	});

	var defineDimFns = function( opts ){
	  opts.uppercaseName = util.capitalize( opts.name );
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = util.capitalize( opts.outerName );

	  fn[ opts.name ] = function dimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var d = _p.style[ opts.name ];

	        switch( d.strValue ){
	          case 'auto':
	            return _p[ opts.autoName ] || 0;
	          case 'label':
	            return _p.rstyle[ opts.labelName ] || 0;
	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'outer' + opts.uppercaseName ] = function outerDimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var style = _p.style;
	        var dim = ele[ opts.name ]();
	        var border = style['border-width'].pfValue;
	        var padding = style[ opts.paddings[0] ].pfValue + style[ opts.paddings[1] ].pfValue;

	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseName ] = function renderedDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var d = ele[ opts.name ]();
	      return d * this.cy().zoom();
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseOuterName ] = function renderedOuterDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var od = ele[ opts.outerName ]();
	      return od * this.cy().zoom();
	    }
	  };
	};

	defineDimFns({
	  name: 'width',
	  paddings: ['padding-left', 'padding-right']
	});

	defineDimFns({
	  name: 'height',
	  paddings: ['padding-top', 'padding-bottom']
	});

	// aliases
	fn.modelPosition = fn.point = fn.position;
	fn.modelPositions = fn.points = fn.positions;
	fn.renderedPoint = fn.renderedPosition;
	fn.relativePoint = fn.relativePosition;
	fn.boundingbox = fn.boundingBox;
	fn.renderedBoundingbox = fn.renderedBoundingBox;

	module.exports = elesfn;

	},{"../define":41,"../is":77,"../util":94}],19:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	// represents a node or an edge
	var Element = function(cy, params, restore){
	  if( !(this instanceof Element) ){
	    return new Element(cy, params, restore);
	  }

	  var self = this;
	  restore = (restore === undefined || restore ? true : false);

	  if( cy === undefined || params === undefined || !is.core(cy) ){
	    util.error('An element must have a core reference and parameters set');
	    return;
	  }

	  var group = params.group;

	  // try to automatically infer the group if unspecified
	  if( group == null ){
	    if( params.data.source != null && params.data.target != null ){
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  }

	  // validate group
	  if( group !== 'nodes' && group !== 'edges' ){
	    util.error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
	    return;
	  }

	  // make the element array-like, just like a collection
	  this.length = 1;
	  this[0] = this;

	  // NOTE: when something is added here, add also to ele.json()
	  this._private = {
	    cy: cy,
	    single: true, // indicates this is an element
	    data: params.data || {}, // data object
	    position: params.position || {}, // (x, y) position pair
	    autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    listeners: [], // array of bound listeners
	    group: group, // string; 'nodes' or 'edges'
	    style: {}, // properties as set by the style
	    rstyle: {}, // properties for style sent from the renderer to the core
	    styleCxts: [], // applied style contexts from the styler
	    removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false, // whether it's selected
	    selectable: params.selectable === undefined ? true : ( params.selectable ? true : false ), // whether it's selectable
	    locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
	    grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : ( params.grabbable ? true : false ), // whether the element can be grabbed
	    active: false, // whether the element is active from user interaction
	    classes: {}, // map ( className => true )
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {}, // object in which the renderer can store information
	    scratch: params.scratch || {}, // scratch objects
	    edges: [], // array of connected edges
	    children: [] // array of children
	  };

	  // renderedPosition overrides if specified
	  if( params.renderedPosition ){
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();

	    this._private.position = {
	      x: (rpos.x - pan.x)/zoom,
	      y: (rpos.y - pan.y)/zoom
	    };
	  }

	  if( is.string(params.classes) ){
	    var classes = params.classes.split(/\s+/);
	    for( var i = 0, l = classes.length; i < l; i++ ){
	      var cls = classes[i];
	      if( !cls || cls === '' ){ continue; }

	      self._private.classes[cls] = true;
	    }
	  }

	  if( params.style || params.css ){
	    cy.style().applyBypass( this, params.style || params.css );
	  }

	  if( restore === undefined || restore ){
	    this.restore();
	  }

	};

	module.exports = Element;

	},{"../is":77,"../util":94}],20:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var elesfn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on({ unbindSelfOnTrigger: true }),
	  once: define.on({ unbindAllBindersOnTrigger: true }),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger(), // .trigger( events [, extraParams] )

	  rtrigger: function(event, extraParams){ // for internal use only
	    if( this.length === 0 ){ return; } // empty collections don't need to notify anything

	    // notify renderer
	    this.cy().notify({
	      type: event,
	      collection: this
	    });

	    this.trigger(event, extraParams);
	    return this;
	  }
	});

	// aliases:
	define.eventAliasesOn( elesfn );

	module.exports = elesfn;

	},{"../define":41}],21:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Selector = _dereq_('../selector');

	var elesfn = ({
	  nodes: function( selector ){
	    return this.filter(function(i, element){
	      return element.isNode();
	    }).filter(selector);
	  },

	  edges: function( selector ){
	    return this.filter(function(i, element){
	      return element.isEdge();
	    }).filter(selector);
	  },

	  filter: function( filter ){
	    if( is.fn(filter) ){
	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];

	        if( filter.apply(ele, [i, ele]) ){
	          elements.push(ele);
	        }
	      }

	      return this.spawn(elements);

	    } else if( is.string(filter) || is.elementOrCollection(filter) ){
	      return Selector(filter).filter(this);

	    } else if( filter === undefined ){
	      return this;
	    }

	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },

	  not: function( toRemove ){
	    if( !toRemove ){
	      return this;
	    } else {

	      if( is.string( toRemove ) ){
	        toRemove = this.filter( toRemove );
	      }

	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var element = this[i];

	        var remove = toRemove._private.ids[ element.id() ];
	        if( !remove ){
	          elements.push( element );
	        }
	      }

	      return this.spawn( elements );
	    }

	  },

	  absoluteComplement: function(){
	    var cy = this._private.cy;

	    return cy.elements().not( this );
	  },

	  intersect: function( other ){
	    // if a selector is specified, then filter by it instead
	    if( is.string(other) ){
	      var selector = other;
	      return this.filter( selector );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    // var ids1 = col1Smaller ? col1._private.ids : col2._private.ids;
	    var ids2 = col1Smaller ? col2._private.ids : col1._private.ids;
	    var col = col1Smaller ? col1 : col2;

	    for( var i = 0; i < col.length; i++ ){
	      var id = col[i]._private.data.id;
	      var ele = ids2[ id ];

	      if( ele ){
	        elements.push( ele );
	      }
	    }

	    return this.spawn( elements );
	  },

	  xor: function( other ){
	    var cy = this._private.cy;

	    if( is.string(other) ){
	      other = cy.$( other );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( !inOther ){
	          elements.push( ele );
	        }
	      }

	    };

	    add( col1, col2 );
	    add( col2, col1 );

	    return this.spawn( elements );
	  },

	  diff: function( other ){
	    var cy = this._private.cy;

	    if( is.string(other) ){
	      other = cy.$( other );
	    }

	    var left = [];
	    var right = [];
	    var both = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other, retEles ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( inOther ){
	          both.push( ele );
	        } else {
	          retEles.push( ele );
	        }
	      }

	    };

	    add( col1, col2, left );
	    add( col2, col1, right );

	    return {
	      left: this.spawn( left, { unique: true } ),
	      right: this.spawn( right, { unique: true } ),
	      both: this.spawn( both, { unique: true } )
	    };
	  },

	  add: function( toAdd ){
	    var cy = this._private.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( is.string(toAdd) ){
	      var selector = toAdd;
	      toAdd = cy.elements(selector);
	    }

	    var elements = [];

	    for( var i = 0; i < this.length; i++ ){
	      elements.push( this[i] );
	    }

	    for( var i = 0; i < toAdd.length; i++ ){

	      var add = !this._private.ids[ toAdd[i].id() ];
	      if( add ){
	        elements.push( toAdd[i] );
	      }
	    }

	    return this.spawn(elements);
	  },

	  // in place merge on calling collection
	  merge: function( toAdd ){
	    var _p = this._private;
	    var cy = _p.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( is.string(toAdd) ){
	      var selector = toAdd;
	      toAdd = cy.elements(selector);
	    }

	    for( var i = 0; i < toAdd.length; i++ ){
	      var toAddEle = toAdd[i];
	      var id = toAddEle.id();
	      var add = !_p.ids[ id ];

	      if( add ){
	        var index = this.length++;

	        this[ index ] = toAddEle;
	        _p.ids[ id ] = toAddEle;
	        _p.indexes[ id ] = index;
	      }
	    }

	    return this; // chaining
	  },

	  // remove single ele in place in calling collection
	  unmergeOne: function( ele ){
	    ele = ele[0];

	    var _p = this._private;
	    var id = ele.id();
	    var i = _p.indexes[ id ];

	    if( i == null ){
	      return this; // no need to remove
	    }

	    // remove ele
	    this[i] = undefined;
	    _p.ids[ id ] = undefined;
	    _p.indexes[ id ] = undefined;

	    var unmergedLastEle = i === this.length - 1;

	    // replace empty spot with last ele in collection
	    if( this.length > 1 && !unmergedLastEle ){
	      var lastEleI = this.length - 1;
	      var lastEle = this[ lastEleI ];

	      this[ lastEleI ] = undefined;
	      this[i] = lastEle;
	      _p.indexes[ lastEle.id() ] = i;
	    }

	    // the collection is now 1 ele smaller
	    this.length--;

	    return this;
	  },

	  // remove eles in place on calling collection
	  unmerge: function( toRemove ){
	    var cy = this._private.cy;

	    if( !toRemove ){
	      return this;
	    }

	    if( is.string(toRemove) ){
	      var selector = toRemove;
	      toRemove = cy.elements(selector);
	    }

	    for( var i = 0; i < toRemove.length; i++ ){
	      this.unmergeOne( toRemove[i] );
	    }

	    return this; // chaining
	  },

	  map: function( mapFn, thisArg ){
	    var arr = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var ret = thisArg ? mapFn.apply( thisArg, [ele, i, eles] ) : mapFn( ele, i, eles );

	      arr.push( ret );
	    }

	    return arr;
	  },

	  stdFilter: function( fn, thisArg ){
	    var filterEles = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var include = thisArg ? fn.apply( thisArg, [ele, i, eles] ) : fn( ele, i, eles );

	      if( include ){
	        filterEles.push( ele );
	      }
	    }

	    return this.spawn( filterEles );
	  },

	  max: function( valFn, thisArg ){
	    var max = -Infinity;
	    var maxEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val > max ){
	        max = val;
	        maxEle = ele;
	      }
	    }

	    return {
	      value: max,
	      ele: maxEle
	    };
	  },

	  min: function( valFn, thisArg ){
	    var min = Infinity;
	    var minEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val < min ){
	        min = val;
	        minEle = ele;
	      }
	    }

	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	});

	// aliases
	var fn = elesfn;
	fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;
	fn['\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
	fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;
	fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;
	fn.fnFilter = fn.filterFn = fn.stdFilter;
	fn.complement = fn.abscomp = fn.absoluteComplement;

	module.exports = elesfn;

	},{"../is":77,"../selector":81}],22:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  isNode: function(){
	    return this.group() === 'nodes';
	  },

	  isEdge: function(){
	    return this.group() === 'edges';
	  },

	  isLoop: function(){
	    return this.isEdge() && this.source().id() === this.target().id();
	  },

	  isSimple: function(){
	    return this.isEdge() && this.source().id() !== this.target().id();
	  },

	  group: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.group;
	    }
	  }
	});


	module.exports = elesfn;

	},{}],23:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var Element = _dereq_('./element');

	// factory for generating edge ids when no id is specified for a new element
	var idFactory = {
	  prefix: 'ele',
	  id: 0,
	  generate: function(cy, element, tryThisId){
	    var json = is.element( element ) ? element._private : element;
	    var id = tryThisId != null ? tryThisId : this.prefix + this.id;

	    if( cy.getElementById(id).empty() ){
	      this.id++; // we've used the current id, so move it up
	    } else { // otherwise keep trying successive unused ids
	      while( !cy.getElementById(id).empty() ){
	        id = this.prefix + ( ++this.id );
	      }
	    }

	    return id;
	  }
	};

	// represents a set of nodes, edges, or both together
	var Collection = function(cy, elements, options){
	  if( !(this instanceof Collection) ){
	    return new Collection(cy, elements, options);
	  }

	  if( cy === undefined || !is.core(cy) ){
	    util.error('A collection must have a reference to the core');
	    return;
	  }

	  var ids = {};
	  var indexes = {};
	  var createdElements = false;

	  if( !elements ){
	    elements = [];
	  } else if( elements.length > 0 && is.plainObject( elements[0] ) && !is.element( elements[0] ) ){
	    createdElements = true;

	    // make elements from json and restore all at once later
	    var eles = [];
	    var elesIds = {};

	    for( var i = 0, l = elements.length; i < l; i++ ){
	      var json = elements[i];

	      if( json.data == null ){
	        json.data = {};
	      }

	      var data = json.data;

	      // make sure newly created elements have valid ids
	      if( data.id == null ){
	        data.id = idFactory.generate( cy, json );
	      } else if( cy.getElementById( data.id ).length !== 0 || elesIds[ data.id ] ){
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element( cy, json, false );
	      eles.push( ele );
	      elesIds[ data.id ] = true;
	    }

	    elements = eles;
	  }

	  this.length = 0;

	  for( var i = 0, l = elements.length; i < l; i++ ){
	    var element = elements[i];
	    if( !element ){  continue; }

	    var id = element._private.data.id;

	    if( !options || (options.unique && !ids[ id ] ) ){
	      ids[ id ] = element;
	      indexes[ id ] = this.length;

	      this[ this.length ] = element;
	      this.length++;
	    }
	  }

	  this._private = {
	    cy: cy,
	    ids: ids,
	    indexes: indexes
	  };

	  // restore the elements if we created them from json
	  if( createdElements ){
	    this.restore();
	  }
	};

	// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////

	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes
	var elesfn = Element.prototype = Collection.prototype;

	elesfn.instanceString = function(){
	  return 'collection';
	};

	elesfn.spawn = function( cy, eles, opts ){
	  if( !is.core(cy) ){ // cy is optional
	    opts = eles;
	    eles = cy;
	    cy = this.cy();
	  }

	  return new Collection( cy, eles, opts );
	};

	elesfn.cy = function(){
	  return this._private.cy;
	};

	elesfn.element = function(){
	  return this[0];
	};

	elesfn.collection = function(){
	  if( is.collection(this) ){
	    return this;
	  } else { // an element
	    return new Collection( this._private.cy, [this] );
	  }
	};

	elesfn.unique = function(){
	  return new Collection( this._private.cy, this, { unique: true } );
	};

	elesfn.getElementById = function( id ){
	  var cy = this._private.cy;
	  var ele = this._private.ids[ id ];

	  return ele ? ele : new Collection(cy); // get ele or empty collection
	};

	elesfn.json = function( obj ){
	  var ele = this.element();
	  var cy = this.cy();

	  if( ele == null && obj ){ return this; } // can't set to no eles

	  if( ele == null ){ return undefined; } // can't get from no eles

	  var p = ele._private;

	  if( is.plainObject(obj) ){ // set

	    cy.startBatch();

	    if( obj.data ){
	      ele.data( obj.data );
	    }

	    if( obj.position ){
	      ele.position( obj.position );
	    }

	    // ignore group -- immutable

	    var checkSwitch = function( k, trueFnName, falseFnName ){
	      var obj_k = obj[k];

	      if( obj_k != null && obj_k !== p[k] ){
	        if( obj_k ){
	          ele[ trueFnName ]();
	        } else {
	          ele[ falseFnName ]();
	        }
	      }
	    };

	    checkSwitch( 'removed', 'remove', 'restore' );

	    checkSwitch( 'selected', 'select', 'unselect' );

	    checkSwitch( 'selectable', 'selectify', 'unselectify' );

	    checkSwitch( 'locked', 'lock', 'unlock' );

	    checkSwitch( 'grabbable', 'grabify', 'ungrabify' );

	    if( obj.classes != null ){
	      ele.classes( obj.classes );
	    }

	    cy.endBatch();

	    return this;

	  } else if( obj === undefined ){ // get

	    var json = {
	      data: util.copy( p.data ),
	      position: util.copy( p.position ),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      classes: null
	    };

	    var classes = [];
	    for( var cls in p.classes ){
	      if( p.classes[cls] ){
	        classes.push(cls);
	      }
	    }
	    json.classes = classes.join(' ');

	    return json;
	  }
	};

	elesfn.jsons = function(){
	  var jsons = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[i];
	    var json = ele.json();

	    jsons.push( json );
	  }

	  return jsons;
	};

	elesfn.clone = function(){
	  var cy = this.cy();
	  var elesArr = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[i];
	    var json = ele.json();
	    var clone = new Element(cy, json, false); // NB no restore

	    elesArr.push( clone );
	  }

	  return new Collection( cy, elesArr );
	};
	elesfn.copy = elesfn.clone;

	elesfn.restore = function( notifyRenderer ){
	  var self = this;
	  var restored = [];
	  var cy = self.cy();

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // create arrays of nodes and edges, since we need to
	  // restore the nodes first
	  var elements = [];
	  var nodes = [], edges = [];
	  var numNodes = 0;
	  var numEdges = 0;
	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[i];

	    // keep nodes first in the array and edges after
	    if( ele.isNode() ){ // put to front of array if node
	      nodes.push( ele );
	      numNodes++;
	    } else { // put to end of array if edge
	      edges.push( ele );
	      numEdges++;
	    }
	  }

	  elements = nodes.concat( edges );

	  // now, restore each element
	  for( var i = 0, l = elements.length; i < l; i++ ){
	    var ele = elements[i];

	    if( !ele.removed() ){
	      // don't need to do anything
	      continue;
	    }

	    var _private = ele._private;
	    var data = _private.data;

	    // set id and validate
	    if( data.id === undefined ){
	      data.id = idFactory.generate( cy, ele );

	    } else if( is.number(data.id) ){
	      data.id = '' + data.id; // now it's a string

	    } else if( is.emptyString(data.id) || !is.string(data.id) ){
	      util.error('Can not create element with invalid string ID `' + data.id + '`');

	      // can't create element if it has empty string as id or non-string id
	      continue;
	    } else if( cy.getElementById( data.id ).length !== 0 ){
	      util.error('Can not create second element with ID `' + data.id + '`');

	      // can't create element if one already has that id
	      continue;
	    }

	    var id = data.id; // id is finalised, now let's keep a ref

	    if( ele.isNode() ){ // extra checks for nodes
	      var node = ele;
	      var pos = _private.position;

	      // make sure the nodes have a defined position

	      if( pos.x == null ){
	        pos.x = 0;
	      }

	      if( pos.y == null ){
	        pos.y = 0;
	      }
	    }

	    if( ele.isEdge() ){ // extra checks for edges

	      var edge = ele;
	      var fields = ['source', 'target'];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;
	      for(var j = 0; j < fieldsLength; j++){

	        var field = fields[j];
	        var val = data[field];

	        if( is.number(val) ){
	          val = data[field] = '' + data[field]; // now string
	        }

	        if( val == null || val === '' ){
	          // can't create if source or target is not defined properly
	          util.error('Can not create edge `' + id + '` with unspecified ' + field);
	          badSourceOrTarget = true;
	        } else if( cy.getElementById(val).empty() ){
	          // can't create edge if one of its nodes doesn't exist
	          util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
	          badSourceOrTarget = true;
	        }
	      }

	      if( badSourceOrTarget ){ continue; } // can't create this

	      var src = cy.getElementById( data.source );
	      var tgt = cy.getElementById( data.target );

	      src._private.edges.push( edge );
	      tgt._private.edges.push( edge );

	      edge._private.source = src;
	      edge._private.target = tgt;

	    } // if is edge

	    // create mock ids map for element so it can be used like collections
	    _private.ids = {};
	    _private.ids[ id ] = ele;

	    _private.removed = false;
	    cy.addToPool( ele );

	    restored.push( ele );
	  } // for each element

	  // do compound node sanity checks
	  for( var i = 0; i < numNodes; i++ ){ // each node
	    var node = elements[i];
	    var data = node._private.data;

	    if( is.number(data.parent) ){ // then automake string
	      data.parent = '' + data.parent;
	    }

	    var parentId = data.parent;

	    var specifiedParent = parentId != null;

	    if( specifiedParent ){
	      var parent = cy.getElementById( parentId );

	      if( parent.empty() ){
	        // non-existant parent; just remove it
	        data.parent = undefined;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;
	        while( !ancestor.empty() ){
	          if( node.same(ancestor) ){
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            data.parent = undefined; // remove parent reference

	            // exit or we loop forever
	            break;
	          }

	          ancestor = ancestor.parent();
	        }

	        if( !selfAsParent ){
	          // connect with children
	          parent[0]._private.children.push( node );
	          node._private.parent = parent[0];

	          // let the core know we have a compound graph
	          cy._private.hasCompoundNodes = true;
	        }
	      } // else
	    } // if specified parent
	  } // for each node

	  restored = new Collection( cy, restored );
	  if( restored.length > 0 ){

	    var toUpdateStyle = restored.add( restored.connectedNodes() ).add( restored.parent() );
	    toUpdateStyle.updateStyle( notifyRenderer );

	    if( notifyRenderer ){
	      restored.rtrigger('add');
	    } else {
	      restored.trigger('add');
	    }
	  }

	  return self; // chainability
	};

	elesfn.removed = function(){
	  var ele = this[0];
	  return ele && ele._private.removed;
	};

	elesfn.inside = function(){
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};

	elesfn.remove = function( notifyRenderer ){
	  var self = this;
	  var removed = [];
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy;

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // add connected edges
	  function addConnectedEdges(node){
	    var edges = node._private.edges;
	    for( var i = 0; i < edges.length; i++ ){
	      add( edges[i] );
	    }
	  }


	  // add descendant nodes
	  function addChildren(node){
	    var children = node._private.children;

	    for( var i = 0; i < children.length; i++ ){
	      add( children[i] );
	    }
	  }

	  function add( ele ){
	    var alreadyAdded =  elesToRemoveIds[ ele.id() ];
	    if( alreadyAdded ){
	      return;
	    } else {
	      elesToRemoveIds[ ele.id() ] = true;
	    }

	    if( ele.isNode() ){
	      elesToRemove.push( ele ); // nodes are removed last

	      addConnectedEdges( ele );
	      addChildren( ele );
	    } else {
	      elesToRemove.unshift( ele ); // edges are removed first
	    }
	  }

	  // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)

	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[i];

	    add( ele );
	  }

	  function removeEdgeRef(node, edge){
	    var connectedEdges = node._private.edges;
	    for( var j = 0; j < connectedEdges.length; j++ ){
	      var connectedEdge = connectedEdges[j];

	      if( edge === connectedEdge ){
	        connectedEdges.splice( j, 1 );
	        break;
	      }
	    }
	  }

	  function removeChildRef(parent, ele){
	    ele = ele[0];
	    parent = parent[0];
	    var children = parent._private.children;

	    for( var j = 0; j < children.length; j++ ){
	      if( children[j][0] === ele[0] ){
	        children.splice(j, 1);
	        break;
	      }
	    }
	  }

	  for( var i = 0; i < elesToRemove.length; i++ ){
	    var ele = elesToRemove[i];

	    // mark as removed
	    ele._private.removed = true;

	    // remove from core pool
	    cy.removeFromPool( ele );

	    // add to list of removed elements
	    removed.push( ele );

	    if( ele.isEdge() ){ // remove references to this edge in its connected nodes
	      var src = ele.source()[0];
	      var tgt = ele.target()[0];

	      removeEdgeRef( src, ele );
	      removeEdgeRef( tgt, ele );

	    } else { // remove reference to parent
	      var parent = ele.parent();

	      if( parent.length !== 0 ){
	        removeChildRef(parent, ele);
	      }
	    }
	  }

	  // check to see if we have a compound graph or not
	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;
	  for( var i = 0; i < elesStillInside.length; i++ ){
	    var ele = elesStillInside[i];

	    if( ele.isParent() ){
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }

	  var removedElements = new Collection( this.cy(), removed );
	  if( removedElements.size() > 0 ){
	    // must manually notify since trigger won't do this automatically once removed

	    if( notifyRenderer ){
	      this.cy().notify({
	        type: 'remove',
	        collection: removedElements
	      });
	    }

	    removedElements.trigger('remove');
	  }

	  // check for empty remaining parent nodes
	  var checkedParentId = {};
	  for( var i = 0; i < elesToRemove.length; i++ ){
	    var ele = elesToRemove[i];
	    var isNode = ele._private.group === 'nodes';
	    var parentId = ele._private.data.parent;

	    if( isNode && parentId !== undefined && !checkedParentId[ parentId ] ){
	      checkedParentId[ parentId ] = true;
	      var parent = cy.getElementById( parentId );

	      if( parent && parent.length !== 0 && !parent._private.removed && parent.children().length === 0 ){
	        parent.updateStyle();
	      }
	    }
	  }

	  return new Collection( cy, removed );
	};

	elesfn.move = function( struct ){
	  var cy = this._private.cy;

	  if( struct.source !== undefined || struct.target !== undefined ){
	    var srcId = struct.source;
	    var tgtId = struct.target;
	    var srcExists = cy.getElementById( srcId ).length > 0;
	    var tgtExists = cy.getElementById( tgtId ).length > 0;

	    if( srcExists || tgtExists ){
	      var jsons = this.jsons();

	      this.remove();

	      for( var i = 0; i < jsons.length; i++ ){
	        var json = jsons[i];

	        if( json.group === 'edges' ){
	          if( srcExists ){ json.data.source = srcId; }
	          if( tgtExists ){ json.data.target = tgtId; }
	        }
	      }

	      return cy.add( jsons );
	    }

	  } else if( struct.parent !== undefined ){ // move node to new parent
	    var parentId = struct.parent;
	    var parentExists = parentId === null || cy.getElementById( parentId ).length > 0;

	    if( parentExists ){
	      var jsons = this.jsons();
	      var descs = this.descendants();
	      var descsEtc = descs.merge( descs.add(this).connectedEdges() );

	      this.remove(); // NB: also removes descendants and their connected edges

	      for( var i = 0; i < this.length; i++ ){
	        var json = jsons[i];

	        if( json.group === 'nodes' ){
	          json.data.parent = parentId === null ? undefined : parentId;
	        }
	      }
	    }

	    return cy.add( jsons ).merge( descsEtc.restore() );
	  }

	  return this; // if nothing done
	};

	[
	  _dereq_('./algorithms'),
	  _dereq_('./animation'),
	  _dereq_('./class'),
	  _dereq_('./comparators'),
	  _dereq_('./compounds'),
	  _dereq_('./data'),
	  _dereq_('./degree'),
	  _dereq_('./dimensions'),
	  _dereq_('./events'),
	  _dereq_('./filter'),
	  _dereq_('./group'),
	  _dereq_('./index'),
	  _dereq_('./iteration'),
	  _dereq_('./layout'),
	  _dereq_('./style'),
	  _dereq_('./switch-functions'),
	  _dereq_('./traversing')
	].forEach(function( props ){
	  util.extend( elesfn, props );
	});

	module.exports = Collection;

	},{"../is":77,"../util":94,"./algorithms":9,"./animation":12,"./class":13,"./comparators":14,"./compounds":15,"./data":16,"./degree":17,"./dimensions":18,"./element":19,"./events":20,"./filter":21,"./group":22,"./index":23,"./iteration":24,"./layout":25,"./style":26,"./switch-functions":27,"./traversing":28}],24:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var zIndexSort = _dereq_('./zsort');

	var elesfn = ({
	  each: function(fn){
	    if( is.fn(fn) ){
	      for(var i = 0; i < this.length; i++){
	        var ele = this[i];
	        var ret = fn.apply( ele, [ i, ele ] );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }
	    return this;
	  },

	  forEach: function(fn, thisArg){
	    if( is.fn(fn) ){

	      for(var i = 0; i < this.length; i++){
	        var ele = this[i];
	        var ret = thisArg ? fn.apply( thisArg, [ ele, i, this ] ) : fn( ele, i, this );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }

	    return this;
	  },

	  toArray: function(){
	    var array = [];

	    for(var i = 0; i < this.length; i++){
	      array.push( this[i] );
	    }

	    return array;
	  },

	  slice: function(start, end){
	    var array = [];
	    var thisSize = this.length;

	    if( end == null ){
	      end = thisSize;
	    }

	    if( start == null ){
	      start = 0;
	    }

	    if( start < 0 ){
	      start = thisSize + start;
	    }

	    if( end < 0 ){
	      end = thisSize + end;
	    }

	    for(var i = start; i >= 0 && i < end && i < thisSize; i++){
	      array.push( this[i] );
	    }

	    return this.spawn(array);
	  },

	  size: function(){
	    return this.length;
	  },

	  eq: function(i){
	    return this[i] || this.spawn();
	  },

	  first: function(){
	    return this[0] || this.spawn();
	  },

	  last: function(){
	    return this[ this.length - 1 ] || this.spawn();
	  },

	  empty: function(){
	    return this.length === 0;
	  },

	  nonempty: function(){
	    return !this.empty();
	  },

	  sort: function( sortFn ){
	    if( !is.fn( sortFn ) ){
	      return this;
	    }

	    var sorted = this.toArray().sort( sortFn );

	    return this.spawn(sorted);
	  },

	  sortByZIndex: function(){
	    return this.sort( zIndexSort );
	  },

	  zDepth: function(){
	    var ele = this[0];
	    if( !ele ){ return undefined; }

	    // var cy = ele.cy();
	    var _p = ele._private;
	    var group = _p.group;

	    if( group === 'nodes' ){
	      var depth = _p.data.parent ? ele.parents().size() : 0;

	      if( !ele.isParent() ){
	        return Number.MAX_VALUE; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();

	      return Math.max( srcDepth, tgtDepth, 0 ); // depth of deepest parent
	    }
	  }
	});

	module.exports = elesfn;

	},{"../is":77,"./zsort":29}],25:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');

	var elesfn = ({

	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function( layout, options, fn ){
	    var nodes = this.nodes();
	    var cy = this.cy();

	    layout.trigger({ type: 'layoutstart', layout: layout });

	    layout.animations = [];

	    if( options.animate ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var lastNode = i === nodes.length - 1;

	        var newPos = fn.call( node, i, node );
	        var pos = node.position();

	        if( !is.number(pos.x) || !is.number(pos.y) ){
	          node.silentPosition({ x: 0, y: 0 });
	        }

	        var ani = node.animation({
	          position: newPos,
	          duration: options.animationDuration,
	          easing: options.animationEasing,
	          step: !lastNode ? undefined : function(){
	            if( options.fit ){
	              cy.fit( options.eles, options.padding );
	            }
	          },
	          complete: !lastNode ? undefined : function(){
	            if( options.zoom != null ){
	              cy.zoom( options.zoom );
	            }

	            if( options.pan ){
	              cy.pan( options.pan );
	            }

	            if( options.fit ){
	              cy.fit( options.eles, options.padding );
	            }

	            layout.one('layoutstop', options.stop);
	            layout.trigger({ type: 'layoutstop', layout: layout });
	          }
	        });

	        layout.animations.push( ani );

	        ani.play();
	      }

	      layout.one('layoutready', options.ready);
	      layout.trigger({ type: 'layoutready', layout: layout });
	    } else {
	      nodes.positions( fn );

	      if( options.fit ){
	        cy.fit( options.eles, options.padding );
	      }

	      if( options.zoom != null ){
	        cy.zoom( options.zoom );
	      }

	      if( options.pan ){
	        cy.pan( options.pan );
	      }

	      layout.one('layoutready', options.ready);
	      layout.trigger({ type: 'layoutready', layout: layout });

	      layout.one('layoutstop', options.stop);
	      layout.trigger({ type: 'layoutstop', layout: layout });
	    }

	    return this; // chaining
	  },

	  layout: function( options ){
	    var cy = this.cy();

	    cy.layout( util.extend({}, options, {
	      eles: this
	    }) );

	    return this;
	  },

	  makeLayout: function( options ){
	    var cy = this.cy();

	    return cy.makeLayout( util.extend({}, options, {
	      eles: this
	    }) );
	  }

	});

	// aliases:
	elesfn.createLayout = elesfn.makeLayout;

	module.exports = elesfn;

	},{"../is":77,"../util":94}],26:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	var elesfn = ({

	  // fully updates (recalculates) the style for the elements
	  updateStyle: function( notifyRenderer ){
	    var cy = this._private.cy;

	    if( !cy.styleEnabled() ){ return this; }

	    if( cy._private.batchingStyle ){
	      var bEles = cy._private.batchStyleEles;

	      bEles.merge( this );

	      return this; // chaining and exit early when batching
	    }

	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    style.apply( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger('style'); // let renderer know we changed style
	    } else {
	      toNotify.trigger('style'); // just fire the event
	    }
	    return this; // chaining
	  },

	  // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
	  updateMappers: function( notifyRenderer ){
	    var cy = this._private.cy;
	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if( !cy.styleEnabled() ){ return this; }

	    style.updateMappers( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger('style'); // let renderer know we changed style
	    } else {
	      toNotify.trigger('style'); // just fire the event
	    }
	    return this; // chaining
	  },

	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedCss: function( property ){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return this; }

	    var ele = this[0];

	    if( ele ){
	      var renstyle = ele.cy().style().getRenderedStyle( ele );

	      if( property === undefined ){
	        return renstyle;
	      } else {
	        return renstyle[ property ];
	      }
	    }
	  },

	  // read the calculated css style of the element or override the style (via a bypass)
	  css: function( name, value ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();

	    if( is.plainObject(name) ){ // then extend the bypass
	      var props = name;
	      style.applyBypass( this, props, updateTransitions );

	      var updatedCompounds = this.updateCompoundBounds();
	      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	      toNotify.rtrigger('style'); // let the renderer know we've updated style

	    } else if( is.string(name) ){

	      if( value === undefined ){ // then get the property from the style
	        var ele = this[0];

	        if( ele ){
	          return style.getStylePropertyValue( ele, name );
	        } else { // empty collection => can't get any value
	          return;
	        }

	      } else { // then set the bypass with the property value
	        style.applyBypass( this, name, value, updateTransitions );

	        var updatedCompounds = this.updateCompoundBounds();
	        var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	        toNotify.rtrigger('style'); // let the renderer know we've updated style
	      }

	    } else if( name === undefined ){
	      var ele = this[0];

	      if( ele ){
	        return style.getRawStyle( ele );
	      } else { // empty collection => can't get any value
	        return;
	      }
	    }

	    return this; // chaining
	  },

	  removeCss: function( names ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;

	    if( names === undefined ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        style.removeAllBypasses( ele, updateTransitions );
	      }
	    } else {
	      names = names.split(/\s+/);

	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        style.removeBypasses( ele, names, updateTransitions );
	      }
	    }

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	    toNotify.rtrigger('style'); // let the renderer know we've updated style

	    return this; // chaining
	  },

	  show: function(){
	    this.css('display', 'element');
	    return this; // chaining
	  },

	  hide: function(){
	    this.css('display', 'none');
	    return this; // chaining
	  },

	  visible: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return true; }

	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele ){
	      var style = ele._private.style;

	      if(
	        style['visibility'].value !== 'visible'
	        || style['display'].value !== 'element'
	      ){
	        return false;
	      }

	      if( ele._private.group === 'nodes' ){
	        if( !hasCompoundNodes ){ return true; }

	        var parents = ele._private.data.parent ? ele.parents() : null;

	        if( parents ){
	          for( var i = 0; i < parents.length; i++ ){
	            var parent = parents[i];
	            var pStyle = parent._private.style;
	            var pVis = pStyle['visibility'].value;
	            var pDis = pStyle['display'].value;

	            if( pVis !== 'visible' || pDis !== 'element' ){
	              return false;
	            }
	          }
	        }

	        return true;
	      } else {
	        var src = ele._private.source;
	        var tgt = ele._private.target;

	        return src.visible() && tgt.visible();
	      }

	    }
	  },

	  hidden: function(){
	    var ele = this[0];

	    if( ele ){
	      return !ele.visible();
	    }
	  },

	  effectiveOpacity: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return 1; }

	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];

	    if( ele ){
	      var _p = ele._private;
	      var parentOpacity = _p.style.opacity.value;

	      if( !hasCompoundNodes ){ return parentOpacity; }

	      var parents = !_p.data.parent ? null : ele.parents();

	      if( parents ){
	        for( var i = 0; i < parents.length; i++ ){
	          var parent = parents[i];
	          var opacity = parent._private.style.opacity.value;

	          parentOpacity = opacity * parentOpacity;
	        }
	      }

	      return parentOpacity;
	    }
	  },

	  transparent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();

	    if( ele ){
	      if( !hasCompoundNodes ){
	        return ele._private.style.opacity.value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },

	  isFullAutoParent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    if( ele ){
	      var autoW = ele._private.style['width'].value === 'auto';
	      var autoH = ele._private.style['height'].value === 'auto';

	      return ele.isParent() && autoW && autoH;
	    }
	  },

	  backgrounding: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    return ele._private.backgrounding ? true : false;
	  }

	});


	elesfn.bypass = elesfn.style = elesfn.css;
	elesfn.renderedStyle = elesfn.renderedCss;
	elesfn.removeBypass = elesfn.removeStyle = elesfn.removeCss;

	module.exports = elesfn;

	},{"../is":77}],27:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = {};

	function defineSwitchFunction(params){
	  return function(){
	    var args = arguments;
	    var changedEles = [];

	    // e.g. cy.nodes().select( data, handler )
	    if( args.length === 2 ){
	      var data = args[0];
	      var handler = args[1];
	      this.bind( params.event, data, handler );
	    }

	    // e.g. cy.nodes().select( handler )
	    else if( args.length === 1 ){
	      var handler = args[0];
	      this.bind( params.event, handler );
	    }

	    // e.g. cy.nodes().select()
	    else if( args.length === 0 ){
	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];
	        var able = !params.ableField || ele._private[params.ableField];
	        var changed = ele._private[params.field] != params.value;

	        if( params.overrideAble ){
	          var overrideAble = params.overrideAble(ele);

	          if( overrideAble !== undefined ){
	            able = overrideAble;

	            if( !overrideAble ){ return this; } // to save cycles assume not able for all on override
	          }
	        }

	        if( able ){
	          ele._private[params.field] = params.value;

	          if( changed ){
	            changedEles.push( ele );
	          }
	        }
	      }

	      var changedColl = this.spawn( changedEles );
	      changedColl.updateStyle(); // change of state => possible change of style
	      changedColl.trigger( params.event );
	    }

	    return this;
	  };
	}

	function defineSwitchSet( params ){
	  elesfn[ params.field ] = function(){
	    var ele = this[0];

	    if( ele ){
	      if( params.overrideField ){
	        var val = params.overrideField(ele);

	        if( val !== undefined ){
	          return val;
	        }
	      }

	      return ele._private[ params.field ];
	    }
	  };

	  elesfn[ params.on ] = defineSwitchFunction({
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  });

	  elesfn[ params.off ] = defineSwitchFunction({
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  });
	}

	defineSwitchSet({
	  field: 'locked',
	  overrideField: function(ele){
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	});

	defineSwitchSet({
	  field: 'grabbable',
	  overrideField: function(ele){
	    return ele.cy().autoungrabify() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	});

	defineSwitchSet({
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function(ele){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	});

	defineSwitchSet({
	  field: 'selectable',
	  overrideField: function(ele){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	});

	elesfn.deselect = elesfn.unselect;

	elesfn.grabbed = function(){
	  var ele = this[0];
	  if( ele ){
	    return ele._private.grabbed;
	  }
	};

	defineSwitchSet({
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	});

	elesfn.inactive = function(){
	  var ele = this[0];
	  if( ele ){
	    return !ele._private.active;
	  }
	};

	module.exports = elesfn;

	},{}],28:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var elesfn = {};

	util.extend(elesfn, {
	  // get the root nodes in the DAG
	  roots: function( selector ){
	    var eles = this;
	    var roots = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      if( !ele.isNode() ){
	        continue;
	      }

	      var hasEdgesPointingIn = ele.connectedEdges(function(){
	        return this.data('target') === ele.id() && this.data('source') !== ele.id();
	      }).length > 0;

	      if( !hasEdgesPointingIn ){
	        roots.push( ele );
	      }
	    }

	    return this.spawn( roots, { unique: true } ).filter( selector );
	  },

	  // get the leaf nodes in the DAG
	  leaves: function( selector ){
	    var eles = this;
	    var leaves = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      if( !ele.isNode() ){
	        continue;
	      }

	      var hasEdgesPointingOut = ele.connectedEdges(function(){
	        return this.data('source') === ele.id() && this.data('target') !== ele.id();
	      }).length > 0;

	      if( !hasEdgesPointingOut ){
	        leaves.push( ele );
	      }
	    }

	    return this.spawn( leaves, { unique: true } ).filter( selector );
	  },

	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: function( selector ){
	    var eles = this;
	    var oEles = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var eleId = ele.id();

	      if( !ele.isNode() ){ continue; }

	      var edges = ele._private.edges;
	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        var srcId = edge._private.data.source;
	        var tgtId = edge._private.data.target;

	        if( srcId === eleId && tgtId !== eleId ){
	          oEles.push( edge );
	          oEles.push( edge.target()[0] );
	        }
	      }
	    }

	    return this.spawn( oEles, { unique: true } ).filter( selector );
	  },

	  // aka DAG descendants
	  successors: function( selector ){
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};

	    for(;;){
	      var outgoers = eles.outgoers();

	      if( outgoers.length === 0 ){ break; } // done if no outgoers left

	      var newOutgoers = false;
	      for( var i = 0; i < outgoers.length; i++ ){
	        var outgoer = outgoers[i];
	        var outgoerId = outgoer.id();

	        if( !sElesIds[ outgoerId ] ){
	          sElesIds[ outgoerId ] = true;
	          sEles.push( outgoer );
	          newOutgoers = true;
	        }
	      }

	      if( !newOutgoers ){ break; } // done if touched all outgoers already

	      eles = outgoers;
	    }

	    return this.spawn( sEles, { unique: true } ).filter( selector );
	  },

	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: function( selector ){
	    var eles = this;
	    var oEles = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var eleId = ele.id();

	      if( !ele.isNode() ){ continue; }

	      var edges = ele._private.edges;
	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        var srcId = edge._private.data.source;
	        var tgtId = edge._private.data.target;

	        if( tgtId === eleId && srcId !== eleId ){
	          oEles.push( edge );
	          oEles.push( edge.source()[0] );
	        }
	      }
	    }

	    return this.spawn( oEles, { unique: true } ).filter( selector );
	  },

	  // aka DAG ancestors
	  predecessors: function( selector ){
	    var eles = this;
	    var pEles = [];
	    var pElesIds = {};

	    for(;;){
	      var incomers = eles.incomers();

	      if( incomers.length === 0 ){ break; } // done if no incomers left

	      var newIncomers = false;
	      for( var i = 0; i < incomers.length; i++ ){
	        var incomer = incomers[i];
	        var incomerId = incomer.id();

	        if( !pElesIds[ incomerId ] ){
	          pElesIds[ incomerId ] = true;
	          pEles.push( incomer );
	          newIncomers = true;
	        }
	      }

	      if( !newIncomers ){ break; } // done if touched all incomers already

	      eles = incomers;
	    }

	    return this.spawn( pEles, { unique: true } ).filter( selector );
	  }
	});


	// Neighbourhood functions
	//////////////////////////

	util.extend(elesfn, {
	  neighborhood: function(selector){
	    var elements = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){ // for all nodes
	      var node = nodes[i];
	      var connectedEdges = node.connectedEdges();

	      // for each connected edge, add the edge and the other node
	      for( var j = 0; j < connectedEdges.length; j++ ){
	        var edge = connectedEdges[j];
	        var src = edge._private.source;
	        var tgt = edge._private.target;
	        var otherNode = node === src ? tgt : src;

	        // need check in case of loop
	        if( otherNode.length > 0 ){
	          elements.push( otherNode[0] ); // add node 1 hop away
	        }

	        // add connected edge
	        elements.push( edge[0] );
	      }

	    }

	    return ( this.spawn( elements, { unique: true } ) ).filter( selector );
	  },

	  closedNeighborhood: function(selector){
	    return this.neighborhood().add( this ).filter( selector );
	  },

	  openNeighborhood: function(selector){
	    return this.neighborhood( selector );
	  }
	});

	// aliases
	elesfn.neighbourhood = elesfn.neighborhood;
	elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
	elesfn.openNeighbourhood = elesfn.openNeighborhood;

	// Edge functions
	/////////////////

	util.extend(elesfn, {
	  source: function( selector ){
	    var ele = this[0];
	    var src;

	    if( ele ){
	      src = ele._private.source;
	    }

	    return src && selector ? src.filter( selector ) : src;
	  },

	  target: function( selector ){
	    var ele = this[0];
	    var tgt;

	    if( ele ){
	      tgt = ele._private.target;
	    }

	    return tgt && selector ? tgt.filter( selector ) : tgt;
	  },

	  sources: defineSourceFunction({
	    attr: 'source'
	  }),

	  targets: defineSourceFunction({
	    attr: 'target'
	  })
	});

	function defineSourceFunction( params ){
	  return function( selector ){
	    var sources = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var src = ele._private[ params.attr ];

	      if( src ){
	        sources.push( src );
	      }
	    }

	    return this.spawn( sources, { unique: true } ).filter( selector );
	  };
	}

	util.extend(elesfn, {
	  edgesWith: defineEdgesWithFunction(),

	  edgesTo: defineEdgesWithFunction({
	    thisIs: 'source'
	  })
	});

	function defineEdgesWithFunction( params ){

	  return function edgesWithImpl( otherNodes ){
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {};

	    // get elements if a selector is specified
	    if( is.string(otherNodes) ){
	      otherNodes = cy.$( otherNodes );
	    }

	    var thisIds = this._private.ids;
	    var otherIds = otherNodes._private.ids;

	    for( var h = 0; h < otherNodes.length; h++ ){
	      var edges = otherNodes[h]._private.edges;

	      for( var i = 0; i < edges.length; i++ ){
	        var edge = edges[i];
	        var edgeData = edge._private.data;
	        var thisToOther = thisIds[ edgeData.source ] && otherIds[ edgeData.target ];
	        var otherToThis = otherIds[ edgeData.source ] && thisIds[ edgeData.target ];
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;

	        if( !edgeConnectsThisAndOther ){ continue; }

	        if( p.thisIs ){
	          if( p.thisIs === 'source' && !thisToOther ){ continue; }

	          if( p.thisIs === 'target' && !otherToThis ){ continue; }
	        }

	        elements.push( edge );
	      }
	    }

	    return this.spawn( elements, { unique: true } );
	  };
	}

	util.extend(elesfn, {
	  connectedEdges: function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var node = eles[i];
	      if( !node.isNode() ){ continue; }

	      var edges = node._private.edges;

	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        retEles.push( edge );
	      }
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  },

	  connectedNodes: function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var edge = eles[i];
	      if( !edge.isEdge() ){ continue; }

	      retEles.push( edge.source()[0] );
	      retEles.push( edge.target()[0] );
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  },

	  parallelEdges: defineParallelEdgesFunction(),

	  codirectedEdges: defineParallelEdgesFunction({
	    codirected: true
	  })
	});

	function defineParallelEdgesFunction(params){
	  var defaults = {
	    codirected: false
	  };
	  params = util.extend({}, defaults, params);

	  return function( selector ){
	    var elements = [];
	    var edges = this.edges();
	    var p = params;

	    // look at all the edges in the collection
	    for( var i = 0; i < edges.length; i++ ){
	      var edge1 = edges[i];
	      var src1 = edge1.source()[0];
	      var srcid1 = src1.id();
	      var tgt1 = edge1.target()[0];
	      var tgtid1 = tgt1.id();
	      var srcEdges1 = src1._private.edges;

	      // look at edges connected to the src node of this edge
	      for( var j = 0; j < srcEdges1.length; j++ ){
	        var edge2 = srcEdges1[j];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;

	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

	        if( (p.codirected && codirected) || (!p.codirected && (codirected || oppdirected)) ){
	          elements.push( edge2 );
	        }
	      }
	    }

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  };

	}

	// Misc functions
	/////////////////

	util.extend(elesfn, {
	  components: function(){
	    var cy = this.cy();
	    var visited = cy.collection();
	    var unvisited = this.nodes();
	    var components = [];

	    var visitInComponent = function( node, component ){
	      visited.merge( node );
	      unvisited.unmerge( node );
	      component.merge( node );
	    };

	    do {
	      var component = cy.collection();
	      components.push( component );

	      var root = unvisited[0];
	      visitInComponent( root, component );

	      this.bfs({
	        directed: false,
	        roots: root,
	        visit: function( i, depth, v, e, u ){
	          visitInComponent( v, component );
	        }
	      });

	    } while( unvisited.length > 0 );

	    return components.map(function( component ){
	      var connectedEdges = component.connectedEdges().stdFilter(function( edge ){
	        return component.anySame( edge.source() ) && component.anySame( edge.target() );
	      });

	      return component.union( connectedEdges );
	    });
	  }
	});

	module.exports = elesfn;

	},{"../is":77,"../util":94}],29:[function(_dereq_,module,exports){
	'use strict';

	var zIndexSort = function( a, b ){
	  var cy = a.cy();
	  var a_p = a._private;
	  var b_p = b._private;
	  var zDiff = a_p.style['z-index'].value - b_p.style['z-index'].value;
	  var depthA = 0;
	  var depthB = 0;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var aIsNode = a_p.group === 'nodes';
	  var aIsEdge = a_p.group === 'edges';
	  var bIsNode = b_p.group === 'nodes';
	  var bIsEdge = b_p.group === 'edges';

	  // no need to calculate element depth if there is no compound node
	  if( hasCompoundNodes ){
	    depthA = a.zDepth();
	    depthB = b.zDepth();
	  }

	  var depthDiff = depthA - depthB;
	  var sameDepth = depthDiff === 0;

	  if( sameDepth ){

	    if( aIsNode && bIsEdge ){
	      return 1; // 'a' is a node, it should be drawn later

	    } else if( aIsEdge && bIsNode ){
	      return -1; // 'a' is an edge, it should be drawn first

	    } else { // both nodes or both edges
	      if( zDiff === 0 ){ // same z-index => compare indices in the core (order added to graph w/ last on top)
	        return a_p.index - b_p.index;
	      } else {
	        return zDiff;
	      }
	    }

	  // elements on different level
	  } else {
	    return depthDiff; // deeper element should be drawn later
	  }

	};

	module.exports = zIndexSort;

	},{}],30:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var Collection = _dereq_('../collection');
	var Element = _dereq_('../collection/element');
	var window = _dereq_('../window');
	var document = window ? window.document : null;
	var NullRenderer = _dereq_('../extensions/renderer/null');

	var corefn = {
	  add: function(opts){

	    var elements;
	    var cy = this;

	    // add the elements
	    if( is.elementOrCollection(opts) ){
	      var eles = opts;

	      if( eles._private.cy === cy ){ // same instance => just restore
	        elements = eles.restore();

	      } else { // otherwise, copy from json
	        var jsons = [];

	        for( var i = 0; i < eles.length; i++ ){
	          var ele = eles[i];
	          jsons.push( ele.json() );
	        }

	        elements = new Collection( cy, jsons );
	      }
	    }

	    // specify an array of options
	    else if( is.array(opts) ){
	      var jsons = opts;

	      elements = new Collection(cy, jsons);
	    }

	    // specify via opts.nodes and opts.edges
	    else if( is.plainObject(opts) && (is.array(opts.nodes) || is.array(opts.edges)) ){
	      var elesByGroup = opts;
	      var jsons = [];

	      var grs = ['nodes', 'edges'];
	      for( var i = 0, il = grs.length; i < il; i++ ){
	        var group = grs[i];
	        var elesArray = elesByGroup[group];

	        if( is.array(elesArray) ){

	          for( var j = 0, jl = elesArray.length; j < jl; j++ ){
	            var json = util.extend( { group: group }, elesArray[j] );

	            jsons.push( json );
	          }
	        }
	      }

	      elements = new Collection(cy, jsons);
	    }

	    // specify options for one element
	    else {
	      var json = opts;
	      elements = (new Element( cy, json )).collection();
	    }

	    return elements;
	  },

	  remove: function(collection){
	    if( is.elementOrCollection(collection) ){
	      collection = collection;
	    } else if( is.string(collection) ){
	      var selector = collection;
	      collection = this.$( selector );
	    }

	    return collection.remove();
	  },

	  load: function(elements, onload, ondone){
	    var cy = this;

	    cy.notifications(false);

	    // remove old elements
	    var oldEles = cy.elements();
	    if( oldEles.length > 0 ){
	      oldEles.remove();
	    }

	    if( elements != null ){
	      if( is.plainObject(elements) || is.array(elements) ){
	        cy.add( elements );
	      }
	    }

	    cy.one('layoutready', function(e){
	      cy.notifications(true);
	      cy.trigger(e); // we missed this event by turning notifications off, so pass it on

	      cy.notify({
	        type: 'load',
	        collection: cy.elements()
	      });

	      cy.one('load', onload);
	      cy.trigger('load');
	    }).one('layoutstop', function(){
	      cy.one('done', ondone);
	      cy.trigger('done');
	    });

	    var layoutOpts = util.extend({}, cy._private.options.layout);
	    layoutOpts.eles = cy.$();

	    cy.layout( layoutOpts );

	    return this;
	  }
	};

	module.exports = corefn;

	},{"../collection":23,"../collection/element":19,"../extensions/renderer/null":73,"../is":77,"../util":94,"../window":100}],31:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var corefn = ({

	  // pull in animation functions
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop(),

	  addToAnimationPool: function( eles ){
	    var cy = this;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    cy._private.aniEles.merge( eles );
	  },

	  stopAnimationLoop: function(){
	    this._private.animationsRunning = false;
	  },

	  startAnimationLoop: function(){
	    var cy = this;

	    cy._private.animationsRunning = true;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop

	    function globalAnimationStep(){
	      if( !cy._private.animationsRunning ){ return; }

	      util.requestAnimationFrame(function(now){
	        handleElements(now);
	        globalAnimationStep();
	      });
	    }

	    globalAnimationStep(); // first call

	    function handleElements( now ){
	      var eles = cy._private.aniEles;
	      var doneEles = [];

	      function handleElement( ele, isCore ){
	        var _p = ele._private;
	        var current = _p.animation.current;
	        var queue = _p.animation.queue;
	        var ranAnis = false;

	        // if nothing currently animating, get something from the queue
	        if( current.length === 0 ){
	          var next = queue.shift();

	          if( next ){
	            current.push( next );
	          }
	        }

	        var callbacks = function( callbacks ){
	          for( var j = callbacks.length - 1; j >= 0; j-- ){
	            var cb = callbacks[j];

	            cb();
	          }

	          callbacks.splice( 0, callbacks.length );
	        };

	        // step and remove if done
	        for( var i = current.length - 1; i >= 0; i-- ){
	          var ani = current[i];
	          var ani_p = ani._private;

	          if( ani_p.stopped ){
	            current.splice( i, 1 );

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.frames );

	            continue;
	          }

	          if( !ani_p.playing && !ani_p.applying ){ continue; }

	          // an apply() while playing shouldn't do anything
	          if( ani_p.playing && ani_p.applying ){
	            ani_p.applying = false;
	          }

	          if( !ani_p.started ){
	            startAnimation( ele, ani, now );
	          }

	          step( ele, ani, now, isCore );

	          if( ani_p.applying ){
	            ani_p.applying = false;
	          }

	          callbacks( ani_p.frames );

	          if( ani.completed() ){
	            current.splice(i, 1);

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.completes );
	          }

	          ranAnis = true;
	        }

	        if( !isCore && current.length === 0 && queue.length === 0 ){
	          doneEles.push( ele );
	        }

	        return ranAnis;
	      } // handleElement

	      // handle all eles
	      var ranEleAni = false;
	      for( var e = 0; e < eles.length; e++ ){
	        var ele = eles[e];
	        var handledThisEle = handleElement( ele );

	        ranEleAni = ranEleAni || handledThisEle;
	      } // each element

	      var ranCoreAni = handleElement( cy, true );

	      // notify renderer
	      if( ranEleAni || ranCoreAni ){
	        var toNotify;

	        if( eles.length > 0 ){
	          var updatedEles = eles.updateCompoundBounds();
	          toNotify = updatedEles.length > 0 ? eles.add( updatedEles ) : eles;
	        }

	        cy.notify({
	          type: 'draw',
	          collection: toNotify
	        });
	      }

	      // remove elements from list of currently animating if its queues are empty
	      eles.unmerge( doneEles );

	    } // handleElements

	    function startAnimation( self, ani, now ){
	      var isCore = is.core( self );
	      var isEles = !isCore;
	      var ele = self;
	      var style = cy._private.style;
	      var ani_p = ani._private;

	      if( isEles ){
	        var pos = ele._private.position;

	        ani_p.startPosition = ani_p.startPosition || {
	          x: pos.x,
	          y: pos.y
	        };

	        ani_p.startStyle = ani_p.startStyle || style.getValueStyle( ele );
	      }

	      if( isCore ){
	        var pan = cy._private.pan;

	        ani_p.startPan = ani_p.startPan || {
	          x: pan.x,
	          y: pan.y
	        };

	        ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
	      }

	      ani_p.started = true;
	      ani_p.startTime = now - ani_p.progress * ani_p.duration;
	    }

	    function step( self, ani, now, isCore ){
	      var style = cy._private.style;
	      var isEles = !isCore;
	      var _p = self._private;
	      var ani_p = ani._private;
	      var pEasing = ani_p.easing;
	      var startTime = ani_p.startTime;

	      if( !ani_p.easingImpl ){

	        if( pEasing == null ){ // use default
	          ani_p.easingImpl = easings['linear'];

	        } else { // then define w/ name
	          var easingVals;

	          if( is.string( pEasing ) ){
	            var easingProp = style.parse('transition-timing-function', pEasing);

	            easingVals = easingProp.value;

	          } else { // then assume preparsed array
	            easingVals = pEasing;
	          }

	          var name, args;

	          if( is.string( easingVals ) ){
	            name = easingVals;
	            args = [];
	          } else {
	            name = easingVals[1];
	            args = easingVals.slice(2).map(function(n){ return +n; });
	          }

	          if( args.length > 0 ){ // create with args
	            if( name === 'spring' ){
	              args.push( ani_p.duration ); // need duration to generate spring
	            }

	            ani_p.easingImpl = easings[ name ].apply( null, args );
	          } else { // static impl by name
	            ani_p.easingImpl = easings[ name ];
	          }
	        }

	      }

	      var easing = ani_p.easingImpl;
	      var percent;

	      if( ani_p.duration === 0 ){
	        percent = 1;
	      } else {
	        percent = (now - startTime) / ani_p.duration;
	      }

	      if( ani_p.applying ){
	        percent = ani_p.progress;
	      }

	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      if( ani_p.delay == null ){ // then update

	        var startPos = ani_p.startPosition;
	        var endPos = ani_p.position;
	        var pos = _p.position;
	        if( endPos && isEles ){
	          if( valid( startPos.x, endPos.x ) ){
	            pos.x = ease( startPos.x, endPos.x, percent, easing );
	          }

	          if( valid( startPos.y, endPos.y ) ){
	            pos.y = ease( startPos.y, endPos.y, percent, easing );
	          }
	        }

	        var startPan = ani_p.startPan;
	        var endPan = ani_p.pan;
	        var pan = _p.pan;
	        var animatingPan = endPan != null && isCore;
	        if( animatingPan ){
	          if( valid( startPan.x, endPan.x ) ){
	            pan.x = ease( startPan.x, endPan.x, percent, easing );
	          }

	          if( valid( startPan.y, endPan.y ) ){
	            pan.y = ease( startPan.y, endPan.y, percent, easing );
	          }

	          self.trigger('pan');
	        }

	        var startZoom = ani_p.startZoom;
	        var endZoom = ani_p.zoom;
	        var animatingZoom = endZoom != null && isCore;
	        if( animatingZoom ){
	          if( valid( startZoom, endZoom ) ){
	            _p.zoom = ease( startZoom, endZoom, percent, easing );
	          }

	          self.trigger('zoom');
	        }

	        if( animatingPan || animatingZoom ){
	          self.trigger('viewport');
	        }

	        var props = ani_p.style;
	        if( props && isEles ){

	          for( var i = 0; i < props.length; i++ ){
	            var prop = props[i];
	            var name = prop.name;
	            var end = prop;

	            var start = ani_p.startStyle[ name ];
	            var easedVal = ease( start, end, percent, easing );

	            style.overrideBypass( self, name, easedVal );
	          } // for props

	        } // if

	      }

	      if( is.fn(ani_p.step) ){
	        ani_p.step.apply( self, [ now ] );
	      }

	      ani_p.progress = percent;

	      return percent;
	    }

	    function valid(start, end){
	      if( start == null || end == null ){
	        return false;
	      }

	      if( is.number(start) && is.number(end) ){
	        return true;
	      } else if( (start) && (end) ){
	        return true;
	      }

	      return false;
	    }

	    // assumes p0 = 0, p3 = 1
	    function evalCubicBezier( p1, p2, t ){
	      var one_t = 1 - t;
	      var tsq = t*t;

	      return ( 3 * one_t * one_t * t * p1 ) + ( 3 * one_t * tsq * p2 ) + tsq * t;
	    }

	    function cubicBezier( p1, p2 ){
	      return function( start, end, percent ){
	        return start + (end - start) * evalCubicBezier( p1, p2, percent );
	      };
	    }

	    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	    var generateSpringRK4 = (function () {
	        function springAccelerationForState (state) {
	            return (-state.tension * state.x) - (state.friction * state.v);
	        }

	        function springEvaluateStateWithDerivative (initialState, dt, derivative) {
	            var state = {
	                x: initialState.x + derivative.dx * dt,
	                v: initialState.v + derivative.dv * dt,
	                tension: initialState.tension,
	                friction: initialState.friction
	            };

	            return { dx: state.v, dv: springAccelerationForState(state) };
	        }

	        function springIntegrateState (state, dt) {
	            var a = {
	                    dx: state.v,
	                    dv: springAccelerationForState(state)
	                },
	                b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	                c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	                d = springEvaluateStateWithDerivative(state, dt, c),
	                dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	                dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

	            state.x = state.x + dxdt * dt;
	            state.v = state.v + dvdt * dt;

	            return state;
	        }

	        return function springRK4Factory (tension, friction, duration) {

	            var initState = {
	                    x: -1,
	                    v: 0,
	                    tension: null,
	                    friction: null
	                },
	                path = [0],
	                time_lapsed = 0,
	                tolerance = 1 / 10000,
	                DT = 16 / 1000,
	                have_duration, dt, last_state;

	            tension = parseFloat(tension) || 500;
	            friction = parseFloat(friction) || 20;
	            duration = duration || null;

	            initState.tension = tension;
	            initState.friction = friction;

	            have_duration = duration !== null;

	            /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	            if (have_duration) {
	                /* Run the simulation without a duration. */
	                time_lapsed = springRK4Factory(tension, friction);
	                /* Compute the adjusted time delta. */
	                dt = time_lapsed / duration * DT;
	            } else {
	                dt = DT;
	            }

	            while (true) {
	                /* Next/step function .*/
	                last_state = springIntegrateState(last_state || initState, dt);
	                /* Store the position. */
	                path.push(1 + last_state.x);
	                time_lapsed += 16;
	                /* If the change threshold is reached, break. */
	                if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	                    break;
	                }
	            }

	            /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	               computed path and returns a snapshot of the position according to a given percentComplete. */
	            return !have_duration ? time_lapsed : function(percentComplete) { return path[ (percentComplete * (path.length - 1)) | 0 ]; };
	        };
	    }());

	    var easings = {
	      'linear': function( start, end, percent ){
	        return start + (end - start) * percent;
	      },

	      // default easings
	      'ease': cubicBezier( 0.25, 0.1, 0.25, 1 ),
	      'ease-in': cubicBezier( 0.42, 0, 1, 1 ),
	      'ease-out': cubicBezier( 0, 0, 0.58, 1 ),
	      'ease-in-out': cubicBezier( 0.42, 0, 0.58, 1 ),

	      // sine
	      'ease-in-sine': cubicBezier( 0.47, 0, 0.745, 0.715 ),
	      'ease-out-sine': cubicBezier( 0.39, 0.575, 0.565, 1 ),
	      'ease-in-out-sine': cubicBezier( 0.445, 0.05, 0.55, 0.95 ),

	      // quad
	      'ease-in-quad': cubicBezier( 0.55, 0.085, 0.68, 0.53 ),
	      'ease-out-quad': cubicBezier( 0.25, 0.46, 0.45, 0.94 ),
	      'ease-in-out-quad': cubicBezier( 0.455, 0.03, 0.515, 0.955 ),

	      // cubic
	      'ease-in-cubic': cubicBezier( 0.55, 0.055, 0.675, 0.19 ),
	      'ease-out-cubic': cubicBezier( 0.215, 0.61, 0.355, 1 ),
	      'ease-in-out-cubic': cubicBezier( 0.645, 0.045, 0.355, 1 ),

	      // quart
	      'ease-in-quart': cubicBezier( 0.895, 0.03, 0.685, 0.22 ),
	      'ease-out-quart': cubicBezier( 0.165, 0.84, 0.44, 1 ),
	      'ease-in-out-quart': cubicBezier( 0.77, 0, 0.175, 1 ),

	      // quint
	      'ease-in-quint': cubicBezier( 0.755, 0.05, 0.855, 0.06 ),
	      'ease-out-quint': cubicBezier( 0.23, 1, 0.32, 1 ),
	      'ease-in-out-quint': cubicBezier( 0.86, 0, 0.07, 1 ),

	      // expo
	      'ease-in-expo': cubicBezier( 0.95, 0.05, 0.795, 0.035 ),
	      'ease-out-expo': cubicBezier( 0.19, 1, 0.22, 1 ),
	      'ease-in-out-expo': cubicBezier( 1, 0, 0, 1 ),

	      // circ
	      'ease-in-circ': cubicBezier( 0.6, 0.04, 0.98, 0.335 ),
	      'ease-out-circ': cubicBezier( 0.075, 0.82, 0.165, 1 ),
	      'ease-in-out-circ': cubicBezier( 0.785, 0.135, 0.15, 0.86 ),


	      // user param easings...

	      'spring': function( tension, friction, duration ){
	        var spring = generateSpringRK4( tension, friction, duration );

	        return function( start, end, percent ){
	          return start + (end - start) * spring( percent );
	        };
	      },

	      'cubic-bezier': function( x1, y1, x2, y2 ){
	        return cubicBezier( x1, y1, x2, y2 );
	      }
	    };

	    function ease( startProp, endProp, percent, easingFn ){
	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      var start, end;

	      if( startProp.pfValue != null || startProp.value != null ){
	        start = startProp.pfValue != null ? startProp.pfValue : startProp.value;
	      } else {
	        start = startProp;
	      }

	      if( endProp.pfValue != null || endProp.value != null ){
	        end = endProp.pfValue != null ? endProp.pfValue : endProp.value;
	      } else {
	        end = endProp;
	      }

	      if( is.number(start) && is.number(end) ){
	        return easingFn( start, end, percent );

	      } else if( is.array(start) && is.array(end) ){
	        var easedArr = [];

	        for( var i = 0; i < end.length; i++ ){
	          var si = start[i];
	          var ei = end[i];

	          if( si != null && ei != null ){
	            var val = easingFn(si, ei, percent);

	            if( startProp.roundValue ){ val = Math.round( val ); }

	            easedArr.push( val );
	          } else {
	            easedArr.push( ei );
	          }
	        }

	        return easedArr;
	      }

	      return undefined;
	    }

	  }

	});

	module.exports = corefn;

	},{"../define":41,"../is":77,"../util":94}],32:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var corefn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on({ unbindSelfOnTrigger: true }),
	  once: define.on({ unbindAllBindersOnTrigger: true }),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger() // .trigger( events [, extraParams] )
	});

	define.eventAliasesOn( corefn );

	module.exports = corefn;

	},{"../define":41}],33:[function(_dereq_,module,exports){
	'use strict';

	var corefn = ({

	  png: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    return renderer.png( options );
	  },

	  jpg: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    options.bg = options.bg || '#fff';

	    return renderer.jpg( options );
	  }

	});

	corefn.jpeg = corefn.jpg;

	module.exports = corefn;

	},{}],34:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');
	var util = _dereq_('../util');
	var Collection = _dereq_('../collection');
	var is = _dereq_('../is');
	var Promise = _dereq_('../promise');
	var define = _dereq_('../define');

	var Core = function( opts ){
	  if( !(this instanceof Core) ){
	    return new Core(opts);
	  }
	  var cy = this;

	  opts = util.extend({}, opts);

	  var container = opts.container;

	  // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })
	  if( container && !is.htmlElement( container ) && is.htmlElement( container[0] ) ){
	    container = container[0];
	  }

	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
	  reg = reg || {};

	  if( reg && reg.cy ){
	    reg.cy.destroy();

	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];

	  if( container ){ container._cyreg = reg; } // make sure container assoc'd reg points to this cy
	  reg.cy = cy;

	  var head = window !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = util.extend( { name: head ? 'grid' : 'null' }, options.layout );
	  options.renderer = util.extend( { name: head ? 'canvas' : 'null' }, options.renderer );

	  var defVal = function( def, val, altVal ){
	    if( val !== undefined ){
	      return val;
	    } else if( altVal !== undefined ){
	      return altVal;
	    } else {
	      return def;
	    }
	  };

	  var _p = this._private = {
	    container: container, // html dom ele container
	    ready: false, // whether ready has been triggered
	    initrender: false, // has initrender has been triggered
	    options: options, // cached options
	    elements: [], // array of elements
	    id2index: {}, // element id => index in elements array
	    listeners: [], // list of listeners
	    onRenders: [], // rendering listeners
	    aniEles: Collection(this), // elements being animated
	    scratch: {}, // scratch object for core
	    layout: null,
	    renderer: null,
	    notificationsEnabled: true, // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal(true, options.zoomingEnabled),
	    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
	    panningEnabled: defVal(true, options.panningEnabled),
	    userPanningEnabled: defVal(true, options.userPanningEnabled),
	    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
	    autolock: defVal(false, options.autolock, options.autolockNodes),
	    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
	    autounselectify: defVal(false, options.autounselectify),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: is.number(options.zoom) ? options.zoom : 1,
	    pan: {
	      x: is.plainObject(options.pan) && is.number(options.pan.x) ? options.pan.x : 0,
	      y: is.plainObject(options.pan) && is.number(options.pan.y) ? options.pan.y : 0
	    },
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false,
	    deferredExecQueue: []
	  };

	  // set selection type
	  var selType = options.selectionType;
	  if( selType === undefined || (selType !== 'additive' && selType !== 'single') ){
	    // then set default

	    _p.selectionType = 'single';
	  } else {
	    _p.selectionType = selType;
	  }

	  // init zoom bounds
	  if( is.number(options.minZoom) && is.number(options.maxZoom) && options.minZoom < options.maxZoom ){
	    _p.minZoom = options.minZoom;
	    _p.maxZoom = options.maxZoom;
	  } else if( is.number(options.minZoom) && options.maxZoom === undefined ){
	    _p.minZoom = options.minZoom;
	  } else if( is.number(options.maxZoom) && options.minZoom === undefined ){
	    _p.maxZoom = options.maxZoom;
	  }

	  var loadExtData = function( next ){
	    var anyIsPromise = false;

	    for( var i = 0; i < extData.length; i++ ){
	      var datum = extData[i];

	      if( is.promise(datum) ){
	        anyIsPromise = true;
	        break;
	      }
	    }

	    if( anyIsPromise ){
	      return Promise.all( extData ).then( next ); // load all data asynchronously, then exec rest of init
	    } else {
	      next( extData ); // exec synchronously for convenience
	    }
	  };

	  // create the renderer
	  cy.initRenderer( util.extend({
	    hideEdgesOnViewport: options.hideEdgesOnViewport,
	    hideLabelsOnViewport: options.hideLabelsOnViewport,
	    textureOnViewport: options.textureOnViewport,
	    wheelSensitivity: is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
	    motionBlur: options.motionBlur === undefined ? true : options.motionBlur, // on by default
	    motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
	    pixelRatio: is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
	    desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
	    touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
	  }, options.renderer) );

	  var extData = [ options.style, options.elements ];
	  loadExtData(function( thens ){
	    var initStyle = thens[0];
	    var initEles = thens[1];

	    // init style
	    if( _p.styleEnabled ){
	      cy.setStyle( initStyle );
	    }

	    // trigger the passed function for the `initrender` event
	    if( options.initrender ){
	      cy.on('initrender', options.initrender);
	      cy.on('initrender', function(){
	        _p.initrender = true;
	      });
	    }

	    // initial load
	    cy.load(initEles, function(){ // onready
	      cy.startAnimationLoop();
	      _p.ready = true;

	      // if a ready callback is specified as an option, the bind it
	      if( is.fn( options.ready ) ){
	        cy.on('ready', options.ready);
	      }

	      // bind all the ready handlers registered before creating this instance
	      for( var i = 0; i < readies.length; i++ ){
	        var fn = readies[i];
	        cy.on('ready', fn);
	      }
	      if( reg ){ reg.readies = []; } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

	      cy.trigger('ready');
	    }, options.done);

	  });
	};

	var corefn = Core.prototype; // short alias

	util.extend(corefn, {
	  instanceString: function(){
	    return 'core';
	  },

	  isReady: function(){
	    return this._private.ready;
	  },

	  ready: function( fn ){
	    if( this.isReady() ){
	      this.trigger('ready', [], fn); // just calls fn as though triggered via ready event
	    } else {
	      this.on('ready', fn);
	    }

	    return this;
	  },

	  initrender: function(){
	    return this._private.initrender;
	  },

	  destroy: function(){
	    var cy = this;

	    cy.stopAnimationLoop();

	    cy.notify({ type: 'destroy' }); // destroy the renderer

	    var domEle = cy.container();
	    if( domEle ){
	      domEle._cyreg = null;

	      while( domEle.childNodes.length > 0 ){
	        domEle.removeChild( domEle.childNodes[0] );
	      }
	    }

	    return cy;
	  },

	  getElementById: function( id ){
	    var index = this._private.id2index[ id ];
	    if( index !== undefined ){
	      return this._private.elements[ index ];
	    }

	    // worst case, return an empty collection
	    return Collection( this );
	  },

	  selectionType: function(){
	    return this._private.selectionType;
	  },

	  hasCompoundNodes: function(){
	    return this._private.hasCompoundNodes;
	  },

	  styleEnabled: function(){
	    return this._private.styleEnabled;
	  },

	  addToPool: function( eles ){
	    var elements = this._private.elements;
	    var id2index = this._private.id2index;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      var id = ele._private.data.id;
	      var index = id2index[ id ];
	      var alreadyInPool = index !== undefined;

	      if( !alreadyInPool ){
	        index = elements.length;
	        elements.push( ele );
	        id2index[ id ] = index;
	        ele._private.index = index;
	      }
	    }

	    return this; // chaining
	  },

	  removeFromPool: function( eles ){
	    var elements = this._private.elements;
	    var id2index = this._private.id2index;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      var id = ele._private.data.id;
	      var index = id2index[ id ];
	      var inPool = index !== undefined;

	      if( inPool ){
	        this._private.id2index[ id ] = undefined;
	        elements.splice(index, 1);

	        // adjust the index of all elements past this index
	        for( var j = index; j < elements.length; j++ ){
	          var jid = elements[j]._private.data.id;
	          id2index[ jid ]--;
	          elements[j]._private.index--;
	        }
	      }
	    }
	  },

	  container: function(){
	    return this._private.container;
	  },

	  options: function(){
	    return util.copy( this._private.options );
	  },

	  json: function( obj ){
	    var cy = this;
	    var _p = cy._private;

	    if( is.plainObject(obj) ){ // set

	      cy.startBatch();

	      if( obj.elements ){
	        var idInJson = {};

	        var updateEles = function( jsons, gr ){
	          for( var i = 0; i < jsons.length; i++ ){
	            var json = jsons[i];
	            var id = json.data.id;
	            var ele = cy.getElementById( id );

	            idInJson[ id ] = true;

	            if( ele.length !== 0 ){ // existing element should be updated
	              ele.json( json );
	            } else { // otherwise should be added
	              if( gr ){
	                cy.add( util.extend({ group: gr }, json) );
	              } else {
	                cy.add( json );
	              }
	            }
	          }
	        };

	        if( is.array(obj.elements) ){ // elements: []
	          updateEles( obj.elements );

	        } else { // elements: { nodes: [], edges: [] }
	          var grs = ['nodes', 'edges'];
	          for( var i = 0; i < grs.length; i++ ){
	            var gr = grs[i];
	            var elements = obj.elements[ gr ];

	            if( is.array(elements) ){
	              updateEles( elements, gr );
	            }
	          }
	        }

	        // elements not specified in json should be removed
	        cy.elements().stdFilter(function( ele ){
	          return !idInJson[ ele.id() ];
	        }).remove();
	      }

	      if( obj.style ){
	        cy.style( obj.style );
	      }

	      if( obj.zoom != null && obj.zoom !== _p.zoom ){
	        cy.zoom( obj.zoom );
	      }

	      if( obj.pan ){
	        if( obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y ){
	          cy.pan( obj.pan );
	        }
	      }

	      var fields = [
	        'minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled',
	        'panningEnabled', 'userPanningEnabled',
	        'boxSelectionEnabled',
	        'autolock', 'autoungrabify', 'autounselectify'
	      ];

	      for( var i = 0; i < fields.length; i++ ){
	        var f = fields[i];

	        if( obj[f] != null ){
	          cy[f]( obj[f] );
	        }
	      }

	      cy.endBatch();

	      return this; // chaining
	    } else if( obj === undefined ){ // get
	      var json = {};

	      json.elements = {};
	      cy.elements().each(function(i, ele){
	        var group = ele.group();

	        if( !json.elements[group] ){
	          json.elements[group] = [];
	        }

	        json.elements[group].push( ele.json() );
	      });

	      if( this._private.styleEnabled ){
	        json.style = cy.style().json();
	      }

	      json.zoomingEnabled = cy._private.zoomingEnabled;
	      json.userZoomingEnabled = cy._private.userZoomingEnabled;
	      json.zoom = cy._private.zoom;
	      json.minZoom = cy._private.minZoom;
	      json.maxZoom = cy._private.maxZoom;
	      json.panningEnabled = cy._private.panningEnabled;
	      json.userPanningEnabled = cy._private.userPanningEnabled;
	      json.pan = util.copy( cy._private.pan );
	      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
	      json.renderer = util.copy( cy._private.options.renderer );
	      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
	      json.hideLabelsOnViewport = cy._private.options.hideLabelsOnViewport;
	      json.textureOnViewport = cy._private.options.textureOnViewport;
	      json.wheelSensitivity = cy._private.options.wheelSensitivity;
	      json.motionBlur = cy._private.options.motionBlur;

	      return json;
	    }
	  },

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  })

	});

	[
	  _dereq_('./add-remove'),
	  _dereq_('./animation'),
	  _dereq_('./events'),
	  _dereq_('./export'),
	  _dereq_('./layout'),
	  _dereq_('./notification'),
	  _dereq_('./renderer'),
	  _dereq_('./search'),
	  _dereq_('./style'),
	  _dereq_('./viewport')
	].forEach(function( props ){
	  util.extend( corefn, props );
	});

	module.exports = Core;

	},{"../collection":23,"../define":41,"../is":77,"../promise":80,"../util":94,"../window":100,"./add-remove":30,"./animation":31,"./events":32,"./export":33,"./layout":35,"./notification":36,"./renderer":37,"./search":38,"./style":39,"./viewport":40}],35:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var corefn = ({

	  layout: function( params ){
	    var layout = this._private.prevLayout = ( params == null ? this._private.prevLayout : this.makeLayout( params ) );

	    layout.run();

	    return this; // chaining
	  },

	  makeLayout: function( options ){
	    var cy = this;

	    if( options == null ){
	      util.error('Layout options must be specified to make a layout');
	      return;
	    }

	    if( options.name == null ){
	      util.error('A `name` must be specified to make a layout');
	      return;
	    }

	    var name = options.name;
	    var Layout = cy.extension('layout', name);

	    if( Layout == null ){
	      util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');
	      return;
	    }

	    var eles;
	    if( is.string( options.eles ) ){
	      eles = cy.$( options.eles );
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }

	    var layout = new Layout( util.extend({}, options, {
	      cy: cy,
	      eles: eles
	    }) );

	    return layout;
	  }

	});

	corefn.createLayout = corefn.makeLayout;

	module.exports = corefn;

	},{"../is":77,"../util":94}],36:[function(_dereq_,module,exports){
	'use strict';

	var corefn = ({
	  notify: function( params ){
	    var _p = this._private;

	    if( _p.batchingNotify ){
	      var bEles = _p.batchNotifyEles;
	      var bTypes = _p.batchNotifyTypes;

	      if( params.collection ){
	        bEles.merge( params.collection );
	      }

	      if( !bTypes.ids[ params.type ] ){
	        bTypes.push( params.type );
	      }

	      return; // notifications are disabled during batching
	    }

	    if( !_p.notificationsEnabled ){ return; } // exit on disabled

	    var renderer = this.renderer();

	    renderer.notify(params);
	  },

	  notifications: function( bool ){
	    var p = this._private;

	    if( bool === undefined ){
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }
	  },

	  noNotifications: function( callback ){
	    this.notifications(false);
	    callback();
	    this.notifications(true);
	  },

	  startBatch: function(){
	    var _p = this._private;

	    if( _p.batchCount == null ){
	      _p.batchCount = 0;
	    }

	    if( _p.batchCount === 0 ){
	      _p.batchingStyle = _p.batchingNotify = true;
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifyEles = this.collection();
	      _p.batchNotifyTypes = [];

	      _p.batchNotifyTypes.ids = {};
	    }

	    _p.batchCount++;

	    return this;
	  },

	  endBatch: function(){
	    var _p = this._private;

	    _p.batchCount--;

	    if( _p.batchCount === 0 ){
	      // update style for dirty eles
	      _p.batchingStyle = false;
	      _p.batchStyleEles.updateStyle();

	      // notify the renderer of queued eles and event types
	      _p.batchingNotify = false;
	      this.notify({
	        type: _p.batchNotifyTypes,
	        collection: _p.batchNotifyEles
	      });
	    }

	    return this;
	  },

	  batch: function( callback ){
	    this.startBatch();
	    callback();
	    this.endBatch();

	    return this;
	  },

	  // for backwards compatibility
	  batchData: function( map ){
	    var cy = this;

	    return this.batch(function(){
	      for( var id in map ){
	        var data = map[id];
	        var ele = cy.getElementById( id );

	        ele.data( data );
	      }
	    });
	  }
	});

	module.exports = corefn;

	},{}],37:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var corefn = ({

	  renderTo: function( context, zoom, pan, pxRatio ){
	    var r = this._private.renderer;

	    r.renderTo( context, zoom, pan, pxRatio );
	    return this;
	  },

	  renderer: function(){
	    return this._private.renderer;
	  },

	  forceRender: function(){
	    this.notify({
	      type: 'draw'
	    });

	    return this;
	  },

	  resize: function(){
	    this.notify({
	      type: 'resize'
	    });

	    this.trigger('resize');

	    return this;
	  },

	  initRenderer: function( options ){
	    var cy = this;

	    var RendererProto = cy.extension('renderer', options.name);
	    if( RendererProto == null ){
	      util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);
	      return;
	    }

	    var rOpts = util.extend({}, options, {
	      cy: cy
	    });
	    var renderer = cy._private.renderer = new RendererProto( rOpts );

	    renderer.init( rOpts );

	  },

	  triggerOnRender: function(){
	    var cbs = this._private.onRenders;

	    for( var i = 0; i < cbs.length; i++ ){
	      var cb = cbs[i];

	      cb();
	    }

	    return this;
	  },

	  onRender: function( cb ){
	    this._private.onRenders.push( cb );

	    return this;
	  },

	  offRender: function( fn ){
	    var cbs = this._private.onRenders;

	    if( fn == null ){ // unbind all
	      this._private.onRenders = [];
	      return this;
	    }

	    for( var i = 0; i < cbs.length; i++ ){ // unbind specified
	      var cb = cbs[i];

	      if( fn === cb ){
	        cbs.splice( i, 1 );
	        break;
	      }
	    }

	    return this;
	  }

	});

	corefn.invalidateDimensions = corefn.resize;

	module.exports = corefn;

	},{"../util":94}],38:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Collection = _dereq_('../collection');

	var corefn = ({

	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function( eles, opts ){

	    if( is.string( eles ) ){
	      return this.$( eles );

	    } else if( is.elementOrCollection( eles ) ){
	      return eles.collection();

	    } else if( is.array( eles ) ){
	      return Collection( this, eles, opts );
	    }

	    return Collection( this );
	  },

	  nodes: function( selector ){
	    var nodes = this.$(function(){
	      return this.isNode();
	    });

	    if( selector ){
	      return nodes.filter( selector );
	    }

	    return nodes;
	  },

	  edges: function( selector ){
	    var edges = this.$(function(){
	      return this.isEdge();
	    });

	    if( selector ){
	      return edges.filter( selector );
	    }

	    return edges;
	  },

	  // search the graph like jQuery
	  $: function( selector ){
	    var eles = new Collection( this, this._private.elements );

	    if( selector ){
	      return eles.filter( selector );
	    }

	    return eles;
	  }

	});

	// aliases
	corefn.elements = corefn.filter = corefn.$;

	module.exports = corefn;

	},{"../collection":23,"../is":77}],39:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Style = _dereq_('../style');

	var corefn = ({

	  style: function( newStyle ){
	    if( newStyle ){
	      var s = this.setStyle( newStyle );

	      s.update();
	    }

	    return this._private.style;
	  },

	  setStyle: function( style ){
	    var _p = this._private;

	    if( is.stylesheet(style) ){
	      _p.style = style.generateStyle(this);

	    } else if( is.array(style) ) {
	      _p.style = Style.fromJson(this, style);

	    } else if( is.string(style) ){
	      _p.style = Style.fromString(this, style);

	    } else {
	      _p.style = Style( this );
	    }

	    return _p.style;
	  }
	});

	module.exports = corefn;

	},{"../is":77,"../style":86}],40:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	var corefn = ({

	  autolock: function(bool){
	    if( bool !== undefined ){
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }

	    return this; // chaining
	  },

	  autoungrabify: function(bool){
	    if( bool !== undefined ){
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }

	    return this; // chaining
	  },

	  autounselectify: function(bool){
	    if( bool !== undefined ){
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }

	    return this; // chaining
	  },

	  panningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }

	    return this; // chaining
	  },

	  userPanningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }

	    return this; // chaining
	  },

	  zoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }

	    return this; // chaining
	  },

	  userZoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }

	    return this; // chaining
	  },

	  boxSelectionEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }

	    return this; // chaining
	  },

	  pan: function(){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    switch( args.length ){
	    case 0: // .pan()
	      return pan;

	    case 1:

	      if( is.string( args[0] ) ){ // .pan('x')
	        dim = args[0];
	        return pan[ dim ];

	      } else if( is.plainObject( args[0] ) ) { // .pan({ x: 0, y: 100 })
	        if( !this._private.panningEnabled ){
	          return this;
	        }

	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number(x) ){
	          pan.x = x;
	        }

	        if( is.number(y) ){
	          pan.y = y;
	        }

	        this.trigger('pan viewport');
	      }
	      break;

	    case 2: // .pan('x', 100)
	      if( !this._private.panningEnabled ){
	        return this;
	      }

	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number(val) ){
	        pan[dim] = val;
	      }

	      this.trigger('pan viewport');
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  panBy: function(params){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    if( !this._private.panningEnabled ){
	      return this;
	    }

	    switch( args.length ){
	    case 1:

	      if( is.plainObject( args[0] ) ) { // .panBy({ x: 0, y: 100 })
	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number(x) ){
	          pan.x += x;
	        }

	        if( is.number(y) ){
	          pan.y += y;
	        }

	        this.trigger('pan viewport');
	      }
	      break;

	    case 2: // .panBy('x', 100)
	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number(val) ){
	        pan[dim] += val;
	      }

	      this.trigger('pan viewport');
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  fit: function( elements, padding ){
	    var viewportState = this.getFitViewport( elements, padding );

	    if( viewportState ){
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;

	      this.trigger('pan zoom viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getFitViewport: function( elements, padding ){
	    if( is.number(elements) && padding === undefined ){ // elements is optional
	      padding = elements;
	      elements = undefined;
	    }

	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return;
	    }

	    var bb;

	    if( is.string(elements) ){
	      var sel = elements;
	      elements = this.$( sel );

	    } else if( is.boundingBox(elements) ){ // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };

	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	    } else if( !is.elementOrCollection(elements) ){
	      elements = this.elements();
	    }

	    bb = bb || elements.boundingBox();

	    var w = this.width();
	    var h = this.height();
	    var zoom;
	    padding = is.number(padding) ? padding : 0;

	    if( !isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) &&  bb.w > 0 && bb.h > 0 ){
	      zoom = Math.min( (w - 2*padding)/bb.w, (h - 2*padding)/bb.h );

	      // crop zoom
	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	      var pan = { // now pan to middle
	        x: (w - zoom*( bb.x1 + bb.x2 ))/2,
	        y: (h - zoom*( bb.y1 + bb.y2 ))/2
	      };

	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }

	    return;
	  },

	  minZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.minZoom;
	    } else if( is.number(zoom) ){
	      this._private.minZoom = zoom;
	    }

	    return this;
	  },

	  maxZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.maxZoom;
	    } else if( is.number(zoom) ){
	      this._private.maxZoom = zoom;
	    }

	    return this;
	  },

	  zoom: function( params ){
	    var pos; // in rendered px
	    var zoom;

	    if( params === undefined ){ // then get the zoom
	      return this._private.zoom;

	    } else if( is.number(params) ){ // then set the zoom
	      zoom = params;

	    } else if( is.plainObject(params) ){ // then zoom about a point
	      zoom = params.level;

	      if( params.position ){
	        var p = params.position;
	        var pan = this._private.pan;
	        var z = this._private.zoom;

	        pos = { // convert to rendered px
	          x: p.x * z + pan.x,
	          y: p.y * z + pan.y
	        };
	      } else if( params.renderedPosition ){
	        pos = params.renderedPosition;
	      }

	      if( pos && !this._private.panningEnabled ){
	        return this; // panning disabled
	      }
	    }

	    if( !this._private.zoomingEnabled ){
	      return this; // zooming disabled
	    }

	    if( !is.number(zoom) || ( pos && (!is.number(pos.x) || !is.number(pos.y)) ) ){
	      return this; // can't zoom with invalid params
	    }

	    // crop zoom
	    zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	    zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	    if( pos ){ // set zoom about position
	      var pan1 = this._private.pan;
	      var zoom1 = this._private.zoom;
	      var zoom2 = zoom;

	      var pan2 = {
	        x: -zoom2/zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2/zoom1 * (pos.y - pan1.y) + pos.y
	      };

	      this._private.zoom = zoom;
	      this._private.pan = pan2;

	      var posChanged = pan1.x !== pan2.x || pan1.y !== pan2.y;
	      this.trigger(' zoom ' + (posChanged ? ' pan ' : '') + ' viewport ' );

	    } else { // just set the zoom
	      this._private.zoom = zoom;
	      this.trigger('zoom viewport');
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  viewport: function( opts ){
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger
	    var zoomFailed = false;
	    var panFailed = false;

	    if( !opts ){ return this; }
	    if( !is.number(opts.zoom) ){ zoomDefd = false; }
	    if( !is.plainObject(opts.pan) ){ panDefd = false; }
	    if( !zoomDefd && !panDefd ){ return this; }

	    if( zoomDefd ){
	      var z = opts.zoom;

	      if( z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled ){
	        zoomFailed = true;

	      } else {
	        _p.zoom = z;

	        events.push('zoom');
	      }
	    }

	    if( panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled ){
	      var p = opts.pan;

	      if( is.number(p.x) ){
	        _p.pan.x = p.x;
	        panFailed = false;
	      }

	      if( is.number(p.y) ){
	        _p.pan.y = p.y;
	        panFailed = false;
	      }

	      if( !panFailed ){
	        events.push('pan');
	      }
	    }

	    if( events.length > 0 ){
	      events.push('viewport');
	      this.trigger( events.join(' ') );

	      this.notify({
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  center: function( elements ){
	    var pan = this.getCenterPan( elements );

	    if( pan ){
	      this._private.pan = pan;

	      this.trigger('pan viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getCenterPan: function( elements, zoom ){
	    if( !this._private.panningEnabled ){
	      return;
	    }

	    if( is.string(elements) ){
	      var selector = elements;
	      elements = this.elements( selector );
	    } else if( !is.elementOrCollection(elements) ){
	      elements = this.elements();
	    }

	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;

	    var pan = { // middle
	      x: (w - zoom*( bb.x1 + bb.x2 ))/2,
	      y: (h - zoom*( bb.y1 + bb.y2 ))/2
	    };

	    return pan;
	  },

	  reset: function(){
	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return this;
	    }

	    this.viewport({
	      pan: { x: 0, y: 0 },
	      zoom: 1
	    });

	    return this; // chaining
	  },

	  width: function(){
	    var container = this._private.container;

	    if( container ){
	      return container.clientWidth;
	    }

	    return 1; // fallback if no container (not 0 b/c can be used for dividing etc)
	  },

	  height: function(){
	    var container = this._private.container;

	    if( container ){
	      return container.clientHeight;
	    }

	    return 1; // fallback if no container (not 0 b/c can be used for dividing etc)
	  },

	  extent: function(){
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();

	    var b = {
	      x1: ( rb.x1 - pan.x )/zoom,
	      x2: ( rb.x2 - pan.x )/zoom,
	      y1: ( rb.y1 - pan.y )/zoom,
	      y2: ( rb.y2 - pan.y )/zoom
	    };

	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;

	    return b;
	  },

	  renderedExtent: function(){
	    var width = this.width();
	    var height = this.height();

	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  }
	});

	// aliases
	corefn.centre = corefn.center;

	// backwards compatibility
	corefn.autolockNodes = corefn.autolock;
	corefn.autoungrabifyNodes = corefn.autoungrabify;

	module.exports = corefn;

	},{"../is":77}],41:[function(_dereq_,module,exports){
	'use strict';

	// use this module to cherry pick functions into your prototype
	// (useful for functions shared between the core and collections, for example)

	// e.g.
	// var foo = define.foo({ /* params... */ })

	var util = _dereq_('./util');
	var is = _dereq_('./is');
	var Selector = _dereq_('./selector');
	var Promise = _dereq_('./promise');
	var Event = _dereq_('./event');
	var Animation = _dereq_('./animation');

	var define = {

	  // access data field
	  data: function( params ){
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {}, // key => true if immutable
	      updateStyle: false,
	      onSet: function( self ){},
	      canSet: function( self ){ return true; }
	    };
	    params = util.extend({}, defaults, params);

	    return function dataImpl( name, value ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var single = selfIsArrayLike ? self[0] : self;

	      // .data('foo', ...)
	      if( is.string(name) ){ // set or get property

	        // .data('foo')
	        if( p.allowGetting && value === undefined ){ // get

	          var ret;
	          if( single ){
	            ret = single._private[ p.field ][ name ];
	          }
	          return ret;

	        // .data('foo', 'bar')
	        } else if( p.allowSetting && value !== undefined ) { // set
	          var valid = !p.immutableKeys[name];
	          if( valid ){
	            for( var i = 0, l = all.length; i < l; i++ ){
	              if( p.canSet( all[i] ) ){
	                all[i]._private[ p.field ][ name ] = value;
	              }
	            }

	            // update mappers if asked
	            if( p.updateStyle ){ self.updateStyle(); }

	            // call onSet callback
	            p.onSet( self );

	            if( p.settingTriggersEvent ){
	              self[ p.triggerFnName ]( p.settingEvent );
	            }
	          }
	        }

	      // .data({ 'foo': 'bar' })
	      } else if( p.allowSetting && is.plainObject(name) ){ // extend
	        var obj = name;
	        var k, v;

	        for( k in obj ){
	          v = obj[ k ];

	          var valid = !p.immutableKeys[k];
	          if( valid ){
	            for( var i = 0, l = all.length; i < l; i++ ){
	              if( p.canSet( all[i] ) ){
	                all[i]._private[ p.field ][ k ] = v;
	              }
	            }
	          }
	        }

	        // update mappers if asked
	        if( p.updateStyle ){ self.updateStyle(); }

	        // call onSet callback
	        p.onSet( self );

	        if( p.settingTriggersEvent ){
	          self[ p.triggerFnName ]( p.settingEvent );
	        }

	      // .data(function(){ ... })
	      } else if( p.allowBinding && is.fn(name) ){ // bind to event
	        var fn = name;
	        self.bind( p.bindingEvent, fn );

	      // .data()
	      } else if( p.allowGetting && name === undefined ){ // get whole object
	        var ret;
	        if( single ){
	          ret = single._private[ p.field ];
	        }
	        return ret;
	      }

	      return self; // maintain chainability
	    }; // function
	  }, // data

	  // remove data field
	  removeData: function( params ){
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable
	    };
	    params = util.extend({}, defaults, params);

	    return function removeDataImpl( names ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      // .removeData('foo bar')
	      if( is.string(names) ){ // then get the list of keys, and delete them
	        var keys = names.split(/\s+/);
	        var l = keys.length;

	        for( var i = 0; i < l; i++ ){ // delete each non-empty key
	          var key = keys[i];
	          if( is.emptyString(key) ){ continue; }

	          var valid = !p.immutableKeys[ key ]; // not valid if immutable
	          if( valid ){
	            for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	              all[ i_a ]._private[ p.field ][ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }

	      // .removeData()
	      } else if( names === undefined ){ // then delete all keys

	        for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	          var _privateFields = all[ i_a ]._private[ p.field ];

	          for( var key in _privateFields ){
	            var validKeyToDelete = !p.immutableKeys[ key ];

	            if( validKeyToDelete ){
	              _privateFields[ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }
	      }

	      return self; // maintain chaining
	    }; // function
	  }, // removeData

	  // event function reusable stuff
	  event: {
	    regex: /(\w+)(\.\w+)?/, // regex for matching event strings (e.g. "click.namespace")
	    optionalTypeRegex: /(\w+)?(\.\w+)?/,
	    falseCallback: function(){ return false; }
	  },

	  // event binding
	  on: function( params ){
	    var defaults = {
	      unbindSelfOnTrigger: false,
	      unbindAllBindersOnTrigger: false
	    };
	    params = util.extend({}, defaults, params);

	    return function onImpl(events, selector, data, callback){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);
	      var p = params;

	      if( is.plainObject(selector) ){ // selector is actually data
	        callback = data;
	        data = selector;
	        selector = undefined;
	      } else if( is.fn(selector) || selector === false ){ // selector is actually callback
	        callback = selector;
	        data = undefined;
	        selector = undefined;
	      }

	      if( is.fn(data) || data === false ){ // data is actually callback
	        callback = data;
	        data = undefined;
	      }

	      // if there isn't a callback, we can't really do anything
	      // (can't speak for mapped events arg version)
	      if( !(is.fn(callback) || callback === false) && eventsIsString ){
	        return self; // maintain chaining
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      for( var evts in events ){
	        callback = events[evts];
	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        if( !is.fn(callback) ){ continue; }

	        evts = evts.split(/\s+/);
	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[i];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]

	          if( match ){
	            var type = match[1];
	            var namespace = match[2] ? match[2] : undefined;

	            var listener = {
	              callback: callback, // callback to run
	              data: data, // extra data in eventObj.data
	              delegated: selector ? true : false, // whether the evt is delegated
	              selector: selector, // the selector to match for delegated events
	              selObj: new Selector(selector), // cached selector object to save rebuilding
	              type: type, // the event type (e.g. 'click')
	              namespace: namespace, // the event namespace (e.g. ".foo")
	              unbindSelfOnTrigger: p.unbindSelfOnTrigger,
	              unbindAllBindersOnTrigger: p.unbindAllBindersOnTrigger,
	              binders: all // who bound together
	            };

	            for( var j = 0; j < all.length; j++ ){
	              var _p = all[j]._private;

	              _p.listeners = _p.listeners || [];
	              _p.listeners.push( listener );
	            }
	          }
	        } // for events array
	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // on

	  eventAliasesOn: function( proto ){
	    var p = proto;

	    p.addListener = p.listen = p.bind = p.on;
	    p.removeListener = p.unlisten = p.unbind = p.off;
	    p.emit = p.trigger;

	    // this is just a wrapper alias of .on()
	    p.pon = p.promiseOn = function( events, selector ){
	      var self = this;
	      var args = Array.prototype.slice.call( arguments, 0 );

	      return new Promise(function( resolve, reject ){
	        var callback = function( e ){
	          self.off.apply( self, offArgs );

	          resolve( e );
	        };

	        var onArgs = args.concat([ callback ]);
	        var offArgs = onArgs.concat([]);

	        self.on.apply( self, onArgs );
	      });
	    };
	  },

	  off: function offImpl( params ){
	    var defaults = {
	    };
	    params = util.extend({}, defaults, params);

	    return function(events, selector, callback){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);

	      if( arguments.length === 0 ){ // then unbind all

	        for( var i = 0; i < all.length; i++ ){
	          all[i]._private.listeners = [];
	        }

	        return self; // maintain chaining
	      }

	      if( is.fn(selector) || selector === false ){ // selector is actually callback
	        callback = selector;
	        selector = undefined;
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      for( var evts in events ){
	        callback = events[evts];

	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        evts = evts.split(/\s+/);
	        for( var h = 0; h < evts.length; h++ ){
	          var evt = evts[h];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.optionalTypeRegex ); // [type][.namespace]
	          if( match ){
	            var type = match[1] ? match[1] : undefined;
	            var namespace = match[2] ? match[2] : undefined;

	            for( var i = 0; i < all.length; i++ ){ //
	              var listeners = all[i]._private.listeners = all[i]._private.listeners || [];

	              for( var j = 0; j < listeners.length; j++ ){
	                var listener = listeners[j];
	                var nsMatches = !namespace || namespace === listener.namespace;
	                var typeMatches = !type || listener.type === type;
	                var cbMatches = !callback || callback === listener.callback;
	                var listenerMatches = nsMatches && typeMatches && cbMatches;

	                // delete listener if it matches
	                if( listenerMatches ){
	                  listeners.splice(j, 1);
	                  j--;
	                }
	              } // for listeners
	            } // for all
	          } // if match
	        } // for events array

	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // off

	  trigger: function( params ){
	    var defaults = {};
	    params = util.extend({}, defaults, params);

	    return function triggerImpl(events, extraParams, fnToTrigger){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);
	      var eventsIsObject = is.plainObject(events);
	      var eventsIsEvent = is.event(events);
	      var cy = this._private.cy || ( is.core(this) ? this : null );
	      var hasCompounds = cy ? cy.hasCompoundNodes() : false;

	      if( eventsIsString ){ // then make a plain event object for each event name
	        var evts = events.split(/\s+/);
	        events = [];

	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[i];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]
	          var type = match[1];
	          var namespace = match[2] ? match[2] : undefined;

	          events.push( {
	            type: type,
	            namespace: namespace
	          } );
	        }
	      } else if( eventsIsObject ){ // put in length 1 array
	        var eventArgObj = events;

	        events = [ eventArgObj ];
	      }

	      if( extraParams ){
	        if( !is.array(extraParams) ){ // make sure extra params are in an array if specified
	          extraParams = [ extraParams ];
	        }
	      } else { // otherwise, we've got nothing
	        extraParams = [];
	      }

	      for( var i = 0; i < events.length; i++ ){ // trigger each event in order
	        var evtObj = events[i];

	        for( var j = 0; j < all.length; j++ ){ // for each
	          var triggerer = all[j];
	          var listeners = triggerer._private.listeners = triggerer._private.listeners || [];
	          var triggererIsElement = is.element(triggerer);
	          var bubbleUp = triggererIsElement || params.layout;

	          // create the event for this element from the event object
	          var evt;

	          if( eventsIsEvent ){ // then just get the object
	            evt = evtObj;

	            evt.cyTarget = evt.cyTarget || triggerer;
	            evt.cy = evt.cy || cy;

	          } else { // then we have to make one
	            evt = new Event( evtObj, {
	              cyTarget: triggerer,
	              cy: cy,
	              namespace: evtObj.namespace
	            } );
	          }

	          // if a layout was specified, then put it in the typed event
	          if( evtObj.layout ){
	            evt.layout = evtObj.layout;
	          }

	          // if triggered by layout, put in event
	          if( params.layout ){
	            evt.layout = triggerer;
	          }

	          // create a rendered position based on the passed position
	          if( evt.cyPosition ){
	            var pos = evt.cyPosition;
	            var zoom = cy.zoom();
	            var pan = cy.pan();

	            evt.cyRenderedPosition = {
	              x: pos.x * zoom + pan.x,
	              y: pos.y * zoom + pan.y
	            };
	          }

	          if( fnToTrigger ){ // then override the listeners list with just the one we specified
	            listeners = [{
	              namespace: evt.namespace,
	              type: evt.type,
	              callback: fnToTrigger
	            }];
	          }

	          for( var k = 0; k < listeners.length; k++ ){ // check each listener
	            var lis = listeners[k];
	            var nsMatches = !lis.namespace || lis.namespace === evt.namespace;
	            var typeMatches = lis.type === evt.type;
	            var targetMatches = lis.delegated ? ( triggerer !== evt.cyTarget && is.element(evt.cyTarget) && lis.selObj.matches(evt.cyTarget) ) : (true); // we're not going to validate the hierarchy; that's too expensive
	            var listenerMatches = nsMatches && typeMatches && targetMatches;

	            if( listenerMatches ){ // then trigger it
	              var args = [ evt ];
	              args = args.concat( extraParams ); // add extra params to args list

	              if( lis.data ){ // add on data plugged into binding
	                evt.data = lis.data;
	              } else { // or clear it in case the event obj is reused
	                evt.data = undefined;
	              }

	              if( lis.unbindSelfOnTrigger || lis.unbindAllBindersOnTrigger ){ // then remove listener
	                listeners.splice(k, 1);
	                k--;
	              }

	              if( lis.unbindAllBindersOnTrigger ){ // then delete the listener for all binders
	                var binders = lis.binders;
	                for( var l = 0; l < binders.length; l++ ){
	                  var binder = binders[l];
	                  if( !binder || binder === triggerer ){ continue; } // already handled triggerer or we can't handle it

	                  var binderListeners = binder._private.listeners;
	                  for( var m = 0; m < binderListeners.length; m++ ){
	                    var binderListener = binderListeners[m];

	                    if( binderListener === lis ){ // delete listener from list
	                      binderListeners.splice(m, 1);
	                      m--;
	                    }
	                  }
	                }
	              }

	              // run the callback
	              var context = lis.delegated ? evt.cyTarget : triggerer;
	              var ret = lis.callback.apply( context, args );

	              if( ret === false || evt.isPropagationStopped() ){
	                // then don't bubble
	                bubbleUp = false;

	                if( ret === false ){
	                  // returning false is a shorthand for stopping propagation and preventing the def. action
	                  evt.stopPropagation();
	                  evt.preventDefault();
	                }
	              }
	            } // if listener matches
	          } // for each listener

	          // bubble up event for elements
	          if( bubbleUp ){
	            var parent = hasCompounds ? triggerer._private.parent : null;
	            var hasParent = parent != null && parent.length !== 0;

	            if( hasParent ){ // then bubble up to parent
	              parent = parent[0];
	              parent.trigger(evt);
	            } else { // otherwise, bubble up to the core
	              cy.trigger(evt);
	            }
	          }

	        } // for each of all
	      } // for each event

	      return self; // maintain chaining
	    }; // function
	  }, // trigger

	  animated: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animatedImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return false; }

	      var ele = all[0];

	      if( ele ){
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  }, // animated

	  clearQueue: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function clearQueueImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        ele._private.animation.queue = [];
	      }

	      return this;
	    };
	  }, // clearQueue

	  delay: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function delayImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animate({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  delayAnimation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function delayAnimationImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animation({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  animation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animationImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;

	      if( !cy.styleEnabled() ){ return this; }

	      var style = cy.style();

	      properties = util.extend( {}, properties, params );

	      if( properties.duration === undefined ){
	        properties.duration = 400;
	      }

	      switch( properties.duration ){
	      case 'slow':
	        properties.duration = 600;
	        break;
	      case 'fast':
	        properties.duration = 200;
	        break;
	      }

	      var propertiesEmpty = true;
	      if( properties ){ for( var i in properties ){ // jshint ignore:line
	        propertiesEmpty = false;
	        break;
	      } }

	      if( propertiesEmpty ){
	        return new Animation( all[0], properties ); // nothing to animate
	      }

	      if( isEles ){
	        properties.style = style.getPropsList( properties.style || properties.css );

	        properties.css = undefined;
	      }

	      if( properties.renderedPosition && isEles ){
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();

	        properties.position = {
	          x: ( rpos.x - pan.x ) /zoom,
	          y: ( rpos.y - pan.y ) /zoom
	        };
	      }

	      // override pan w/ panBy if set
	      if( properties.panBy && isCore ){
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();

	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      }

	      // override pan w/ center if set
	      var center = properties.center || properties.centre;
	      if( center && isCore ){
	        var centerPan = cy.getCenterPan( center.eles, properties.zoom );

	        if( centerPan ){
	          properties.pan = centerPan;
	        }
	      }

	      // override pan & zoom w/ fit if set
	      if( properties.fit && isCore ){
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport( fit.eles || fit.boundingBox, fit.padding );

	        if( fitVp ){
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      }

	      return new Animation( all[0], properties );
	    };
	  }, // animate

	  animate: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animateImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      if( params ){
	        properties = util.extend( {}, properties, params );
	      }

	      // manually hook and run the animation
	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);

	        var ani = ele.animation( properties, (queue ? { queue: true } : undefined) );

	        ani.play();
	      }

	      return this; // chaining
	    };
	  }, // animate

	  stop: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function stopImpl( clearQueue, jumpToEnd ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        var _p = ele._private;
	        var anis = _p.animation.current;

	        for( var j = 0; j < anis.length; j++ ){
	          var ani = anis[j];
	          var ani_p = ani._private;

	          if( jumpToEnd ){
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        }

	        // clear the queue of future animations
	        if( clearQueue ){
	          _p.animation.queue = [];
	        }

	        if( !jumpToEnd ){
	          _p.animation.current = [];
	        }
	      }

	      // we have to notify (the animation loop doesn't do it for us on `stop`)
	      cy.notify({
	        collection: this,
	        type: 'draw'
	      });

	      return this;
	    };
	  } // stop

	}; // define

	module.exports = define;

	},{"./animation":1,"./event":42,"./is":77,"./promise":80,"./selector":81,"./util":94}],42:[function(_dereq_,module,exports){
	'use strict';

	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/

	var Event = function( src, props ) {
	  // Allow instantiation without the 'new' keyword
	  if ( !(this instanceof Event) ) {
	    return new Event( src, props );
	  }

	  // Event object
	  if ( src && src.type ) {
	    this.originalEvent = src;
	    this.type = src.type;

	    // Events bubbling up the document may have been marked as prevented
	    // by a handler lower down the tree; reflect the correct value.
	    this.isDefaultPrevented = ( src.defaultPrevented ) ? returnTrue : returnFalse;

	  // Event type
	  } else {
	    this.type = src;
	  }

	  // Put explicitly provided properties onto the event object
	  if ( props ) {
	    // util.extend( this, props );

	    // more efficient to manually copy fields we use
	    this.type = props.type !== undefined ? props.type : this.type;
	    this.cy = props.cy;
	    this.cyTarget = props.cyTarget;
	    this.cyPosition = props.cyPosition;
	    this.cyRenderedPosition = props.cyRenderedPosition;
	    this.namespace = props.namespace;
	    this.layout = props.layout;
	    this.data = props.data;
	    this.message = props.message;
	  }

	  // Create a timestamp if incoming event doesn't have one
	  this.timeStamp = src && src.timeStamp || Date.now();
	};

	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	Event.prototype = {
	  instanceString: function(){
	    return 'event';
	  },

	  preventDefault: function() {
	    this.isDefaultPrevented = returnTrue;

	    var e = this.originalEvent;
	    if ( !e ) {
	      return;
	    }

	    // if preventDefault exists run it on the original event
	    if ( e.preventDefault ) {
	      e.preventDefault();
	    }
	  },

	  stopPropagation: function() {
	    this.isPropagationStopped = returnTrue;

	    var e = this.originalEvent;
	    if ( !e ) {
	      return;
	    }

	    // if stopPropagation exists run it on the original event
	    if ( e.stopPropagation ) {
	      e.stopPropagation();
	    }
	  },

	  stopImmediatePropagation: function() {
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },

	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	module.exports = Event;

	},{}],43:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('./util');
	var define = _dereq_('./define');
	var Collection = _dereq_('./collection');
	var Core = _dereq_('./core');
	var incExts = _dereq_('./extensions');
	var is = _dereq_('./is');

	// registered extensions to cytoscape, indexed by name
	var extensions = {};

	// registered modules for extensions, indexed by name
	var modules = {};

	function setExtension( type, name, registrant ){

	  var ext = registrant;

	  if( type === 'core' ){
	    Core.prototype[ name ] = registrant;

	  } else if( type === 'collection' ){
	    Collection.prototype[ name ] = registrant;

	  } else if( type === 'layout' ){
	    // fill in missing layout functions in the prototype

	    var Layout = function( options ){
	      this.options = options;

	      registrant.call( this, options );

	      // make sure layout has _private for use w/ std apis like .on()
	      if( !is.plainObject(this._private) ){
	        this._private = {};
	      }

	      this._private.cy = options.cy;
	      this._private.listeners = [];
	    };

	    var layoutProto = Layout.prototype = Object.create( registrant.prototype );

	    var optLayoutFns = [];

	    for( var i = 0; i < optLayoutFns.length; i++ ){
	      var fnName = optLayoutFns[i];

	      layoutProto[fnName] = layoutProto[fnName] || function(){ return this; };
	    }

	    // either .start() or .run() is defined, so autogen the other
	    if( layoutProto.start && !layoutProto.run ){
	      layoutProto.run = function(){ this.start(); return this; };
	    } else if( !layoutProto.start && layoutProto.run ){
	      layoutProto.start = function(){ this.run(); return this; };
	    }

	    if( !layoutProto.stop ){
	      layoutProto.stop = function(){
	        var opts = this.options;

	        if( opts && opts.animate ){
	          var anis = this.animations;
	          for( var i = 0; i < anis.length; i++ ){
	            anis[i].stop();
	          }
	        }

	        this.trigger('layoutstop');

	        return this;
	      };
	    }

	    if( !layoutProto.destroy ){
	      layoutProto.destroy = function(){
	        return this;
	      };
	    }

	    layoutProto.on = define.on({ layout: true });
	    layoutProto.one = define.on({ layout: true, unbindSelfOnTrigger: true });
	    layoutProto.once = define.on({ layout: true, unbindAllBindersOnTrigger: true });
	    layoutProto.off = define.off({ layout: true });
	    layoutProto.trigger = define.trigger({ layout: true });

	    define.eventAliasesOn( layoutProto );

	    ext = Layout; // replace with our wrapped layout

	  } else if( type === 'renderer' && name !== 'null' && name !== 'base' ){
	    // user registered renderers inherit from base

	    var bProto = getExtension( 'renderer', 'base' ).prototype;
	    var rProto = registrant.prototype;

	    for( var pName in bProto ){
	      var pVal = bProto[ pName ];
	      var existsInR = rProto[ pName ] != null;

	      if( existsInR ){
	        util.error('Can not register renderer `' + name + '` since it overrides `' + pName + '` in its prototype');
	        return;
	      }

	      rProto[ pName ] = pVal; // take impl from base
	    }

	    bProto.clientFunctions.forEach(function( name ){
	      rProto[ name ] = rProto[ name ] || function(){
	        util.error('Renderer does not implement `renderer.' + name + '()` on its prototype');
	      };
	    });

	  }

	  return util.setMap({
	    map: extensions,
	    keys: [ type, name ],
	    value: ext
	  });
	}

	function getExtension(type, name){
	  return util.getMap({
	    map: extensions,
	    keys: [ type, name ]
	  });
	}

	function setModule(type, name, moduleType, moduleName, registrant){
	  return util.setMap({
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ],
	    value: registrant
	  });
	}

	function getModule(type, name, moduleType, moduleName){
	  return util.getMap({
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ]
	  });
	}

	var extension = function(){
	  // e.g. extension('renderer', 'svg')
	  if( arguments.length === 2 ){
	    return getExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', { ... })
	  else if( arguments.length === 3 ){
	    return setExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	  else if( arguments.length === 4 ){
	    return getModule.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	  else if( arguments.length === 5 ){
	    return setModule.apply(null, arguments);
	  }

	  else {
	    util.error('Invalid extension access syntax');
	  }

	};

	// allows a core instance to access extensions internally
	Core.prototype.extension = extension;

	// included extensions
	incExts.forEach(function( group ){
	  group.extensions.forEach(function( ext ){
	    setExtension( group.type, ext.name, ext.impl );
	  });
	});

	module.exports = extension;

	},{"./collection":23,"./core":34,"./define":41,"./extensions":44,"./is":77,"./util":94}],44:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  {
	    type: 'layout',
	    extensions: _dereq_('./layout')
	  },

	  {
	    type: 'renderer',
	    extensions: _dereq_('./renderer')
	  }
	];

	},{"./layout":50,"./renderer":72}],45:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var is = _dereq_('../../is');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30, // padding on fit
	  circle: false, // put depths in concentric circles if true, put depths top down if false
	  spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  roots: undefined, // the roots of the trees
	  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function BreadthFirstLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	BreadthFirstLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var graph = eles;

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var roots;
	  if( is.elementOrCollection(options.roots) ){
	    roots = options.roots;
	  } else if( is.array(options.roots) ){
	    var rootsArray = [];

	    for( var i = 0; i < options.roots.length; i++ ){
	      var id = options.roots[i];
	      var ele = cy.getElementById( id );
	      rootsArray.push( ele );
	    }

	    roots = cy.collection( rootsArray );
	  } else if( is.string(options.roots) ){
	    roots = cy.$( options.roots );

	  } else {
	    if( options.directed ){
	      roots = nodes.roots();
	    } else {
	      var components = [];
	      var unhandledNodes = nodes;

	      while( unhandledNodes.length > 0 ){
	        var currComp = cy.collection();

	        eles.bfs({
	          roots: unhandledNodes[0],
	          visit: function(i, depth, node, edge, pNode){
	            currComp = currComp.add( node );
	          },
	          directed: false
	        });

	        unhandledNodes = unhandledNodes.not( currComp );
	        components.push( currComp );
	      }

	      roots = cy.collection();
	      for( var i = 0; i < components.length; i++ ){
	        var comp = components[i];
	        var maxDegree = comp.maxDegree( false );
	        var compRoots = comp.filter(function(){
	          return this.degree(false) === maxDegree;
	        });

	        roots = roots.add( compRoots );
	      }

	    }
	  }


	  var depths = [];
	  var foundByBfs = {};
	  var id2depth = {};
	  var prevNode = {};
	  var prevEdge = {};
	  var successors = {};

	  // find the depths of the nodes
	  graph.bfs({
	    roots: roots,
	    directed: options.directed,
	    visit: function(i, depth, node, edge, pNode){
	      var ele = this[0];
	      var id = ele.id();

	      if( !depths[depth] ){
	        depths[depth] = [];
	      }

	      depths[depth].push( ele );
	      foundByBfs[ id ] = true;
	      id2depth[ id ] = depth;
	      prevNode[ id ] = pNode;
	      prevEdge[ id ] = edge;

	      if( pNode ){
	        var prevId = pNode.id();
	        var succ = successors[ prevId ] = successors[ prevId ] || [];

	        succ.push( node );
	      }
	    }
	  });

	  // check for nodes not found by bfs
	  var orphanNodes = [];
	  for( var i = 0; i < nodes.length; i++ ){
	    var ele = nodes[i];

	    if( foundByBfs[ ele.id() ] ){
	      continue;
	    } else {
	      orphanNodes.push( ele );
	    }
	  }

	  // assign orphan nodes a depth from their neighborhood
	  var maxChecks = orphanNodes.length * 3;
	  var checks = 0;
	  while( orphanNodes.length !== 0 && checks < maxChecks ){
	    var node = orphanNodes.shift();
	    var neighbors = node.neighborhood().nodes();
	    var assignedDepth = false;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var depth = id2depth[ neighbors[i].id() ];

	      if( depth !== undefined ){
	        depths[depth].push( node );
	        assignedDepth = true;
	        break;
	      }
	    }

	    if( !assignedDepth ){
	      orphanNodes.push( node );
	    }

	    checks++;
	  }

	  // assign orphan nodes that are still left to the depth of their subgraph
	  while( orphanNodes.length !== 0 ){
	    var node = orphanNodes.shift();
	    //var subgraph = graph.bfs( node ).path;
	    var assignedDepth = false;

	    // for( var i = 0; i < subgraph.length; i++ ){
	    //   var depth = id2depth[ subgraph[i].id() ];

	    //   if( depth !== undefined ){
	    //     depths[depth].push( node );
	    //     assignedDepth = true;
	    //     break;
	    //   }
	    // }

	    if( !assignedDepth ){ // worst case if the graph really isn't tree friendly, then just dump it in 0
	      if( depths.length === 0 ){
	        depths.push([]);
	      }

	      depths[0].push( node );
	    }
	  }

	  // assign the nodes a depth and index
	  var assignDepthsToEles = function(){
	    for( var i = 0; i < depths.length; i++ ){
	      var eles = depths[i];

	      for( var j = 0; j < eles.length; j++ ){
	        var ele = eles[j];

	        ele._private.scratch.breadthfirst = {
	          depth: i,
	          index: j
	        };
	      }
	    }
	  };
	  assignDepthsToEles();


	  var intersectsDepth = function( node ){ // returns true if has edges pointing in from a higher depth
	    var edges = node.connectedEdges(function(){
	      return this.data('target') === node.id();
	    });
	    var thisInfo = node._private.scratch.breadthfirst;
	    var highestDepthOfOther = 0;
	    var highestOther;
	    for( var i = 0; i < edges.length; i++ ){
	      var edge = edges[i];
	      var otherNode = edge.source()[0];
	      var otherInfo = otherNode._private.scratch.breadthfirst;

	      if( thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth ){
	        highestDepthOfOther = otherInfo.depth;
	        highestOther = otherNode;
	      }
	    }

	    return highestOther;
	  };

	   // make maximal if so set by adjusting depths
	  for( var adj = 0; adj < options.maximalAdjustments; adj++ ){

	    var nDepths = depths.length;
	    var elesToMove = [];
	    for( var i = 0; i < nDepths; i++ ){
	      var depth = depths[i];

	      var nDepth = depth.length;
	      for( var j = 0; j < nDepth; j++ ){
	        var ele = depth[j];
	        var info = ele._private.scratch.breadthfirst;
	        var intEle = intersectsDepth(ele);

	        if( intEle ){
	          info.intEle = intEle;
	          elesToMove.push( ele );
	        }
	      }
	    }

	    for( var i = 0; i < elesToMove.length; i++ ){
	      var ele = elesToMove[i];
	      var info = ele._private.scratch.breadthfirst;
	      var intEle = info.intEle;
	      var intInfo = intEle._private.scratch.breadthfirst;

	      depths[ info.depth ].splice( info.index, 1 ); // remove from old depth & index

	      // add to end of new depth
	      var newDepth = intInfo.depth + 1;
	      while( newDepth > depths.length - 1 ){
	        depths.push([]);
	      }
	      depths[ newDepth ].push( ele );

	      info.depth = newDepth;
	      info.index = depths[newDepth].length - 1;
	    }

	    assignDepthsToEles();
	  }

	  // find min distance we need to leave between nodes
	  var minDistance = 0;
	  if( options.avoidOverlap ){
	    for( var i = 0; i < nodes.length; i++ ){
	      var n = nodes[i];
	      var nbb = n.boundingBox();
	      var w = nbb.w;
	      var h = nbb.h;

	      minDistance = Math.max(minDistance, w, h);
	    }
	    minDistance *= options.spacingFactor; // just to have some nice spacing
	  }

	  // get the weighted percent for an element based on its connectivity to other levels
	  var cachedWeightedPercent = {};
	  var getWeightedPercent = function( ele ){
	    if( cachedWeightedPercent[ ele.id() ] ){
	      return cachedWeightedPercent[ ele.id() ];
	    }

	    var eleDepth = ele._private.scratch.breadthfirst.depth;
	    var neighbors = ele.neighborhood().nodes().not(':parent');
	    var percent = 0;
	    var samples = 0;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var neighbor = neighbors[i];
	      var bf = neighbor._private.scratch.breadthfirst;
	      var index = bf.index;
	      var depth = bf.depth;
	      var nDepth = depths[depth].length;

	      if( eleDepth > depth || eleDepth === 0 ){ // only get influenced by elements above
	        percent += index / nDepth;
	        samples++;
	      }
	    }

	    samples = Math.max(1, samples);
	    percent = percent / samples;

	    if( samples === 0 ){ // so lone nodes have a "don't care" state in sorting
	      percent = undefined;
	    }

	    cachedWeightedPercent[ ele.id() ] = percent;
	    return percent;
	  };


	  // rearrange the indices in each depth level based on connectivity

	  var sortFn = function(a, b){
	    var apct = getWeightedPercent( a );
	    var bpct = getWeightedPercent( b );

	    return apct - bpct;
	  };

	  for( var times = 0; times < 3; times++ ){ // do it a few times b/c the depths are dynamic and we want a more stable result

	    for( var i = 0; i < depths.length; i++ ){
	      depths[i] = depths[i].sort( sortFn );
	    }
	    assignDepthsToEles(); // and update

	  }

	  var biggestDepthSize = 0;
	  for( var i = 0; i < depths.length; i++ ){
	    biggestDepthSize = Math.max( depths[i].length, biggestDepthSize );
	  }

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.x1 + bb.h/2
	  };

	  var getPosition = function( ele, isBottomDepth ){
	    var info = ele._private.scratch.breadthfirst;
	    var depth = info.depth;
	    var index = info.index;
	    var depthSize = depths[depth].length;

	    var distanceX = Math.max( bb.w / (depthSize + 1), minDistance );
	    var distanceY = Math.max( bb.h / (depths.length + 1), minDistance );
	    var radiusStepSize = Math.min( bb.w / 2 / depths.length, bb.h / 2 / depths.length );
	    radiusStepSize = Math.max( radiusStepSize, minDistance );

	    if( !options.circle ){

	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,
	        y: (depth + 1) * distanceY
	      };

	      if( isBottomDepth ){
	        return epos;
	      }

	      // var succs = successors[ ele.id() ];
	      // if( succs ){
	      //   epos.x = 0;
	      //
	      //   for( var i = 0 ; i < succs.length; i++ ){
	      //     var spos = pos[ succs[i].id() ];
	      //
	      //     epos.x += spos.x;
	      //   }
	      //
	      //   epos.x /= succs.length;
	      // } else {
	      //   //debugger;
	      // }

	      return epos;

	    } else {
	      if( options.circle ){
	        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize/2 : 0);
	        var theta = 2 * Math.PI / depths[depth].length * index;

	        if( depth === 0 && depths[0].length === 1 ){
	          radius = 1;
	        }

	        return {
	          x: center.x + radius * Math.cos(theta),
	          y: center.y + radius * Math.sin(theta)
	        };

	      } else {
	        return {
	          x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,
	          y: (depth + 1) * distanceY
	        };
	      }
	    }

	  };

	  // get positions in reverse depth order
	  var pos = {};
	  for( var i = depths.length - 1; i >=0; i-- ){
	    var depth = depths[i];

	    for( var j = 0; j < depth.length; j++ ){
	      var node = depth[j];

	      pos[ node.id() ] = getPosition( node, i === depths.length - 1 );
	    }
	  }

	  nodes.layoutPositions(this, options, function(){
	    return pos[ this.id() ];
	  });

	  return this; // chaining
	};

	module.exports = BreadthFirstLayout;

	},{"../../is":77,"../../math":79,"../../util":94}],46:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var is = _dereq_('../../is');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
	  radius: undefined, // the radius of the circle
	  startAngle: 3/2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function CircleLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	CircleLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var nodes = eles.nodes().not(':parent');

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.y1 + bb.h/2
	  };

	  var sweep = options.sweep === undefined ? 2*Math.PI - 2*Math.PI/nodes.length : options.sweep;

	  var dTheta = sweep / ( Math.max(1, nodes.length - 1) );
	  var r;

	  var minDistance = 0;
	  for( var i = 0; i < nodes.length; i++ ){
	    var n = nodes[i];
	    var nbb = n.boundingBox();
	    var w = nbb.w;
	    var h = nbb.h;

	    minDistance = Math.max(minDistance, w, h);
	  }

	  if( is.number(options.radius) ){
	    r = options.radius;
	  } else if( nodes.length <= 1 ){
	    r = 0;
	  } else {
	    r = Math.min( bb.h, bb.w )/2 - minDistance;
	  }

	  // calculate the radius
	  if( nodes.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos(dTheta) - Math.cos(0);
	    var dsin = Math.sin(dTheta) - Math.sin(0);
	    var rMin = Math.sqrt( minDistance * minDistance / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping
	    r = Math.max( rMin, r );
	  }

	  var getPos = function( i, ele ){
	    var theta = options.startAngle + i * dTheta * ( clockwise ? 1 : -1 );

	    var rx = r * Math.cos( theta );
	    var ry = r * Math.sin( theta );
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };

	    return pos;
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = CircleLayout;

	},{"../../is":77,"../../math":79,"../../util":94}],47:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  startAngle: 3/2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  height: undefined, // height of layout area (overrides container height)
	  width: undefined, // width of layout area (overrides container width)
	  concentric: function(node){ // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function(nodes){ // the variation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function ConcentricLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	ConcentricLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var cy = params.cy;

	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.y1 + bb.h/2
	  };

	  var nodeValues = []; // { node, value }
	  var theta = options.startAngle;
	  var maxNodeSize = 0;

	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var value;

	    // calculate the node value
	    value = options.concentric.apply(node, [ node ]);
	    nodeValues.push({
	      value: value,
	      node: node
	    });

	    // for style mapping
	    node._private.scratch.concentric = value;
	  }

	  // in case we used the `concentric` in style
	  nodes.updateStyle();

	  // calculate max size now based on potentially updated mappers
	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var nbb = node.boundingBox();

	    maxNodeSize = Math.max( maxNodeSize, nbb.w, nbb.h );
	  }

	  // sort node values in descreasing order
	  nodeValues.sort(function(a, b){
	    return b.value - a.value;
	  });

	  var levelWidth = options.levelWidth( nodes );

	  // put the values into levels
	  var levels = [ [] ];
	  var currentLevel = levels[0];
	  for( var i = 0; i < nodeValues.length; i++ ){
	    var val = nodeValues[i];

	    if( currentLevel.length > 0 ){
	      var diff = Math.abs( currentLevel[0].value - val.value );

	      if( diff >= levelWidth ){
	        currentLevel = [];
	        levels.push( currentLevel );
	      }
	    }

	    currentLevel.push( val );
	  }

	  // create positions from levels

	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if( !options.avoidOverlap ){ // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = ( Math.min(bb.w, bb.h) / 2 - minDist );
	    var rStep = maxR / ( levels.length + firstLvlHasMulti ? 1 : 0 );

	    minDist = Math.min( minDist, rStep );
	  }

	  // find the metrics for each level
	  var r = 0;
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[i];
	    var sweep = options.sweep === undefined ? 2*Math.PI - 2*Math.PI/level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / ( Math.max(1, level.length - 1) );

	    // calculate the radius
	    if( level.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	      var dcos = Math.cos(dTheta) - Math.cos(0);
	      var dsin = Math.sin(dTheta) - Math.sin(0);
	      var rMin = Math.sqrt( minDist * minDist / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping

	      r = Math.max( rMin, r );
	    }

	    level.r = r;

	    r += minDist;
	  }

	  if( options.equidistant ){
	    var rDeltaMax = 0;
	    var r = 0;

	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[i];
	      var rDelta = level.r - r;

	      rDeltaMax = Math.max( rDeltaMax, rDelta );
	    }

	    r = 0;
	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[i];

	      if( i === 0 ){
	        r = level.r;
	      }

	      level.r = r;

	      r += rDeltaMax;
	    }
	  }

	  // calculate the node positions
	  var pos = {}; // id => position
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[i];
	    var dTheta = level.dTheta;
	    var r = level.r;

	    for( var j = 0; j < level.length; j++ ){
	      var val = level[j];
	      var theta = options.startAngle + (clockwise ? 1 : -1) * dTheta * j;

	      var p = {
	        x: center.x + r * Math.cos(theta),
	        y: center.y + r * Math.sin(theta)
	      };

	      pos[ val.node.id() ] = p;
	    }
	  }

	  // position the nodes
	  nodes.layoutPositions(this, options, function(){
	    var id = this.id();

	    return pos[id];
	  });

	  return this; // chaining
	};

	module.exports = ConcentricLayout;

	},{"../../math":79,"../../util":94}],48:[function(_dereq_,module,exports){
	'use strict';

	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var Thread = _dereq_('../../thread');
	var is = _dereq_('../../is');

	var DEBUG;

	/**
	 * @brief :  default layout options
	 */
	var defaults = {
	  // Called on `layoutready`
	  ready               : function() {},

	  // Called on `layoutstop`
	  stop                : function() {},

	  // Whether to animate while running the layout
	  animate             : true,

	  // The layout animates only after this many milliseconds
	  // (prevents flashing on fast runs)
	  animationThreshold  : 250,

	  // Number of iterations between consecutive screen positions update
	  // (0 -> only updated on the end)
	  refresh             : 20,

	  // Whether to fit the network view after when done
	  fit                 : true,

	  // Padding on fit
	  padding             : 30,

	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox         : undefined,

	  // Extra spacing between components in non-compound graphs
	  componentSpacing    : 100,

	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion       : function( node ){ return 400000; },

	  // Node repulsion (overlapping) multiplier
	  nodeOverlap         : 10,

	  // Ideal edge (non nested) length
	  idealEdgeLength     : function( edge ){ return 10; },

	  // Divisor to compute edge forces
	  edgeElasticity      : function( edge ){ return 100; },

	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor       : 5,

	  // Gravity force (constant)
	  gravity             : 80,

	  // Maximum number of iterations to perform
	  numIter             : 1000,

	  // Initial temperature (maximum node displacement)
	  initialTemp         : 200,

	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor       : 0.95,

	  // Lower temperature threshold (below this point the layout will end)
	  minTemp             : 1.0,

	  // Whether to use threading to speed up the layout
	  useMultitasking     : true
	};


	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */
	function CoseLayout(options) {
	  this.options = util.extend({}, defaults, options);

	  this.options.layout = this;
	}


	/**
	 * @brief : runs the layout
	 */
	CoseLayout.prototype.run = function() {
	  var options = this.options;
	  var cy      = options.cy;
	  var layout  = this;
	  var thread  = this.thread;

	  if( !thread || thread.stopped() ){
	    thread = this.thread = Thread({ disabled: !options.useMultitasking });
	  }

	  layout.stopped = false;

	  layout.trigger({ type: 'layoutstart', layout: layout });

	  // Set DEBUG - Global variable
	  if (true === options.debug) {
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  }

	  // Initialize layout info
	  var layoutInfo = createLayoutInfo(cy, layout, options);

	  // Show LayoutInfo contents if debugging
	  if (DEBUG) {
	    printLayoutInfo(layoutInfo);
	  }

	  // If required, randomize node positions
	  // if (true === options.randomize) {
	    randomizePositions(layoutInfo, cy);
	  // }

	  var startTime = Date.now();
	  var refreshRequested = false;
	  var refresh = function( rOpts ){
	    rOpts = rOpts || {};

	    if( refreshRequested ){
	      return;
	    }

	    if( !rOpts.force && Date.now() - startTime < options.animationThreshold ){
	      return;
	    }

	    refreshRequested = true;

	    util.requestAnimationFrame(function(){
	      refreshPositions(layoutInfo, cy, options);

	      // Fit the graph if necessary
	      if (true === options.fit) {
	        cy.fit( options.padding );
	      }

	      refreshRequested = false;

	      if( rOpts.next ){ rOpts.next(); }
	    });
	  };

	  thread.on('message', function( e ){
	    var layoutNodes = e.message;

	    layoutInfo.layoutNodes = layoutNodes;
	    refresh();
	  });

	  thread.pass({
	    layoutInfo: layoutInfo,
	    options: {
	      animate: options.animate,
	      refresh: options.refresh,
	      componentSpacing: options.componentSpacing,
	      nodeOverlap: options.nodeOverlap,
	      nestingFactor: options.nestingFactor,
	      gravity: options.gravity,
	      numIter: options.numIter,
	      initialTemp: options.initialTemp,
	      coolingFactor: options.coolingFactor,
	      minTemp: options.minTemp
	    }
	  }).run(function( pass ){
	    var layoutInfo = pass.layoutInfo;
	    var options = pass.options;
	    var stopped = false;

	    /**
	     * @brief          : Performs one iteration of the physical simulation
	     * @arg layoutInfo : LayoutInfo object already initialized
	     * @arg cy         : Cytoscape object
	     * @arg options    : Layout options
	     */
	    var step = function(layoutInfo, options, step) {
	      // var s = "\n\n###############################";
	      // s += "\nSTEP: " + step;
	      // s += "\n###############################\n";
	      // logDebug(s);

	      // Calculate node repulsions
	      calculateNodeForces(layoutInfo, options);
	      // Calculate edge forces
	      calculateEdgeForces(layoutInfo, options);
	      // Calculate gravity forces
	      calculateGravityForces(layoutInfo, options);
	      // Propagate forces from parent to child
	      propagateForces(layoutInfo, options);
	      // Update positions based on calculated forces
	      updatePositions(layoutInfo, options);
	    };

	    /**
	     * @brief : Computes the node repulsion forces
	     */
	    var calculateNodeForces = function(layoutInfo, options) {
	      // Go through each of the graphs in graphSet
	      // Nodes only repel each other if they belong to the same graph
	      // var s = 'calculateNodeForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i ++) {
	        var graph    = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Now get all the pairs of nodes
	        // Only get each pair once, (A, B) = (B, A)
	        for (var j = 0; j < numNodes; j++) {
	          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

	          for (var k = j + 1; k < numNodes; k++) {
	            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];

	            nodeRepulsion(node1, node2, layoutInfo, options);
	          }
	        }
	      }
	    };

	    /**
	     * @brief : Compute the node repulsion forces between a pair of nodes
	     */
	    var nodeRepulsion = function(node1, node2, layoutInfo, options) {
	      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

	      var cmptId1 = node1.cmptId;
	      var cmptId2 = node2.cmptId;

	      if( cmptId1 !== cmptId2 && !layoutInfo.isCompound ){ return; }

	      // Get direction of line connecting both node centers
	      var directionX = node2.positionX - node1.positionX;
	      var directionY = node2.positionY - node1.positionY;
	      // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

	      // If both centers are the same, apply a random force
	      if (0 === directionX && 0 === directionY) {
	        // s += "\nNodes have the same position.";
	        return; // TODO could be improved with random force
	      }

	      var overlap = nodesOverlap(node1, node2, directionX, directionY);

	      if (overlap > 0) {
	        // s += "\nNodes DO overlap.";
	        // s += "\nOverlap: " + overlap;
	        // If nodes overlap, repulsion force is proportional
	        // to the overlap
	        var force    = options.nodeOverlap * overlap;

	        // Compute the module and components of the force vector
	        var distance = Math.sqrt(directionX * directionX + directionY * directionY);
	        // s += "\nDistance: " + distance;
	        var forceX   = force * directionX / distance;
	        var forceY   = force * directionY / distance;

	      } else {
	        // s += "\nNodes do NOT overlap.";
	        // If there's no overlap, force is inversely proportional
	        // to squared distance

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(node1, directionX, directionY);
	        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);

	        // Use clipping points to compute distance
	        var distanceX   = point2.x - point1.x;
	        var distanceY   = point2.y - point1.y;
	        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	        var distance    = Math.sqrt(distanceSqr);
	        // s += "\nDistance: " + distance;

	        // Compute the module and components of the force vector
	        var force  = ( node1.nodeRepulsion + node2.nodeRepulsion ) / distanceSqr;
	        var forceX = force * distanceX / distance;
	        var forceY = force * distanceY / distance;
	      }

	      // Apply force
	      if( !node1.isLocked ){
	        node1.offsetX -= forceX;
	        node1.offsetY -= forceY;
	      }

	      if( !node2.isLocked ){
	        node2.offsetX += forceX;
	        node2.offsetY += forceY;
	      }

	      // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	      // logDebug(s);

	      return;
	    };

	    /**
	     * @brief  : Determines whether two nodes overlap or not
	     * @return : Amount of overlapping (0 => no overlap)
	     */
	    var nodesOverlap = function(node1, node2, dX, dY) {

	      if (dX > 0) {
	        var overlapX = node1.maxX - node2.minX;
	      } else {
	        var overlapX = node2.maxX - node1.minX;
	      }

	      if (dY > 0) {
	        var overlapY = node1.maxY - node2.minY;
	      } else {
	        var overlapY = node2.maxY - node1.minY;
	      }

	      if (overlapX >= 0 && overlapY >= 0) {
	        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
	      } else {
	        return 0;
	      }
	    };

	    /**
	     * @brief : Finds the point in which an edge (direction dX, dY) intersects
	     *          the rectangular bounding box of it's source/target node
	     */
	    var findClippingPoint = function(node, dX, dY) {

	      // Shorcuts
	      var X = node.positionX;
	      var Y = node.positionY;
	      var H = node.height || 1;
	      var W = node.width || 1;
	      var dirSlope     = dY / dX;
	      var nodeSlope    = H / W;

	      // var s = 'Computing clipping point of node ' + node.id +
	      //   " . Height:  " + H + ", Width: " + W +
	      //   "\nDirection " + dX + ", " + dY;
	      //
	      // Compute intersection
	      var res = {};
	      do {
	        // Case: Vertical direction (up)
	        if (0 === dX && 0 < dY) {
	          res.x = X;
	          // s += "\nUp direction";
	          res.y = Y + H / 2;
	          break;
	        }

	        // Case: Vertical direction (down)
	        if (0 === dX && 0 > dY) {
	          res.x = X;
	          res.y = Y + H / 2;
	          // s += "\nDown direction";
	          break;
	        }

	        // Case: Intersects the right border
	        if (0 < dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope) {
	          res.x = X + W / 2;
	          res.y = Y + (W * dY / 2 / dX);
	          // s += "\nRightborder";
	          break;
	        }

	        // Case: Intersects the left border
	        if (0 > dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope) {
	          res.x = X - W / 2;
	          res.y = Y - (W * dY / 2 / dX);
	          // s += "\nLeftborder";
	          break;
	        }

	        // Case: Intersects the top border
	        if (0 < dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope )) {
	          res.x = X + (H * dX / 2 / dY);
	          res.y = Y + H / 2;
	          // s += "\nTop border";
	          break;
	        }

	        // Case: Intersects the bottom border
	        if (0 > dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope )) {
	          res.x = X - (H * dX / 2 / dY);
	          res.y = Y - H / 2;
	          // s += "\nBottom border";
	          break;
	        }

	      } while (false);

	      // s += "\nClipping point found at " + res.x + ", " + res.y;
	      // logDebug(s);
	      return res;
	    };

	    /**
	     * @brief : Calculates all edge forces
	     */
	    var calculateEdgeForces = function(layoutInfo, options) {
	      // Iterate over all edges
	      for (var i = 0; i < layoutInfo.edgeSize; i++) {
	        // Get edge, source & target nodes
	        var edge     = layoutInfo.layoutEdges[i];
	        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
	        var source   = layoutInfo.layoutNodes[sourceIx];
	        var targetIx = layoutInfo.idToIndex[edge.targetId];
	        var target   = layoutInfo.layoutNodes[targetIx];

	        // Get direction of line connecting both node centers
	        var directionX = target.positionX - source.positionX;
	        var directionY = target.positionY - source.positionY;

	        // If both centers are the same, do nothing.
	        // A random force has already been applied as node repulsion
	        if (0 === directionX && 0 === directionY) {
	        return;
	        }

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(source, directionX, directionY);
	        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);


	        var lx = point2.x - point1.x;
	        var ly = point2.y - point1.y;
	        var l  = Math.sqrt(lx * lx + ly * ly);

	        var force  = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

	        if (0 !== l) {
	          var forceX = force * lx / l;
	          var forceY = force * ly / l;
	        } else {
	          var forceX = 0;
	          var forceY = 0;
	        }

	        // Add this force to target and source nodes
	        if( !source.isLocked ){
	          source.offsetX += forceX;
	          source.offsetY += forceY;
	        }

	        if( !target.isLocked ){
	          target.offsetX -= forceX;
	          target.offsetY -= forceY;
	        }

	        // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	        // logDebug(s);
	      }
	    };

	    /**
	     * @brief : Computes gravity forces for all nodes
	     */
	    var calculateGravityForces = function(layoutInfo, options) {
	      var distThreshold = 1;

	      // var s = 'calculateGravityForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i ++) {
	        var graph    = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Compute graph center
	        if (0 === i) {
	          var centerX   = layoutInfo.clientHeight / 2;
	          var centerY   = layoutInfo.clientWidth  / 2;
	        } else {
	          // Get Parent node for this graph, and use its position as center
	          var temp    = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
	          var parent  = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
	          var centerX = parent.positionX;
	          var centerY = parent.positionY;
	        }
	        // s = "Center found at: " + centerX + ", " + centerY;
	        // logDebug(s);

	        // Apply force to all nodes in graph
	        for (var j = 0; j < numNodes; j++) {
	          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
	          // s = "Node: " + node.id;

	          if( node.isLocked ){ continue; }

	          var dx = centerX - node.positionX;
	          var dy = centerY - node.positionY;
	          var d  = Math.sqrt(dx * dx + dy * dy);
	          if (d > distThreshold) {
	            var fx = options.gravity * dx / d;
	            var fy = options.gravity * dy / d;
	            node.offsetX += fx;
	            node.offsetY += fy;
	            // s += ": Applied force: " + fx + ", " + fy;
	          } else {
	            // s += ": skypped since it's too close to center";
	          }
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief          : This function propagates the existing offsets from
	     *                   parent nodes to its descendents.
	     * @arg layoutInfo : layoutInfo Object
	     * @arg cy         : cytoscape Object
	     * @arg options    : Layout options
	     */
	    var propagateForces = function(layoutInfo, options) {
	      // Inline implementation of a queue, used for traversing the graph in BFS order
	      var queue = [];
	      var start = 0;   // Points to the start the queue
	      var end   = -1;  // Points to the end of the queue

	      // logDebug('propagateForces');

	      // Start by visiting the nodes in the root graph
	      queue.push.apply(queue, layoutInfo.graphSet[0]);
	      end += layoutInfo.graphSet[0].length;

	      // Traverse the graph, level by level,
	      while (start <= end) {
	        // Get the node to visit and remove it from queue
	        var nodeId    = queue[start++];
	        var nodeIndex = layoutInfo.idToIndex[nodeId];
	        var node      = layoutInfo.layoutNodes[nodeIndex];
	        var children  = node.children;

	        // We only need to process the node if it's compound
	        if (0 < children.length && !node.isLocked) {
	          var offX = node.offsetX;
	          var offY = node.offsetY;

	          // var s = "Propagating offset from parent node : " + node.id +
	          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	          // s += "\n Children: " + children.toString();
	          // logDebug(s);

	          for (var i = 0; i < children.length; i++) {
	            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];
	            // Propagate offset
	            childNode.offsetX += offX;
	            childNode.offsetY += offY;
	            // Add children to queue to be visited
	            queue[++end] = children[i];
	          }

	          // Reset parent offsets
	          node.offsetX = 0;
	          node.offsetY = 0;
	        }

	      }
	    };

	    /**
	     * @brief : Updates the layout model positions, based on
	     *          the accumulated forces
	     */
	    var updatePositions = function(layoutInfo, options) {
	      // var s = 'Updating positions';
	      // logDebug(s);

	      // Reset boundaries for compound nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length) {
	          // logDebug("Resetting boundaries of compound node: " + n.id);
	          n.maxX = undefined;
	          n.minX = undefined;
	          n.maxY = undefined;
	          n.minY = undefined;
	        }
	      }

	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length || n.isLocked) {
	          // No need to set compound or locked node position
	          // logDebug("Skipping position update of node: " + n.id);
	          continue;
	        }
	        // s = "Node: " + n.id + " Previous position: (" +
	        // n.positionX + ", " + n.positionY + ").";

	        // Limit displacement in order to improve stability
	        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
	        n.positionX += tempForce.x;
	        n.positionY += tempForce.y;
	        n.offsetX = 0;
	        n.offsetY = 0;
	        n.minX    = n.positionX - n.width;
	        n.maxX    = n.positionX + n.width;
	        n.minY    = n.positionY - n.height;
	        n.maxY    = n.positionY + n.height;
	        // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	        // logDebug(s);

	        // Update ancestry boudaries
	        updateAncestryBoundaries(n, layoutInfo);
	      }

	      // Update size, position of compund nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if ( 0 < n.children.length && !n.isLocked ) {
	          n.positionX = (n.maxX + n.minX) / 2;
	          n.positionY = (n.maxY + n.minY) / 2;
	          n.width     = n.maxX - n.minX;
	          n.height    = n.maxY - n.minY;
	          // s = "Updating position, size of compound node " + n.id;
	          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	          // s += "\nWidth: " + n.width + ", Height: " + n.height;
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief : Limits a force (forceX, forceY) to be not
	     *          greater (in modulo) than max.
	     8          Preserves force direction.
	     */
	    var limitForce = function(forceX, forceY, max) {
	      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	      var force = Math.sqrt(forceX * forceX + forceY * forceY);

	      if (force > max) {
	        var res = {
	        x : max * forceX / force,
	        y : max * forceY / force
	        };

	      } else {
	        var res = {
	        x : forceX,
	        y : forceY
	        };
	      }

	      // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	      // logDebug(s);

	      return res;
	    };

	    /**
	     * @brief : Function used for keeping track of compound node
	     *          sizes, since they should bound all their subnodes.
	     */
	    var updateAncestryBoundaries = function(node, layoutInfo) {
	      // var s = "Propagating new position/size of node " + node.id;
	      var parentId = node.parentId;
	      if (null == parentId) {
	        // If there's no parent, we are done
	        // s += ". No parent node.";
	        // logDebug(s);
	        return;
	      }

	      // Get Parent Node
	      var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
	      var flag = false;

	      // MaxX
	      if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
	        p.maxX = node.maxX + p.padRight;
	        flag = true;
	        // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	      }

	      // MinX
	      if (null == p.minX || node.minX - p.padLeft < p.minX) {
	        p.minX = node.minX - p.padLeft;
	        flag = true;
	        // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	      }

	      // MaxY
	      if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
	        p.maxY = node.maxY + p.padBottom;
	        flag = true;
	        // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	      }

	      // MinY
	      if (null == p.minY || node.minY - p.padTop < p.minY) {
	        p.minY = node.minY - p.padTop;
	        flag = true;
	        // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	      }

	      // If updated boundaries, propagate changes upward
	      if (flag) {
	        // logDebug(s);
	        return updateAncestryBoundaries(p, layoutInfo);
	      }

	      // s += ". No changes in boundaries/position of parent node " + p.id;
	      // logDebug(s);
	      return;
	    };

	    var separateComponents = function(layutInfo, options){
	      var nodes = layoutInfo.layoutNodes;
	      var components = [];

	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var cid = node.cmptId;
	        var component = components[ cid ] = components[ cid ] || [];

	        component.push( node );
	      }

	      var totalA = 0;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[i];
	        c.x1 = Infinity;
	        c.x2 = -Infinity;
	        c.y1 = Infinity;
	        c.y2 = -Infinity;

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[j];

	          c.x1 = Math.min( c.x1, n.positionX - n.width/2 );
	          c.x2 = Math.max( c.x2, n.positionX + n.width/2 );
	          c.y1 = Math.min( c.y1, n.positionY - n.height/2 );
	          c.y2 = Math.max( c.y2, n.positionY + n.height/2 );
	        }

	        c.w = c.x2 - c.x1;
	        c.h = c.y2 - c.y1;

	        totalA += c.w * c.h;
	      }

	      components.sort(function( c1, c2 ){
	        return c2.w*c2.h - c1.w*c1.h;
	      });

	      var x = 0;
	      var y = 0;
	      var usedW = 0;
	      var rowH = 0;
	      var maxRowW = Math.sqrt( totalA ) * layoutInfo.clientWidth / layoutInfo.clientHeight;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[i];

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[j];

	          if( !n.isLocked ){
	            n.positionX += x;
	            n.positionY += y;
	          }
	        }

	        x += c.w + options.componentSpacing;
	        usedW += c.w + options.componentSpacing;
	        rowH = Math.max( rowH, c.h );

	        if( usedW > maxRowW ){
	          y += rowH + options.componentSpacing;
	          x = 0;
	          usedW = 0;
	          rowH = 0;
	        }
	      }
	    };

	    var mainLoop = function(i){
	      if( stopped ){
	        // logDebug("Layout manually stopped. Stopping computation in step " + i);
	        return false;
	      }

	      // Do one step in the phisical simulation
	      step(layoutInfo, options, i);

	      // Update temperature
	      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
	      // logDebug("New temperature: " + layoutInfo.temperature);

	      if (layoutInfo.temperature < options.minTemp) {
	        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	        return false;
	      }

	      return true;
	    };

	    var i = 0;
	    var loopRet;

	    do {
	      var f = 0;

	      while( f < options.refresh && i < options.numIter ){
	        var loopRet = mainLoop(i);
	        if( !loopRet ){ break; }

	        f++;
	        i++;
	      }

	      if( options.animate ){
	        broadcast( layoutInfo.layoutNodes ); // jshint ignore:line
	      }

	    } while ( loopRet && i + 1 < options.numIter );

	    separateComponents( layoutInfo, options );

	    return layoutInfo;
	  }).then(function( layoutInfoUpdated ){
	    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

	    thread.stop();
	    done();
	  });

	  var done = function(){
	    refresh({ 
	      force: true,
	      next: function(){
	        // Layout has finished
	        layout.one('layoutstop', options.stop);
	        layout.trigger({ type: 'layoutstop', layout: layout });
	      }
	    });
	  };

	  return this; // chaining
	};


	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	CoseLayout.prototype.stop = function(){
	  this.stopped = true;

	  if( this.thread ){
	    this.thread.stop();
	  }

	  this.trigger('layoutstop');

	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function(){
	  if( this.thread ){
	    this.thread.stop();
	  }

	  return this; // chaining
	};


	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */
	var createLayoutInfo = function(cy, layout, options) {
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();

	  var layoutInfo   = {
	    isCompound   : cy.hasCompoundNodes(),
	    layoutNodes  : [],
	    idToIndex    : {},
	    nodeSize     : nodes.size(),
	    graphSet     : [],
	    indexToGraph : [],
	    layoutEdges  : [],
	    edgeSize     : edges.size(),
	    temperature  : options.initialTemp,
	    clientWidth  : cy.width(),
	    clientHeight : cy.width(),
	    boundingBox  : math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	                     x1: 0, y1: 0, w: cy.width(), h: cy.height()
	                   } )
	  };

	  var components = options.eles.components();
	  var id2cmptId = {};

	  for( var i = 0; i < components.length; i++ ){
	    var component = components[i];

	    for( var j = 0; j < component.length; j++ ){
	      var node = component[j];

	      id2cmptId[ node.id() ] = i;
	    }
	  }

	  // Iterate over all nodes, creating layout nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = nodes[i];
	    var nbb = n.boundingBox();

	    var tempNode        = {};
	    tempNode.isLocked   = n.locked();
	    tempNode.id         = n.data('id');
	    tempNode.parentId   = n.data('parent');
	    tempNode.cmptId     = id2cmptId[ n.id() ];
	    tempNode.children   = [];
	    tempNode.positionX  = n.position('x');
	    tempNode.positionY  = n.position('y');
	    tempNode.offsetX    = 0;
	    tempNode.offsetY    = 0;
	    tempNode.height     = nbb.w;
	    tempNode.width      = nbb.h;
	    tempNode.maxX       = tempNode.positionX + tempNode.width  / 2;
	    tempNode.minX       = tempNode.positionX - tempNode.width  / 2;
	    tempNode.maxY       = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY       = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft    = parseFloat( n.style('padding-left') );
	    tempNode.padRight   = parseFloat( n.style('padding-right') );
	    tempNode.padTop     = parseFloat( n.style('padding-top') );
	    tempNode.padBottom  = parseFloat( n.style('padding-bottom') );

	    // forces
	    tempNode.nodeRepulsion = is.fn( options.nodeRepulsion ) ? options.nodeRepulsion.call( n, n ) : options.nodeRepulsion;

	    // Add new node
	    layoutInfo.layoutNodes.push(tempNode);
	    // Add entry to id-index map
	    layoutInfo.idToIndex[tempNode.id] = i;
	  }

	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0;   // Points to the start the queue
	  var end   = -1;  // Points to the end of the queue

	  var tempGraph = [];

	  // Second pass to add child information and
	  // initialize queue for hierarchical traversal
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var p_id = n.parentId;
	    // Check if node n has a parent node
	    if (null != p_id) {
	    // Add node Id to parent's list of children
	    layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
	    } else {
	    // If a node doesn't have a parent, then it's in the root graph
	    queue[++end] = n.id;
	    tempGraph.push(n.id);
	    }
	  }

	  // Add root graph to graphSet
	  layoutInfo.graphSet.push(tempGraph);

	  // Traverse the graph, level by level,
	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var node_id  = queue[start++];
	    var node_ix  = layoutInfo.idToIndex[node_id];
	    var node     = layoutInfo.layoutNodes[node_ix];
	    var children = node.children;
	    if (children.length > 0) {
	    // Add children nodes as a new graph to graph set
	    layoutInfo.graphSet.push(children);
	    // Add children to que queue to be visited
	    for (var i = 0; i < children.length; i++) {
	      queue[++end] = children[i];
	    }
	    }
	  }

	  // Create indexToGraph map
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    for (var j = 0; j < graph.length; j++) {
	    var index = layoutInfo.idToIndex[graph[j]];
	    layoutInfo.indexToGraph[index] = i;
	    }
	  }

	  // Iterate over all edges, creating Layout Edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    var e = edges[i];
	    var tempEdge = {};
	    tempEdge.id       = e.data('id');
	    tempEdge.sourceId = e.data('source');
	    tempEdge.targetId = e.data('target');

	    // Compute ideal length
	    var idealLength = is.fn( options.idealEdgeLength ) ? options.idealEdgeLength.call( e, e ) : options.idealEdgeLength;
	    var elasticity = is.fn( options.edgeElasticity ) ? options.edgeElasticity.call( e, e ) : options.edgeElasticity;

	    // Check if it's an inter graph edge
	    var sourceIx    = layoutInfo.idToIndex[tempEdge.sourceId];
	    var targetIx    = layoutInfo.idToIndex[tempEdge.targetId];
	    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
	    var targetGraph = layoutInfo.indexToGraph[targetIx];

	    if (sourceGraph != targetGraph) {
	      // Find lowest common graph ancestor
	      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);

	      // Compute sum of node depths, relative to lca graph
	      var lcaGraph = layoutInfo.graphSet[lca];
	      var depth    = 0;

	      // Source depth
	      var tempNode = layoutInfo.layoutNodes[sourceIx];
	      while ( -1 === lcaGraph.indexOf(tempNode.id) ) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // Target depth
	      tempNode = layoutInfo.layoutNodes[targetIx];
	      while ( -1 === lcaGraph.indexOf(tempNode.id) ) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	        //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	        //  ". Depth: " + depth);

	      // Update idealLength
	      idealLength *= depth * options.nestingFactor;
	    }

	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;

	    layoutInfo.layoutEdges.push(tempEdge);
	  }

	  // Finally, return layoutInfo object
	  return layoutInfo;
	};


	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */
	var findLCA = function(node1, node2, layoutInfo) {
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux(node1, node2, 0, layoutInfo);
	  if (2 > res.count) {
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};


	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancesters (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */
	var findLCA_aux = function(node1, node2, graphIx, layoutInfo) {
	  var graph = layoutInfo.graphSet[graphIx];
	  // If both nodes belongs to graphIx
	  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
	    return {count:2, graph:graphIx};
	  }

	  // Make recursive calls for all subgraphs
	  var c = 0;
	  for (var i = 0; i < graph.length; i++) {
	    var nodeId   = graph[i];
	    var nodeIx   = layoutInfo.idToIndex[nodeId];
	    var children = layoutInfo.layoutNodes[nodeIx].children;

	    // If the node has no child, skip it
	    if (0 === children.length) {
	    continue;
	    }

	    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
	    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);
	    if (0 === result.count) {
	    // Neither node1 nor node2 are present in this subgraph
	    continue;
	    } else if (1 === result.count) {
	    // One of (node1, node2) is present in this subgraph
	    c++;
	    if (2 === c) {
	      // We've already found both nodes, no need to keep searching
	      break;
	    }
	    } else {
	    // Both nodes are present in this subgraph
	    return result;
	    }
	  }

	  return {count:c, graph:graphIx};
	};


	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */
	var printLayoutInfo = function(layoutInfo) {
	  /* jshint ignore:start */

	  if (!DEBUG) {
	    return;
	  }
	  console.debug("layoutNodes:");
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var s =
	    "\nindex: "     + i +
	    "\nId: "        + n.id +
	    "\nChildren: "  + n.children.toString() +
	    "\nparentId: "  + n.parentId  +
	    "\npositionX: " + n.positionX +
	    "\npositionY: " + n.positionY +
	    "\nOffsetX: " + n.offsetX +
	    "\nOffsetY: " + n.offsetY +
	    "\npadLeft: " + n.padLeft +
	    "\npadRight: " + n.padRight +
	    "\npadTop: " + n.padTop +
	    "\npadBottom: " + n.padBottom;

	    console.debug(s);
	  }

	  console.debug('idToIndex');
	  for (var i in layoutInfo.idToIndex) {
	    console.debug("Id: " + i + "\nIndex: " + layoutInfo.idToIndex[i]);
	  }

	  console.debug('Graph Set');
	  var set = layoutInfo.graphSet;
	  for (var i = 0; i < set.length; i ++) {
	    console.debug("Set : " + i + ": " + set[i].toString());
	  }

	  var s = 'IndexToGraph';
	  for (var i = 0; i < layoutInfo.indexToGraph.length; i ++) {
	    s += "\nIndex : " + i + " Graph: "+ layoutInfo.indexToGraph[i];
	  }
	  console.debug(s);

	  s = 'Layout Edges';
	  for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {
	    var e = layoutInfo.layoutEdges[i];
	    s += "\nEdge Index: " + i + " ID: " + e.id +
	    " SouceID: " + e.sourceId + " TargetId: " + e.targetId +
	    " Ideal Length: " + e.idealLength;
	  }
	  console.debug(s);

	  s =  "nodeSize: " + layoutInfo.nodeSize;
	  s += "\nedgeSize: " + layoutInfo.edgeSize;
	  s += "\ntemperature: " + layoutInfo.temperature;
	  console.debug(s);

	  return;
	  /* jshint ignore:end */
	};


	/**
	 * @brief : Randomizes the position of all nodes
	 */
	var randomizePositions = function(layoutInfo, cy) {
	  var width     = layoutInfo.clientWidth;
	  var height    = layoutInfo.clientHeight;

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    // No need to randomize compound nodes or locked nodes
	    if ( 0 === n.children.length && !n.isLocked ) {
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};


	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var refreshPositions = function(layoutInfo, cy, options) {
	  // var s = 'Refreshing positions';
	  // logDebug(s);

	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var bb = layoutInfo.boundingBox;
	  var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

	  if( options.boundingBox ){
	    nodes.forEach(function( node ){
	      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

	      coseBB.x1 = Math.min( coseBB.x1, lnode.positionX );
	      coseBB.x2 = Math.max( coseBB.x2, lnode.positionX );

	      coseBB.y1 = Math.min( coseBB.y1, lnode.positionY );
	      coseBB.y2 = Math.max( coseBB.y2, lnode.positionY );
	    });

	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }

	  nodes.positions(function(i, ele) {
	    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];
	    // s = "Node: " + lnode.id + ". Refreshed position: (" +
	    // lnode.positionX + ", " + lnode.positionY + ").";
	    // logDebug(s);

	    if( options.boundingBox ){ // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  });

	  // Trigger layoutReady only on first call
	  if (true !== layoutInfo.ready) {
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one('layoutready', options.ready);
	    layout.trigger({ type: 'layoutready', layout: this });
	  }
	};

	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	module.exports = CoseLayout;

	},{"../../is":77,"../../math":79,"../../thread":92,"../../util":94}],49:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // padding used on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
	  condense: false, // uses all available space on false, uses minimal space on true
	  rows: undefined, // force num of rows in the grid
	  cols: undefined, // force num of columns in the grid
	  position: function( node ){}, // returns { row, col } for element
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function GridLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	GridLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  if( bb.h === 0 || bb.w === 0){
	    nodes.layoutPositions(this, options, function(){
	      return { x: bb.x1, y: bb.y1 };
	    });

	  } else {

	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt( cells * bb.h/bb.w );
	    var rows = Math.round( splits );
	    var cols = Math.round( bb.w/bb.h * splits );

	    var small = function(val){
	      if( val == null ){
	        return Math.min(rows, cols);
	      } else {
	        var min = Math.min(rows, cols);
	        if( min == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var large = function(val){
	      if( val == null ){
	        return Math.max(rows, cols);
	      } else {
	        var max = Math.max(rows, cols);
	        if( max == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns;

	    // if rows or columns were set in options, use those values
	    if( oRows != null && oCols != null ){
	      rows = oRows;
	      cols = oCols;
	    } else if( oRows != null && oCols == null ){
	      rows = oRows;
	      cols = Math.ceil( cells / rows );
	    } else if( oRows == null && oCols != null ){
	      cols = oCols;
	      rows = Math.ceil( cells / cols );
	    }

	    // otherwise use the automatic values and adjust accordingly

	    // if rounding was up, see if we can reduce rows or columns
	    else if( cols * rows > cells ){
	      var sm = small();
	      var lg = large();

	      // reducing the small side takes away the most cells, so try it first
	      if( (sm - 1) * lg >= cells ){
	        small(sm - 1);
	      } else if( (lg - 1) * sm >= cells ){
	        large(lg - 1);
	      }
	    } else {

	      // if rounding was too low, add rows or columns
	      while( cols * rows < cells ){
	        var sm = small();
	        var lg = large();

	        // try to add to larger side first (adds less in multiplication)
	        if( (lg + 1) * sm >= cells ){
	          large(lg + 1);
	        } else {
	          small(sm + 1);
	        }
	      }
	    }

	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;

	    if( options.condense ){
	      cellWidth = 0;
	      cellHeight = 0;
	    }

	    if( options.avoidOverlap ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var pos = node._private.position;

	        if( pos.x == null || pos.y == null ){ // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }

	        var nbb = node.boundingBox();
	        var p = options.avoidOverlapPadding;

	        var w = nbb.w + p;
	        var h = nbb.h + p;

	        cellWidth = Math.max( cellWidth, w );
	        cellHeight = Math.max( cellHeight, h );
	      }
	    }

	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function(row, col){
	      return cellUsed['c-' + row + '-' + col] ? true : false;
	    };

	    var use = function(row, col){
	      cellUsed['c-' + row + '-' + col] = true;
	    };

	    // to keep track of current cell position
	    var row = 0;
	    var col = 0;
	    var moveToNextCell = function(){
	      col++;
	      if( col >= cols ){
	        col = 0;
	        row++;
	      }
	    };

	    // get a cache of all the manual positions
	    var id2manPos = {};
	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[i];
	      var rcPos = options.position( node );

	      if( rcPos && (rcPos.row !== undefined || rcPos.col !== undefined) ){ // must have at least row or col def'd
	        var pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };

	        if( pos.col === undefined ){ // find unused col
	          pos.col = 0;

	          while( used(pos.row, pos.col) ){
	            pos.col++;
	          }
	        } else if( pos.row === undefined ){ // find unused row
	          pos.row = 0;

	          while( used(pos.row, pos.col) ){
	            pos.row++;
	          }
	        }

	        id2manPos[ node.id() ] = pos;
	        use( pos.row, pos.col );
	      }
	    }

	    var getPos = function(i, element){
	      var x, y;

	      if( element.locked() || element.isFullAutoParent() ){
	        return false;
	      }

	      // see if we have a manual position set
	      var rcPos = id2manPos[ element.id() ];
	      if( rcPos ){
	        x = rcPos.col * cellWidth + cellWidth/2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight/2 + bb.y1;

	      } else { // otherwise set automatically

	        while( used(row, col) ){
	          moveToNextCell();
	        }

	        x = col * cellWidth + cellWidth/2 + bb.x1;
	        y = row * cellHeight + cellHeight/2 + bb.y1;
	        use( row, col );

	        moveToNextCell();
	      }

	      return { x: x, y: y };

	    };

	    nodes.layoutPositions( this, options, getPos );
	  }

	  return this; // chaining

	};

	module.exports = GridLayout;

	},{"../../math":79,"../../util":94}],50:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  { name: 'breadthfirst', impl: _dereq_('./breadthfirst') },
	  { name: 'circle', impl: _dereq_('./circle') },
	  { name: 'concentric',impl: _dereq_('./concentric') },
	  { name: 'cose', impl: _dereq_('./cose') },
	  { name: 'grid', impl: _dereq_('./grid') },
	  { name: 'null', impl: _dereq_('./null') },
	  { name: 'preset', impl: _dereq_('./preset') },
	  { name: 'random', impl: _dereq_('./random') }
	];

	},{"./breadthfirst":45,"./circle":46,"./concentric":47,"./cose":48,"./grid":49,"./null":51,"./preset":52,"./random":53}],51:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	// default layout options
	var defaults = {
	  ready: function(){}, // on layoutready
	  stop: function(){} // on layoutstop
	};

	// constructor
	// options : object containing layout options
	function NullLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	// runs the layout
	NullLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout
	  var layout = this;

	  // cy is automatically populated for us in the constructor
	  var cy = options.cy; // jshint ignore:line

	  layout.trigger('layoutstart');

	  // puts all nodes at (0, 0)
	  eles.nodes().positions(function(){
	    return {
	      x: 0,
	      y: 0
	    };
	  });

	  // trigger layoutready when each node has had its position set at least once
	  layout.one('layoutready', options.ready);
	  layout.trigger('layoutready');

	  // trigger layoutstop when the layout stops (e.g. finishes)
	  layout.one('layoutstop', options.stop);
	  layout.trigger('layoutstop');

	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	NullLayout.prototype.stop = function(){
	  return this; // chaining
	};

	module.exports = NullLayout;

	},{"../../util":94}],52:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var is = _dereq_('../../is');

	var defaults = {
	  positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined, // the zoom level to set (prob want fit = false if set)
	  pan: undefined, // the pan level to set (prob want fit = false if set)
	  fit: true, // whether to fit to viewport
	  padding: 30, // padding on fit
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function PresetLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	PresetLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles;

	  var nodes = eles.nodes();
	  var posIsFn = is.fn( options.positions );

	  function getPosition(node){
	    if( options.positions == null ){
	      return null;
	    }

	    if( posIsFn ){
	      return options.positions.apply( node, [ node ] );
	    }

	    var pos = options.positions[node._private.data.id];

	    if( pos == null ){
	      return null;
	    }

	    return pos;
	  }

	  nodes.layoutPositions(this, options, function(i, node){
	    var position = getPosition(node);

	    if( node.locked() || position == null ){
	      return false;
	    }

	    return position;
	  });

	  return this; // chaining
	};

	module.exports = PresetLayout;

	},{"../../is":77,"../../util":94}],53:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit to viewport
	  padding: 30, // fit padding
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function RandomLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	RandomLayout.prototype.run = function(){
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var getPos = function( i, node ){
	    return {
	      x: bb.x1 + Math.round( Math.random() * bb.w ),
	      y: bb.y1 + Math.round( Math.random() * bb.h )
	    };
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = RandomLayout;

	},{"../../math":79,"../../util":94}],54:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');
	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');

	var BRp = {};

	BRp.arrowShapeHeight = 0.3;

	BRp.registerArrowShapes = function(){
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this;

	  // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function( x, y, size, angle, translation, padding ){
	    var x1 = translation.x - size/2 - padding;
	    var x2 = translation.x + size/2 + padding;
	    var y1 = translation.y - size/2 - padding;
	    var y2 = translation.y + size/2 + padding;

	    var inside = (x1 <= x && x <= x2) && (y1 <= y && y <= y2);

	    return inside;
	  };

	  var transform = function( x, y, size, angle, translation ){
	    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
	    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);

	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;

	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;

	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };

	  var transformPoints = function( pts, size, angle, translation ){
	    var retPts = [];

	    for( var i = 0; i < pts.length; i += 2 ){
	      var x = pts[i];
	      var y = pts[i + 1];

	      retPts.push( transform(x, y, size, angle, translation) );
	    }

	    return retPts;
	  };

	  var pointsToArr = function( pts ){
	    var ret = [];

	    for( var i = 0; i < pts.length; i++ ){
	      var p = pts[i];

	      ret.push( p.x, p.y );
	    }

	    return ret;
	  };

	  var defineArrowShape = function( name, defn ){
	    if( is.string(defn) ){
	      defn = arrowShapes[ defn ];
	    }

	    arrowShapes[ name ] = util.extend( {
	      name: name,

	      points: [
	        -0.15, -0.3,
	        0.15, -0.3,
	        0.15, 0.3,
	        -0.15, 0.3
	      ],

	      collide: function( x, y, size, angle, translation, padding ){
	        var points = pointsToArr( transformPoints( this.points, size + 2*padding, angle, translation ) );
	        var inside = math.pointInsidePolygonPoints( x, y, points );

	        return inside;
	      },

	      roughCollide: bbCollide,

	      draw: function( context, size, angle, translation ){
	        var points = transformPoints( this.points, size, angle, translation );

	        renderer.arrowShapeImpl('polygon')( context, points );
	      },

	      spacing: function( edge ){
	        return 0;
	      },

	      gap: function( edge ){
	        return edge._private.style['width'].pfValue * 2;
	      }
	    }, defn );
	  };

	  defineArrowShape( 'none', {
	    collide: util.falsify,

	    roughCollide: util.falsify,

	    draw: util.noop,

	    spacing: util.zeroify,

	    gap: util.zeroify
	  } );

	  defineArrowShape( 'triangle', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'arrow', 'triangle' );

	  defineArrowShape( 'triangle-backcurve', {
	    points: arrowShapes['triangle'].points,

	    controlPoint: [ 0, -0.15 ],

	    roughCollide: bbCollide,

	    draw: function( context, size, angle, translation ){
	      var ptsTrans = transformPoints( this.points, size, angle, translation );
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform( ctrlPt[0], ctrlPt[1], size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, ptsTrans, ctrlPtTrans );
	    },

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );


	  defineArrowShape( 'triangle-tee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      -0.15, -0.3
	    ],

	    pointsTee: [
	      -0.15, -0.4,
	      -0.15, -0.5,
	      0.15, -0.5,
	      0.15, -0.4
	    ],

	    collide: function( x, y, size, angle, translation, padding ){
	      var triPts = pointsToArr( transformPoints( this.points, size + 2*padding, angle, translation ) );
	      var teePts = pointsToArr( transformPoints( this.pointsTee, size + 2*padding, angle, translation ) );

	      var inside = math.pointInsidePolygonPoints( x, y, triPts ) || math.pointInsidePolygonPoints( x, y, teePts );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      var triPts = transformPoints( this.points, size, angle, translation );
	      var teePts = transformPoints( this.pointsTee, size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, triPts, teePts );
	    }
	  } );

	  defineArrowShape( 'vee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      0, -0.15
	    ],

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );

	  defineArrowShape( 'half-triangle-overshot', {
	    points: [
	      0, -0.25,
	      -0.5, -0.25,
	      0.5, 0.25
	    ],

	    leavePathOpen: true,

	    matchEdgeWidth: true
	  } );

	  defineArrowShape( 'circle', {
	    radius: 0.15,

	    collide: function( x, y, size, angle, translation, padding ){
	      var t = translation;
	      var inside = ( Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2*padding) * this.radius, 2) );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      renderer.arrowShapeImpl( this.name )( context, translation.x, translation.y, this.radius * size );
	    },

	    spacing: function( edge ){
	      return renderer.getArrowWidth(edge._private.style['width'].pfValue)
	        * this.radius;
	    }
	  } );

	  defineArrowShape( 'inhibitor', {
	    points: [
	      -0.25, 0,
	      -0.25, -0.1,
	      0.25, -0.1,
	      0.25, 0
	    ],

	    spacing: function( edge ){
	      return 1;
	    },

	    gap: function( edge ){
	      return 1;
	    }
	  } );

	  defineArrowShape( 'tee', 'inhibitor' );

	  defineArrowShape( 'square', {
	    points: [
	      -0.15, 0.00,
	      0.15, 0.00,
	      0.15, -0.3,
	      -0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'diamond', {
	    points: [
	      -0.15, -0.15,
	      0, -0.3,
	      0.15, -0.15,
	      0, 0
	    ],

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );

	};

	module.exports = BRp;

	},{"../../../is":77,"../../../math":79,"../../../util":94}],55:[function(_dereq_,module,exports){
	'use strict';

	var BRp = {};

	var delEleCache = function( r ){
	  r.eleEache = null;
	};

	var getEleCache = function( r ){
	  if( !r.eleEache ){
	    r.eleEache = {
	      nodes: r.cy.nodes(),
	      edges: r.cy.edges()
	    };
	  }

	  return r.eleEache;
	};

	BRp.getCachedElements = function(){
	  return getEleCache( this );
	};

	BRp.getCachedNodes = function(){
	  return getEleCache( this ).nodes;
	};

	BRp.getCachedEdges = function(){
	  return getEleCache( this ).edges;
	};

	BRp.updateElementsCache = function(){
	  var r = this;

	  delEleCache( r );

	  return getEleCache( r );
	};

	module.exports = BRp;

	},{}],56:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');
	var is = _dereq_('../../../is');
	var zIndexSort = _dereq_('../../../collection/zsort');

	var BRp = {};

	// Project mouse
	BRp.projectIntoViewport = function(clientX, clientY) {
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];

	  var x = clientX - offsetLeft;
	  var y = clientY - offsetTop;

	  x -= this.cy.pan().x; y -= this.cy.pan().y; x /= this.cy.zoom(); y /= this.cy.zoom();
	  return [x, y];
	};

	BRp.findContainerClientCoords = function() {
	  var container = this.container;

	  var bb = this.containerBB = this.containerBB || container.getBoundingClientRect();

	  return [bb.left, bb.top, bb.right - bb.left, bb.bottom - bb.top];
	};

	BRp.invalidateContainerClientCoordsCache = function(){
	  this.containerBB = null;
	};

	// Find nearest element
	BRp.findNearestElement = function(x, y, visibleElementsOnly, isTouch){
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = [];
	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;

	  function checkNode(node){
	    var _p = node._private;

	    if( _p.style['events'].strValue === 'no' ){ return; }

	    var width = node.outerWidth() + 2*nodeThreshold;
	    var height = node.outerHeight() + 2*nodeThreshold;
	    var hw = width/2;
	    var hh = height/2;
	    var pos = _p.position;

	    if(
	      pos.x - hw <= x && x <= pos.x + hw // bb check x
	        &&
	      pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ){
	      var visible = !visibleElementsOnly || ( node.visible() && !node.transparent() );

	      // exit early if invisible edge and must be visible
	      if( visibleElementsOnly && !visible ){
	        return;
	      }

	      var shape = r.nodeShapes[ self.getNodeShape(node) ];

	      if(
	        shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)
	      ){
	        near.push( node );
	      }

	    }
	  }

	  function checkEdge(edge){
	    var _p = edge._private;

	    if( _p.style['events'].strValue === 'no' ){ return; }

	    var rs = _p.rscratch;
	    var style = _p.style;
	    var width = style['width'].pfValue/2 + edgeThreshold; // more like a distance radius from centre
	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var inEdgeBB = false;
	    var sqDist;

	    // exit early if invisible edge and must be visible
	    var passedVisibilityCheck;
	    var passesVisibilityCheck = function(){
	      if( passedVisibilityCheck !== undefined ){
	        return passedVisibilityCheck;
	      }

	      if( !visibleElementsOnly ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      var visible = edge.visible() && !edge.transparent();
	      if( visible ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      passedVisibilityCheck = false;
	      return false;
	    };

	    if( rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack' ){
	      var pts = rs.allpts;

	      for( var i = 0; i + 3 < pts.length; i += 2 ){
	        if(
	          (inEdgeBB = math.inLineVicinity(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], width2))
	            && passesVisibilityCheck() &&
	          widthSq > ( sqDist = math.sqDistanceToFiniteLine(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3]) )
	        ){
	          near.push( edge );
	        }
	      }

	    } else if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	      var pts = rs.allpts;
	      for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	        if(
	          (inEdgeBB = math.inBezierVicinity(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], pts[i+4], pts[i+5], width2))
	            && passesVisibilityCheck() &&
	          (widthSq > (sqDist = math.sqDistanceToQuadraticBezier(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], pts[i+4], pts[i+5])) )
	        ){
	          near.push( edge );
	        }
	      }
	    }

	    // if we're close to the edge but didn't hit it, maybe we hit its arrows
	    if( inEdgeBB && passesVisibilityCheck() && near.length === 0 || near[near.length - 1] !== edge ){
	      var src = src || _p.source;
	      var tgt = tgt || _p.target;

	      var eWidth = style['width'].pfValue;
	      var arSize = self.getArrowWidth( eWidth );

	      var arrows = [
	        { name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle },
	        { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle },
	        { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle },
	        { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }
	      ];

	      for( var i = 0; i < arrows.length; i++ ){
	        var ar = arrows[i];
	        var shape = r.arrowShapes[ style[ar.name+'-arrow-shape'].value ];

	        if(
	          shape.roughCollide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold)
	           &&
	          shape.collide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold)
	        ){
	          near.push( edge );
	          break;
	        }
	      }
	    }

	    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
	    if( hasCompounds &&  near.length > 0 && near[ near.length - 1 ] === edge ){
	      checkNode( src );
	      checkNode( tgt );
	    }
	  }

	  function checkLabel(ele){
	    var _p = ele._private;
	    var th = labelThreshold;

	    if( _p.style['text-events'].strValue === 'no' ){ return; }

	    // adjust bb w/ angle
	    if( _p.group === 'edges' && _p.style['edge-text-rotation'].strValue === 'autorotate' ){

	      var rstyle = _p.rstyle;
	      var lw = rstyle.labelWidth + 2*th;
	      var lh = rstyle.labelHeight + 2*th;
	      var lx = rstyle.labelX;
	      var ly = rstyle.labelY;

	      var theta = _p.rscratch.labelAngle;
	      var cos = Math.cos( theta );
	      var sin = Math.sin( theta );

	      var rotate = function( x, y ){
	        x = x - lx;
	        y = y - ly;

	        return {
	          x: x*cos - y*sin + lx,
	          y: x*sin + y*cos + ly
	        };
	      };

	      var lx1 = lx - lw/2;
	      var lx2 = lx + lw/2;
	      var ly1 = ly - lh/2;
	      var ly2 = ly + lh/2;

	      var px1y1 = rotate( lx1, ly1 );
	      var px1y2 = rotate( lx1, ly2 );
	      var px2y1 = rotate( lx2, ly1 );
	      var px2y2 = rotate( lx2, ly2 );

	      var points = [
	        px1y1.x, px1y1.y,
	        px2y1.x, px2y1.y,
	        px2y2.x, px2y2.y,
	        px1y2.x, px1y2.y
	      ];

	      if( math.pointInsidePolygonPoints( x, y, points ) ){
	        near.push( ele );
	      }

	    } else {
	      var bb = ele.boundingBox({
	        includeLabels: true,
	        includeNodes: false,
	        includeEdges: false
	      });

	      // adjust bb w/ threshold
	      bb.x1 -= th;
	      bb.y1 -= th;
	      bb.x2 += th;
	      bb.y2 += th;
	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	      if( math.inBoundingBox( bb, x, y ) ){
	        near.push( ele );
	      }
	    }

	  }

	  for( var i = eles.length - 1; i >= 0; i-- ){ // reverse order for precedence
	    var ele = eles[i];
	    var _p = ele._private;

	    if( near.length > 0 ){ break; } // since we check in z-order, first found is top and best result => exit early

	    if( _p.group === 'nodes' ){
	      checkNode( ele );

	    } else  { // then edge
	      checkEdge( ele );
	    }

	    checkLabel( ele );

	  }


	  if( near.length > 0 ){
	    return near[ near.length - 1 ];
	  } else {
	    return null;
	  }
	};

	// 'Give me everything from this box'
	BRp.getAllInBox = function(x1, y1, x2, y2) {
	  var nodes = this.getCachedNodes();
	  var edges = this.getCachedEdges();
	  var box = [];

	  var x1c = Math.min(x1, x2);
	  var x2c = Math.max(x1, x2);
	  var y1c = Math.min(y1, y2);
	  var y2c = Math.max(y1, y2);

	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;

	  var boxBb = math.makeBoundingBox({
	    x1: x1, y1: y1,
	    x2: x2, y2: y2
	  });

	  for ( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var nodeBb = node.boundingBox({
	      includeNodes: true,
	      includeEdges: false,
	      includeLabels: false
	    });

	    if( math.boundingBoxesIntersect(boxBb, nodeBb) ){
	      box.push(nodes[i]);
	    }
	  }

	  for( var e = 0; e < edges.length; e++ ){
	    var edge = edges[e];
	    var _p = edge._private;
	    var rs = _p.rscratch;

	    if( rs.startX != null && rs.startY != null && !math.inBoundingBox( boxBb, rs.startX, rs.startY ) ){ continue; }
	    if( rs.endX != null && rs.endY != null && !math.inBoundingBox( boxBb, rs.endX, rs.endY ) ){ continue; }

	    if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack' ){

	      var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	      var allInside = true;

	      for( var i = 0; i < pts.length; i++ ){
	        if( !math.pointInBoundingBox( boxBb, pts[i] ) ){
	          allInside = false;
	          break;
	        }
	      }

	      if( allInside ){
	        box.push( edge );
	      }

	    } else if( rs.edgeType === 'haystack' || rs.edgeType === 'straight' ){
	      box.push( edge );
	    }

	  }

	  return box;
	};


	/**
	 * Returns the shape of the given node. If the height or width of the given node
	 * is set to auto, the node is considered to be a compound.
	 *
	 * @param node          a node
	 * @return {String}     shape of the node
	 */
	BRp.getNodeShape = function( node ){
	  var r = this;
	  var style = node._private.style;
	  var shape = style['shape'].value;

	  if( node.isParent() ){
	    if( shape === 'rectangle' || shape === 'roundrectangle' ){
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }

	  if( shape === 'polygon' ){
	    var points = style['shape-polygon-points'].value;

	    return r.nodeShapes.makePolygon( points ).name;
	  }

	  return shape;
	};

	BRp.updateCachedZSortedEles = function(){
	  this.getCachedZSortedEles( true );
	};

	BRp.getCachedZSortedEles = function( forceRecalc ){
	  var lastNodes = this.lastZOrderCachedNodes;
	  var lastEdges = this.lastZOrderCachedEdges;
	  var nodes = this.getCachedNodes();
	  var edges = this.getCachedEdges();
	  var eles = [];

	  if( forceRecalc || !lastNodes || !lastEdges || lastNodes !== nodes || lastEdges !== edges ){
	    //console.time('cachezorder')

	    for( var i = 0; i < nodes.length; i++ ){
	      var n = nodes[i];

	      if( n.animated() || (n.visible() && !n.transparent()) ){
	        eles.push( n );
	      }
	    }

	    for( var i = 0; i < edges.length; i++ ){
	      var e = edges[i];

	      if( e.animated() || (e.visible() && !e.transparent()) ){
	        eles.push( e );
	      }
	    }

	    eles.sort( zIndexSort );
	    this.cachedZSortedEles = eles;
	    //console.log('make cache')

	    //console.timeEnd('cachezorder')
	  } else {
	    eles = this.cachedZSortedEles;
	    //console.log('read cache')
	  }

	  this.lastZOrderCachedNodes = nodes;
	  this.lastZOrderCachedEdges = edges;

	  return eles;
	};

	function pushBezierPts(edge, pts){
	  var qbezierAt = function( p1, p2, p3, t ){ return math.qbezierAt(p1, p2, p3, t); };
	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.05 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.05 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.25 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.25 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.4 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.4 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.5 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.5 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.6 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.6 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.75 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.75 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.95 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.95 )
	  });
	}

	BRp.projectLines = function( edge ){
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType;

	  if( et === 'multibezier' ||  et === 'bezier' ||  et === 'self' ||  et === 'compound' ){
	    var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

	    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	      pushBezierPts( edge, rs.allpts.slice(i, i+6) );
	    }
	  } else if(  et === 'segments' ){
	    var lpts = _p.rstyle.linePts = [];

	    for( var i = 0; i + 1 < rs.allpts.length; i += 2 ){
	      lpts.push({
	        x: rs.allpts[i],
	        y: rs.allpts[i+1]
	      });
	    }
	  } else if( et === 'haystack' ){
	    var hpts = rs.haystackPts;

	    _p.rstyle.haystackPts = [
	      { x: hpts[0], y: hpts[1] },
	      { x: hpts[2], y: hpts[3] }
	    ];
	  }
	};

	BRp.projectBezier = BRp.projectLines;

	BRp.recalculateNodeLabelProjection = function( node ){
	  var content = node._private.style['label'].strValue;
	  if( !content || content.match(/^\s+$/) ){ return; }

	  var textX, textY;
	  var nodeWidth = node.outerWidth();
	  var nodeHeight = node.outerHeight();
	  var nodePos = node._private.position;
	  var textHalign = node._private.style['text-halign'].strValue;
	  var textValign = node._private.style['text-valign'].strValue;
	  var rs = node._private.rscratch;
	  var rstyle = node._private.rstyle;

	  switch( textHalign ){
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2;
	      break;

	    case 'right':
	      textX = nodePos.x + nodeWidth / 2;
	      break;

	    default: // e.g. center
	      textX = nodePos.x;
	  }

	  switch( textValign ){
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2;
	      break;

	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2;
	      break;

	    default: // e.g. middle
	      textY = nodePos.y;
	  }

	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions( node );
	};

	BRp.recalculateEdgeLabelProjection = function( edge ){
	  var content = edge._private.style['label'].strValue;
	  if( !content || content.match(/^\s+$/) ){ return; }

	  var textX, textY;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  //var style = _p.style;
	  var rstyle = _p.rstyle;

	  textX = rs.midX;
	  textY = rs.midY;

	  // add center point to style so bounding box calculations can use it
	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions( edge );
	};

	BRp.applyLabelDimensions = function( ele ){
	  var rs = ele._private.rscratch;
	  var rstyle = ele._private.rstyle;

	  var text = this.getLabelText( ele );
	  var labelDims = this.calculateLabelDimensions( ele, text );

	  rstyle.labelWidth = labelDims.width;
	  rs.labelWidth = labelDims.width;

	  rstyle.labelHeight = labelDims.height;
	  rs.labelHeight = labelDims.height;
	};

	BRp.getLabelText = function( ele ){
	  var style = ele._private.style;
	  var text = ele._private.style['label'].strValue;
	  var textTransform = style['text-transform'].value;
	  var rscratch = ele._private.rscratch;

	  if (textTransform == 'none') {
	  } else if (textTransform == 'uppercase') {
	    text = text.toUpperCase();
	  } else if (textTransform == 'lowercase') {
	    text = text.toLowerCase();
	  }

	  if( style['text-wrap'].value === 'wrap' ){
	    //console.log('wrap');

	    // save recalc if the label is the same as before
	    if( rscratch.labelWrapKey === rscratch.labelKey ){
	      // console.log('wrap cache hit');
	      return rscratch.labelWrapCachedText;
	    }
	    // console.log('wrap cache miss');

	    var lines = text.split('\n');
	    var maxW = style['text-max-width'].pfValue;
	    var wrappedLines = [];

	    for( var l = 0; l < lines.length; l++ ){
	      var line = lines[l];
	      var lineDims = this.calculateLabelDimensions( ele, line, 'line=' + line );
	      var lineW = lineDims.width;

	      if( lineW > maxW ){ // line is too long
	        var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space
	        var subline = '';

	        for( var w = 0; w < words.length; w++ ){
	          var word = words[w];
	          var testLine = subline.length === 0 ? word : subline + ' ' + word;
	          var testDims = this.calculateLabelDimensions( ele, testLine, 'testLine=' + testLine );
	          var testW = testDims.width;

	          if( testW <= maxW ){ // word fits on current line
	            subline += word + ' ';
	          } else { // word starts new line
	            wrappedLines.push( subline );
	            subline = word + ' ';
	          }
	        }

	        // if there's remaining text, put it in a wrapped line
	        if( !subline.match(/^\s+$/) ){
	          wrappedLines.push( subline );
	        }
	      } else { // line is already short enough
	        wrappedLines.push( line );
	      }
	    } // for

	    rscratch.labelWrapCachedLines = wrappedLines;
	    rscratch.labelWrapCachedText = text = wrappedLines.join('\n');
	    rscratch.labelWrapKey = rscratch.labelKey;

	    // console.log(text)
	  } // if wrap

	  return text;
	};

	BRp.calculateLabelDimensions = function( ele, text, extraKey ){
	  var r = this;
	  var style = ele._private.style;
	  var fStyle = style['font-style'].strValue;
	  var size = style['font-size'].pfValue + 'px';
	  var family = style['font-family'].strValue;
	  // var variant = style['font-variant'].strValue;
	  var weight = style['font-weight'].strValue;

	  var cacheKey = ele._private.labelKey;

	  if( extraKey ){
	    cacheKey += '$@$' + extraKey;
	  }

	  var cache = r.labelDimCache || (r.labelDimCache = {});

	  if( cache[cacheKey] ){
	    return cache[cacheKey];
	  }

	  var div = this.labelCalcDiv;

	  if( !div ){
	    div = this.labelCalcDiv = document.createElement('div');
	    document.body.appendChild( div );
	  }

	  var ds = div.style;

	  // from ele style
	  ds.fontFamily = family;
	  ds.fontStyle = fStyle;
	  ds.fontSize = size;
	  // ds.fontVariant = variant;
	  ds.fontWeight = weight;

	  // forced style
	  ds.position = 'absolute';
	  ds.left = '-9999px';
	  ds.top = '-9999px';
	  ds.zIndex = '-1';
	  ds.visibility = 'hidden';
	  ds.pointerEvents = 'none';
	  ds.padding = '0';
	  ds.lineHeight = '1';

	  if( style['text-wrap'].value === 'wrap' ){
	    ds.whiteSpace = 'pre'; // so newlines are taken into account
	  } else {
	    ds.whiteSpace = 'normal';
	  }

	  // put label content in div
	  div.textContent = text;

	  cache[cacheKey] = {
	    width: div.clientWidth,
	    height: div.clientHeight
	  };

	  return cache[cacheKey];
	};

	BRp.recalculateRenderedStyle = function( eles ){
	  var edges = [];
	  var nodes = [];
	  var handledEdge = {};

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var _p = ele._private;
	    var style = _p.style;
	    var rs = _p.rscratch;
	    var rstyle = _p.rstyle;
	    var id = _p.data.id;
	    var bbStyleSame = rs.boundingBoxKey != null && _p.boundingBoxKey === rs.boundingBoxKey;
	    var labelStyleSame = rs.labelKey != null && _p.labelKey === rs.labelKey;
	    var styleSame = bbStyleSame && labelStyleSame;

	    if( _p.group === 'nodes' ){
	      var pos = _p.position;
	      var posSame = rstyle.nodeX != null && rstyle.nodeY != null && pos.x === rstyle.nodeX && pos.y === rstyle.nodeY;
	      var wSame = rstyle.nodeW != null && rstyle.nodeW === style['width'].pfValue;
	      var hSame = rstyle.nodeH != null && rstyle.nodeH === style['height'].pfValue;

	      if( !posSame || !styleSame || !wSame || !hSame ){
	        nodes.push( ele );
	      }

	      rstyle.nodeX = pos.x;
	      rstyle.nodeY = pos.y;
	      rstyle.nodeW = style['width'].pfValue;
	      rstyle.nodeH = style['height'].pfValue;
	    } else { // edges

	      var srcPos = _p.source._private.position;
	      var tgtPos = _p.target._private.position;
	      var srcSame = rstyle.srcX != null && rstyle.srcY != null && srcPos.x === rstyle.srcX && srcPos.y === rstyle.srcY;
	      var tgtSame = rstyle.tgtX != null && rstyle.tgtY != null && tgtPos.x === rstyle.tgtX && tgtPos.y === rstyle.tgtY;
	      var positionsSame = srcSame && tgtSame;

	      if( !positionsSame || !styleSame ){
	        if( rs.edgeType === 'bezier' || rs.edgeType === 'straight' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	          if( !handledEdge[ id ] ){
	            edges.push( ele );
	            handledEdge[ id ] = true;

	            var parallelEdges = ele.parallelEdges();
	            for( var i = 0; i < parallelEdges.length; i++ ){
	              var pEdge = parallelEdges[i];
	              var pId = pEdge._private.data.id;

	              if( !handledEdge[ pId ] ){
	                edges.push( pEdge );
	                handledEdge[ pId ] = true;
	              }

	            }
	          }
	        } else {
	          edges.push( ele );
	        }
	      } // if positions diff

	      // update rstyle positions
	      rstyle.srcX = srcPos.x;
	      rstyle.srcY = srcPos.y;
	      rstyle.tgtX = tgtPos.x;
	      rstyle.tgtY = tgtPos.y;

	    } // if edges

	    rs.boundingBoxKey = _p.boundingBoxKey;
	    rs.labelKey = _p.labelKey;
	  }

	  this.recalculateEdgeProjections( edges );
	  this.recalculateLabelProjections( nodes, edges );
	};

	BRp.recalculateLabelProjections = function( nodes, edges ){
	  for( var i = 0; i < nodes.length; i++ ){
	    this.recalculateNodeLabelProjection( nodes[i] );
	  }

	  for( var i = 0; i < edges.length; i++ ){
	    this.recalculateEdgeLabelProjection( edges[i] );
	  }
	};

	BRp.recalculateEdgeProjections = function( edges ){
	  this.findEdgeControlPoints( edges );
	};


	// Find edge control points
	BRp.findEdgeControlPoints = function(edges) {
	  if( !edges || edges.length === 0 ){ return; }

	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {};
	  var pairIds = [];
	  var haystackEdges = [];
	  var autorotateEdges = [];

	  // create a table of edge (src, tgt) => list of edges between them
	  var pairId;
	  for (var i = 0; i < edges.length; i++){
	    var edge = edges[i];
	    var _p = edge._private;
	    var data = _p.data;
	    var style = _p.style;
	    var curveStyle = style['curve-style'].value;
	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	    // ignore edges who are not to be displayed
	    // they shouldn't take up space
	    if( style.display.value === 'none' ){
	      continue;
	    }

	    if( style['edge-text-rotation'].strValue === 'autorotate' ){
	      autorotateEdges.push( edge );
	    }

	    if( curveStyle === 'haystack' ){
	      haystackEdges.push( edge );
	      continue;
	    }

	    var srcId = data.source;
	    var tgtId = data.target;

	    pairId = srcId > tgtId ?
	      tgtId + '$-$' + srcId :
	      srcId + '$-$' + tgtId ;

	    if( edgeIsUnbundled ){
	      pairId = 'unbundled' + '$-$' + data.id;
	    }

	    if( hashTable[pairId] == null ){
	      hashTable[pairId] = [];
	      pairIds.push( pairId );
	    }

	    hashTable[pairId].push( edge );

	    if( edgeIsUnbundled ){
	      hashTable[pairId].hasUnbundled = true;
	    }
	  }

	  var src, tgt, src_p, tgt_p, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
	  var vectorNormInverse;
	  var badBezier;

	  // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount
	  for (var p = 0; p < pairIds.length; p++) {
	    pairId = pairIds[p];
	    var pairEdges = hashTable[pairId];

	    // for each pair id, the edges should be sorted by index
	    pairEdges.sort(function(edge1, edge2){
	      return edge1._private.index - edge2._private.index;
	    });

	    src = pairEdges[0]._private.source;
	    tgt = pairEdges[0]._private.target;

	    src_p = src._private;
	    tgt_p = tgt._private;

	    // make sure src/tgt distinction is consistent
	    // (src/tgt in this case are just for ctrlpts and don't actually have to be true src/tgt)
	    if( src_p.data.id > tgt_p.data.id ){
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }

	    srcPos = src_p.position;
	    tgtPos = tgt_p.position;

	    srcW = src.outerWidth();
	    srcH = src.outerHeight();

	    tgtW = tgt.outerWidth();
	    tgtH = tgt.outerHeight();

	    srcShape = r.nodeShapes[ this.getNodeShape(src) ];
	    tgtShape = r.nodeShapes[ this.getNodeShape(tgt) ];

	    badBezier = false;


	    if( (pairEdges.length > 1 && src !== tgt) || pairEdges.hasUnbundled ){

	      // pt outside src shape to calc distance/displacement from src to tgt
	      var srcOutside = srcShape.intersectLine(
	        srcPos.x,
	        srcPos.y,
	        srcW,
	        srcH,
	        tgtPos.x,
	        tgtPos.y,
	        0
	      );

	      // pt outside tgt shape to calc distance/displacement from src to tgt
	      var tgtOutside = tgtShape.intersectLine(
	        tgtPos.x,
	        tgtPos.y,
	        tgtW,
	        tgtH,
	        srcPos.x,
	        srcPos.y,
	        0
	      );

	      var midptSrcPts = {
	        x1: srcOutside[0],
	        x2: tgtOutside[0],
	        y1: srcOutside[1],
	        y2: tgtOutside[1]
	      };

	      var dy = ( tgtOutside[1] - srcOutside[1] );
	      var dx = ( tgtOutside[0] - srcOutside[0] );
	      var l = Math.sqrt( dx*dx + dy*dy );

	      var vector = {
	        x: dx,
	        y: dy
	      };

	      var vectorNorm = {
	        x: vector.x/l,
	        y: vector.y/l
	      };
	      vectorNormInverse = {
	        x: -vectorNorm.y,
	        y: vectorNorm.x
	      };


	      // if src intersection is inside tgt or tgt intersection is inside src, then no ctrl pts to draw
	      if(
	        tgtShape.checkPoint( srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y )  ||
	        srcShape.checkPoint( tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y )
	      ){
	        vectorNormInverse = {};
	        badBezier = true;
	      }

	    }

	    var edge;
	    var edge_p;
	    var rs;

	    for (var i = 0; i < pairEdges.length; i++) {
	      edge = pairEdges[i];
	      edge_p = edge._private;
	      rs = edge_p.rscratch;

	      var edgeIndex1 = rs.lastEdgeIndex;
	      var edgeIndex2 = i;

	      var numEdges1 = rs.lastNumEdges;
	      var numEdges2 = pairEdges.length;

	      var eStyle = edge_p.style;
	      var style = eStyle;
	      var curveStyle = eStyle['curve-style'].value;
	      var ctrlptDists = eStyle['control-point-distances'];
	      var ctrlptWs = eStyle['control-point-weights'];
	      var bezierN = ctrlptDists && ctrlptWs ? Math.min( ctrlptDists.value.length, ctrlptWs.value.length ) : 1;
	      var stepSize = eStyle['control-point-step-size'].pfValue;
	      var ctrlptDist = ctrlptDists !== undefined ? ctrlptDists.pfValue[0] : undefined;
	      var ctrlptWeight = ctrlptWs.value[0];
	      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	      var swappedDirection = edge_p.source !== src;

	      if( swappedDirection && edgeIsUnbundled ){
	        ctrlptDist *= -1;
	      }

	      var srcX1 = rs.lastSrcCtlPtX;
	      var srcX2 = srcPos.x;
	      var srcY1 = rs.lastSrcCtlPtY;
	      var srcY2 = srcPos.y;
	      var srcW1 = rs.lastSrcCtlPtW;
	      var srcW2 = src.outerWidth();
	      var srcH1 = rs.lastSrcCtlPtH;
	      var srcH2 = src.outerHeight();

	      var tgtX1 = rs.lastTgtCtlPtX;
	      var tgtX2 = tgtPos.x;
	      var tgtY1 = rs.lastTgtCtlPtY;
	      var tgtY2 = tgtPos.y;
	      var tgtW1 = rs.lastTgtCtlPtW;
	      var tgtW2 = tgt.outerWidth();
	      var tgtH1 = rs.lastTgtCtlPtH;
	      var tgtH2 = tgt.outerHeight();

	      var width1 = rs.lastW;
	      var width2 = eStyle['control-point-step-size'].pfValue;

	      if( badBezier ){
	        rs.badBezier = true;
	      } else {
	        rs.badBezier = false;
	      }

	      if( srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2
	      &&  tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2
	      &&  width1 === width2
	      &&  ((edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2) || edgeIsUnbundled) ){
	        // console.log('edge ctrl pt cache HIT')
	        continue; // then the control points haven't changed and we can skip calculating them
	      } else {
	        rs.lastSrcCtlPtX = srcX2;
	        rs.lastSrcCtlPtY = srcY2;
	        rs.lastSrcCtlPtW = srcW2;
	        rs.lastSrcCtlPtH = srcH2;
	        rs.lastTgtCtlPtX = tgtX2;
	        rs.lastTgtCtlPtY = tgtY2;
	        rs.lastTgtCtlPtW = tgtW2;
	        rs.lastTgtCtlPtH = tgtH2;
	        rs.lastEdgeIndex = edgeIndex2;
	        rs.lastNumEdges = numEdges2;
	        rs.lastWidth = width2;
	        // console.log('edge ctrl pt cache MISS')
	      }

	      if( src === tgt ){
	        // Self-edge

	        rs.edgeType = 'self';

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        rs.ctrlpts = [
	          srcPos.x,
	          srcPos.y - (1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1),

	          srcPos.x - (1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1),
	          srcPos.y
	        ];

	      } else if(
	        hasCompounds &&
	        ( src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild() ) &&
	        ( src.parents().anySame(tgt) || tgt.parents().anySame(src) )
	      ){
	        // Compound edge

	        rs.edgeType = 'compound';

	        // because the line approximation doesn't apply for compound beziers
	        // (loop/self edges are already elided b/c of cheap src==tgt check)
	        rs.badBezier = false;

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        var loopW = 50;

	        var loopaPos = {
	          x: srcPos.x - srcW/2,
	          y: srcPos.y - srcH/2
	        };

	        var loopbPos = {
	          x: tgtPos.x - tgtW/2,
	          y: tgtPos.y - tgtH/2
	        };

	        var loopPos = {
	          x: Math.min( loopaPos.x, loopbPos.x ),
	          y: Math.min( loopaPos.y, loopbPos.y )
	        };

	        // avoids cases with impossible beziers
	        var minCompoundStretch = 0.5;
	        var compoundStretchA = Math.max( minCompoundStretch, Math.log(srcW * 0.01) );
	        var compoundStretchB = Math.max( minCompoundStretch, Math.log(tgtW * 0.01) );

	        rs.ctrlpts = [
	          loopPos.x,
	          loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA,

	          loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB,
	          loopPos.y
	        ];

	      } else if( curveStyle === 'segments' ){
	        // Segments (multiple straight lines)

	        rs.edgeType = 'segments';
	        rs.segpts = [];

	        var segmentWs = eStyle['segment-weights'].pfValue;
	        var segmentDs = eStyle['segment-distances'].pfValue;
	        var segmentsN = Math.min( segmentWs.length, segmentDs.length );

	        for( var s = 0; s < segmentsN; s++ ){
	          var w = segmentWs[s];
	          var d = segmentDs[s];

	          // d = swappedDirection ? -d : d;
	          //
	          // d = Math.abs(d);

	          // var w1 = !swappedDirection ? (1 - w) : w;
	          // var w2 = !swappedDirection ? w : (1 - w);

	          var w1 = (1 - w);
	          var w2 = w;

	          var adjustedMidpt = {
	            x: midptSrcPts.x1 * w1 + midptSrcPts.x2 * w2,
	            y: midptSrcPts.y1 * w1 + midptSrcPts.y2 * w2
	          };

	          rs.segpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * d,
	            adjustedMidpt.y + vectorNormInverse.y * d
	          );
	        }

	      // Straight edge
	      } else if (
	        pairEdges.length % 2 === 1
	        && i === Math.floor(pairEdges.length / 2)
	        && !edgeIsUnbundled
	      ){

	        rs.edgeType = 'straight';

	      } else {
	        // (Multi)bezier

	        var multi = edgeIsUnbundled;

	        rs.edgeType = multi ? 'multibezier' : 'bezier';
	        rs.ctrlpts = [];

	        for( var b = 0; b < bezierN; b++ ){
	          var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
	          var manctrlptDist;
	          var sign = math.signum( normctrlptDist );

	          if( multi ){
	            ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size
	            ctrlptWeight = ctrlptWs.value[b];
	          }

	          if( edgeIsUnbundled ){ // multi or single unbundled
	            manctrlptDist = ctrlptDist;
	          } else {
	            manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	          }

	          var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

	          var w1 = !swappedDirection || edgeIsUnbundled ? (1 - ctrlptWeight) : ctrlptWeight;
	          var w2 = !swappedDirection || edgeIsUnbundled ? ctrlptWeight : (1 - ctrlptWeight);

	          var adjustedMidpt = {
	            x: midptSrcPts.x1 * w1 + midptSrcPts.x2 * w2,
	            y: midptSrcPts.y1 * w1 + midptSrcPts.y2 * w2
	          };

	          rs.ctrlpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint,
	            adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint
	          );
	        }

	      }

	      // find endpts for edge
	      this.findEndpoints( edge );

	      var badStart = !is.number( rs.startX ) || !is.number( rs.startY );
	      var badAStart = !is.number( rs.arrowStartX ) || !is.number( rs.arrowStartY );
	      var badEnd = !is.number( rs.endX ) || !is.number( rs.endY );
	      var badAEnd = !is.number( rs.arrowEndX ) || !is.number( rs.arrowEndY );

	      var minCpADistFactor = 3;
	      var arrowW = this.getArrowWidth( eStyle['width'].pfValue ) * this.arrowShapeHeight;
	      var minCpADist = minCpADistFactor * arrowW;

	      if( rs.edgeType === 'bezier' ){
	        var startACpDist = math.distance( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY } );
	        var closeStartACp = startACpDist < minCpADist;
	        var endACpDist = math.distance( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY } );
	        var closeEndACp = endACpDist < minCpADist;

	        var overlapping = false;

	        if( badStart || badAStart || closeStartACp ){
	          overlapping = true;

	          // project control point along line from src centre to outside the src shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - srcPos.x,
	            y: rs.ctrlpts[1] - srcPos.y
	          };
	          var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max(srcW, srcH);
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var srcCtrlPtIntn = srcShape.intersectLine(
	            srcPos.x,
	            srcPos.y,
	            srcW,
	            srcH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeStartACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	          } else {
	            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	          }
	        }

	        if( badEnd || badAEnd || closeEndACp ){
	          overlapping = true;

	          // project control point along line from tgt centre to outside the tgt shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - tgtPos.x,
	            y: rs.ctrlpts[1] - tgtPos.y
	          };
	          var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max(srcW, srcH);
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var tgtCtrlPtIntn = tgtShape.intersectLine(
	            tgtPos.x,
	            tgtPos.y,
	            tgtW,
	            tgtH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeEndACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
	          } else {
	            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
	          }

	        }

	        if( overlapping ){
	          // recalc endpts
	          this.findEndpoints( edge );
	        }

	      }

	      if( rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	        rs.allpts = [];

	        rs.allpts.push( rs.startX, rs.startY );

	        for( var b = 0; b+1 < rs.ctrlpts.length; b += 2 ){
	          // ctrl pt itself
	          rs.allpts.push( rs.ctrlpts[b], rs.ctrlpts[b+1] );

	          // the midpt between ctrlpts as intermediate destination pts
	          if( b + 3 < rs.ctrlpts.length ){
	            rs.allpts.push( (rs.ctrlpts[b] + rs.ctrlpts[b+2])/2, (rs.ctrlpts[b+1] + rs.ctrlpts[b+3])/2 );
	          }
	        }

	        rs.allpts.push( rs.endX, rs.endY );

	        var m, mt;
	        if( rs.edgeType === 'bezier' ){
	          rs.midX = math.qbezierAt( rs.arrowStartX, rs.ctrlpts[0], rs.arrowEndX, 0.5 );
	          rs.midY = math.qbezierAt( rs.arrowStartY, rs.ctrlpts[1], rs.arrowEndY, 0.5 );
	        } else if( rs.ctrlpts.length/2 % 2 === 0 ){
	          m = rs.allpts.length/2 - 1;

	          rs.midX = rs.allpts[m];
	          rs.midY = rs.allpts[m+1];
	        } else {
	          m = rs.allpts.length/2 - 3;
	          mt = 0.5;

	          rs.midX = math.qbezierAt( rs.allpts[m], rs.allpts[m+2], rs.allpts[m+4], mt );
	          rs.midY = math.qbezierAt( rs.allpts[m+1], rs.allpts[m+3], rs.allpts[m+5], mt );
	        }

	      } else if( rs.edgeType === 'straight' ){
	        // need to calc these after endpts
	        rs.allpts = [ rs.startX, rs.startY, rs.endX, rs.endY ];

	        // default midpt for labels etc
	        rs.midX = ( rs.arrowStartX + rs.arrowEndX )/2;
	        rs.midY = ( rs.arrowStartY + rs.arrowEndY )/2;

	      } else if( rs.edgeType === 'segments' ){
	        rs.allpts = [];
	        rs.allpts.push( rs.startX, rs.startY );
	        rs.allpts.push.apply( rs.allpts, rs.segpts );
	        rs.allpts.push( rs.endX, rs.endY );

	        if( rs.segpts.length % 4 === 0 ){
	          var i2 = rs.segpts.length / 2;
	          var i1 = i2 - 2;

	          rs.midX = ( rs.segpts[i1] + rs.segpts[i2] ) / 2;
	          rs.midY = ( rs.segpts[i1+1] + rs.segpts[i2+1] ) / 2;
	        } else {
	          var i1 = rs.segpts.length / 2 - 1;

	          rs.midX = rs.segpts[i1];
	          rs.midY = rs.segpts[i1+1];
	        }


	      }

	      this.projectLines( edge );
	      this.calculateArrowAngles( edge );
	      this.recalculateEdgeLabelProjection( edge );

	    }
	  }

	  for( var i = 0; i < haystackEdges.length; i++ ){
	    var edge = haystackEdges[i];
	    var _p = edge._private;
	    var style = _p.style;
	    var rscratch = _p.rscratch;
	    var rs = rscratch;

	    if( !rscratch.haystack ){
	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.source = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };

	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.target = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };

	    }

	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src._private.position;
	    var tgtPos = tgt._private.position;
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = style['haystack-radius'].value;
	    var halfRadius = radius/2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [
	      rs.source.x * srcW * halfRadius + srcPos.x,
	      rs.source.y * srcH * halfRadius + srcPos.y,
	      rs.target.x * tgtW * halfRadius + tgtPos.x,
	      rs.target.y * tgtH * halfRadius + tgtPos.y
	    ];

	    rs.midX = (rs.allpts[0] + rs.allpts[2])/2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3])/2;

	    // always override as haystack in case set to different type previously
	    rscratch.edgeType = 'haystack';
	    rscratch.haystack = true;

	    this.projectLines( edge );
	    this.calculateArrowAngles( edge );
	    this.recalculateEdgeLabelProjection( edge );
	  }

	  for( var i = 0 ; i < autorotateEdges.length; i++ ){
	    var edge = autorotateEdges[i];
	    var rs = edge._private.rscratch;

	    rs.labelAngle = Math.atan( rs.midDispY / rs.midDispX );
	  }

	  return hashTable;
	};

	var getAngleFromDisp = function( dispX, dispY ){
	  return Math.atan2( dispY, dispX ) - Math.PI/2;
	};

	BRp.calculateArrowAngles = function( edge ){
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self';

	  // Displacement gives direction for arrowhead orientation
	  var dispX, dispY;
	  var startX, startY, endX, endY;

	  var srcPos = edge.source().position();
	  var tgtPos = edge.target().position();

	  if( isHaystack ){
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }

	  // source
	  //

	  dispX = srcPos.x - startX;
	  dispY = srcPos.y - startY;

	  rs.srcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;

	  if( isHaystack ){
	    midX = ( startX + endX )/2;
	    midY = ( startY + endY )/2;
	  }

	  dispX = endX - startX;
	  dispY = endY - startY;

	  if( isSelf ){
	    dispX = -1;
	    dispY = 1;
	  } else if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;

	      dispX = ( pts[i2] - pts[i1] );
	      dispY = ( pts[i2+1] - pts[i1+1] );
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      var i3 = i2 + 2;

	      dispX = ( pts[i2] - pts[i1] );
	      dispY = ( pts[i2+1] - pts[i1+1] );
	    }
	  } else if( isMultibezier || isCompound ){
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;

	    if( cpts.length / 2 % 2 === 0 ){
	      var p0 = pts.length / 2 - 1; // startpt
	      var ic = p0 + 2;
	      var p1 = ic + 2;

	      bp0x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.0 );
	      bp0y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.0 );

	      bp1x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.0001 );
	      bp1y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.0001 );
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt
	      var p0 = ic - 2; // startpt
	      var p1 = ic + 2; // endpt

	      bp0x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.4999 );
	      bp0y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.4999 );

	      bp1x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.5 );
	      bp1y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.5 );
	    }

	    dispX = ( bp1x - bp0x );
	    dispY = ( bp1y - bp0y );
	  }

	  rs.midtgtArrowAngle = getAngleFromDisp( dispX, dispY );

	  rs.midDispX = dispX;
	  rs.midDispY = dispY;

	  // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;

	  if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      // already ok
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;

	      dispX = -( pts[i3] - pts[i2] );
	      dispY = -( pts[i3+1] - pts[i2+1] );
	    }
	  }

	  rs.midsrcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // target
	  //

	  dispX = tgtPos.x - endX;
	  dispY = tgtPos.y - endY;

	  rs.tgtArrowAngle = getAngleFromDisp( dispX, dispY );
	};


	BRp.findEndpoints = function( edge ){
	  var r = this;
	  var intersect;

	  var source = edge.source()[0];
	  var target = edge.target()[0];

	  var src_p = source._private;
	  var tgt_p = target._private;

	  var srcPos = src_p.position;
	  var tgtPos = tgt_p.position;

	  var tgtArShape = edge._private.style['target-arrow-shape'].value;
	  var srcArShape = edge._private.style['source-arrow-shape'].value;

	  var rs = edge._private.rscratch;

	  var et = rs.edgeType;
	  var bezier = et === 'bezier' || et === 'multibezier' || et === 'self' || et === 'compound';
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';

	  var p1, p2;

	  if( bezier ){
	    var cpStart = [ rs.ctrlpts[0], rs.ctrlpts[1] ];
	    var cpEnd = multi ? [ rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1] ] : cpStart;

	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if( lines ){
	    var srcArrowFromPt = !segments ? [ tgtPos.x, tgtPos.y ] : rs.segpts.slice( 0, 2 );
	    var tgtArrowFromPt = !segments ? [ srcPos.x, srcPos.y ] : rs.segpts.slice( rs.segpts.length - 2 );

	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }

	  intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(
	    tgtPos.x,
	    tgtPos.y,
	    target.outerWidth(),
	    target.outerHeight(),
	    p1[0],
	    p1[1],
	    0
	  );

	  var arrowEnd = math.shortenIntersection(intersect, p1,
	    r.arrowShapes[tgtArShape].spacing(edge));
	  var edgeEnd = math.shortenIntersection(intersect, p1,
	    r.arrowShapes[tgtArShape].gap(edge));

	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];

	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];

	  intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(
	    srcPos.x,
	    srcPos.y,
	    source.outerWidth(),
	    source.outerHeight(),
	    p2[0],
	    p2[1],
	    0
	  );

	  var arrowStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[srcArShape].spacing(edge)
	  );
	  var edgeStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[srcArShape].gap(edge)
	  );

	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];

	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];

	  if( lines ){
	    if( !is.number(rs.startX) || !is.number(rs.startY) || !is.number(rs.endX) || !is.number(rs.endY) ){
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};

	BRp.getArrowWidth = BRp.getArrowHeight = function(edgeWidth) {
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};

	  var cachedVal = cache[edgeWidth];
	  if( cachedVal ){
	    return cachedVal;
	  }

	  cachedVal =  Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29);
	  cache[edgeWidth] = cachedVal;

	  return cachedVal;
	};

	module.exports = BRp;

	},{"../../../collection/zsort":29,"../../../is":77,"../../../math":79}],57:[function(_dereq_,module,exports){
	'use strict';

	var BRp = {};

	BRp.getCachedImage = function(url, onLoad) {
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};

	  if( imageCache[url] && imageCache[url].image ){
	    return imageCache[url].image;
	  }

	  var cache = imageCache[url] = imageCache[url] || {};

	  var image = cache.image = new Image();
	  image.addEventListener('load', onLoad);
	  image.src = url;

	  return image;
	};

	module.exports = BRp;

	},{}],58:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');

	var BaseRenderer = function(){};
	var BR = BaseRenderer;
	var BRp = BR.prototype;

	BRp.clientFunctions = [ 'redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl' ];

	BRp.init = function( options ){
	  var r = this;

	  r.options = options;

	  r.cy = options.cy;

	  r.container = options.cy.container();

	  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  //--Pointer-related data
	  r.hoverData = {down: null, last: null,
	      downTime: null, triggerMode: null,
	      dragging: false,
	      initialPan: [null, null], capture: false};

	  r.dragData = {possibleDragElements: []};

	  r.touchData = {
	      start: null, capture: false,

	      // These 3 fields related to tap, taphold events
	      startPosition: [null, null, null, null, null, null],
	      singleTouchStartTime: null,
	      singleTouchMoved: true,

	      now: [null, null, null, null, null, null],
	      earlier: [null, null, null, null, null, null]
	  };

	  r.redraws = 0;
	  r.showFps = options.showFps;

	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default
	  r.forcedPixelRatio = options.pixelRatio;
	  r.motionBlur = true; // for initial kick off
	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;
	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;

	  r.bindings = [];

	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.load();
	};

	BRp.notify = function(params) {
	  var types;
	  var r = this;

	  if( is.array( params.type ) ){
	    types = params.type;

	  } else {
	    types = [ params.type ];
	  }

	  for( var i = 0; i < types.length; i++ ){
	    var type = types[i];

	    switch( type ){
	      case 'destroy':
	        r.destroy();
	        return;

	      case 'add':
	      case 'remove':
	      case 'load':
	        r.updateElementsCache();
	        break;

	      case 'viewport':
	        r.redrawHint('select', true);
	        break;

	      case 'style':
	        r.updateCachedZSortedEles();
	        break;
	    }

	    if( type === 'load' || type === 'resize' ){
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize(r.container);
	    }
	  } // for

	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);

	  this.startRenderLoop();

	  this.redraw();
	};

	BRp.destroy = function(){
	  this.destroyed = true;

	  this.cy.stopAnimationLoop();

	  for( var i = 0; i < this.bindings.length; i++ ){
	    var binding = this.bindings[i];
	    var b = binding;

	    b.target.removeEventListener(b.event, b.handler, b.useCapture);
	  }

	  if( this.removeObserver ){
	    this.removeObserver.disconnect();
	  }

	  if( this.labelCalcDiv ){
	    try{
	      document.body.removeChild(this.labelCalcDiv);
	    } catch(e){
	      // ie10 issue #1014
	    }
	  }
	};

	[
	  _dereq_('./arrow-shapes'),
	  _dereq_('./cached-eles'),
	  _dereq_('./coord-ele-math'),
	  _dereq_('./images'),
	  _dereq_('./load-listeners'),
	  _dereq_('./node-shapes'),
	  _dereq_('./redraw')
	].forEach(function( props ){
	  util.extend( BRp, props );
	});

	module.exports = BR;

	},{"../../../is":77,"../../../util":94,"./arrow-shapes":54,"./cached-eles":55,"./coord-ele-math":56,"./images":57,"./load-listeners":59,"./node-shapes":60,"./redraw":61}],59:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');
	var Event = _dereq_('../../../event');
	var Collection = _dereq_('../../../collection');

	var BRp = {};

	BRp.registerBinding = function(target, event, handler, useCapture){
	  this.bindings.push({
	    target: target,
	    event: event,
	    handler: handler,
	    useCapture: useCapture
	  });

	  target.addEventListener(event, handler, useCapture);
	};

	BRp.nodeIsDraggable = function(node) {
	  if (node._private.style['opacity'].value !== 0
	    && node._private.style['visibility'].value == 'visible'
	    && node._private.style['display'].value == 'element'
	    && !node.locked()
	    && node.grabbable() ) {

	    return true;
	  }

	  return false;
	};

	BRp.load = function() {
	  var r = this;

	  var triggerEvents = function( target, names, e, props ){
	    if( target == null ){
	      target = r.cy;
	    }

	    for( var i = 0; i < names.length; i++ ){
	      var name = names[i];

	      var event = Event( e, util.extend({ type: name }, props) );
	      target.trigger( event );
	    }
	  };

	  var isMultSelKeyDown = function( e ){
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var getDragListIds = function(opts){
	    var listHasId;

	    if( opts.addToList && r.cy.hasCompoundNodes() ){ // only needed for compound graphs
	      if( !opts.addToList.hasId ){ // build ids lookup if doesn't already exist
	        opts.addToList.hasId = {};

	        for( var i = 0; i < opts.addToList.length; i++ ){
	          var ele = opts.addToList[i];

	          opts.addToList.hasId[ ele.id() ] = true;
	        }
	      }

	      listHasId = opts.addToList.hasId;
	    }

	    return listHasId || {};
	  };

	  // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes
	  var addDescendantsToDrag = function(node, opts){
	    if( !node._private.cy.hasCompoundNodes() ){
	      return;
	    }

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    var listHasId = getDragListIds( opts );

	    var innerNodes = node.descendants();

	    for( var i = 0; i < innerNodes.size(); i++ ){
	      var iNode = innerNodes[i];
	      var _p = iNode._private;

	      if( opts.inDragLayer ){
	        _p.rscratch.inDragLayer = true;
	      }

	      if( opts.addToList && !listHasId[ iNode.id() ] ){
	        opts.addToList.push( iNode );
	        listHasId[ iNode.id() ] = true;

	        _p.grabbed = true;
	      }

	      var edges = _p.edges;
	      for( var j = 0; opts.inDragLayer && j < edges.length; j++ ){
	        edges[j]._private.rscratch.inDragLayer = true;
	      }
	    }
	  };

	  // adds the given nodes, and its edges to the drag layer
	  var addNodeToDrag = function(node, opts){

	    var _p = node._private;
	    var listHasId = getDragListIds( opts );

	    if( opts.inDragLayer ){
	      _p.rscratch.inDragLayer = true;
	    }

	    if( opts.addToList && !listHasId[ node.id() ] ){
	      opts.addToList.push( node );
	      listHasId[ node.id() ] = true;

	      _p.grabbed = true;
	    }

	    var edges = _p.edges;
	    for( var i = 0; opts.inDragLayer && i < edges.length; i++ ){
	      edges[i]._private.rscratch.inDragLayer = true;
	    }

	    addDescendantsToDrag( node, opts ); // always add to drag

	    // also add nodes and edges related to the topmost ancestor
	    updateAncestorsInDragLayer( node, {
	      inDragLayer: opts.inDragLayer
	    } );
	  };

	  var freeDraggedElements = function( draggedElements ){
	    if( !draggedElements ){ return; }

	    for (var i=0; i < draggedElements.length; i++) {

	      var dEi_p = draggedElements[i]._private;

	      if(dEi_p.group === 'nodes') {
	        dEi_p.rscratch.inDragLayer = false;
	        dEi_p.grabbed = false;

	        var sEdges = dEi_p.edges;
	        for( var j = 0; j < sEdges.length; j++ ){ sEdges[j]._private.rscratch.inDragLayer = false; }

	        // for compound nodes, also remove related nodes and edges from the drag layer
	        updateAncestorsInDragLayer(draggedElements[i], { inDragLayer: false });

	      } else if( dEi_p.group === 'edges' ){
	        dEi_p.rscratch.inDragLayer = false;
	      }

	    }
	  };

	  // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).
	  var updateAncestorsInDragLayer = function(node, opts) {

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    // find top-level parent
	    var parent = node;

	    if( !node._private.cy.hasCompoundNodes() ){
	      return;
	    }

	    while( parent.parent().nonempty() ){
	      parent = parent.parent()[0];
	    }

	    // no parent node: no nodes to add to the drag layer
	    if( parent == node ){
	      return;
	    }

	    var nodes = parent.descendants()
	      .merge( parent )
	      .unmerge( node )
	      .unmerge( node.descendants() )
	    ;

	    var edges = nodes.connectedEdges();

	    var listHasId = getDragListIds( opts );

	    for( var i = 0; i < nodes.size(); i++ ){
	      if( opts.inDragLayer !== undefined ){
	        nodes[i]._private.rscratch.inDragLayer = opts.inDragLayer;
	      }

	      if( opts.addToList && !listHasId[ nodes[i].id() ] ){
	        opts.addToList.push( nodes[i] );
	        listHasId[ nodes[i].id() ] = true;

	        nodes[i]._private.grabbed = true;
	      }
	    }

	    for( var j = 0; opts.inDragLayer !== undefined && j < edges.length; j++ ) {
	      edges[j]._private.rscratch.inDragLayer = opts.inDragLayer;
	    }
	  };

	  if( typeof MutationObserver !== 'undefined' ){
	    r.removeObserver = new MutationObserver(function( mutns ){
	      for( var i = 0; i < mutns.length; i++ ){
	        var mutn = mutns[i];
	        var rNodes = mutn.removedNodes;

	        if( rNodes ){ for( var j = 0; j < rNodes.length; j++ ){
	          var rNode = rNodes[j];

	          if( rNode === r.container ){
	            r.destroy();
	            break;
	          }
	        } }
	      }
	    });

	    if( r.container.parentNode ){
	      r.removeObserver.observe( r.container.parentNode, { childList: true } );
	    }
	  } else {
	    r.registerBinding(r.container, 'DOMNodeRemoved', function(e){
	      r.destroy();
	    });
	  }



	  // auto resize
	  r.registerBinding(window, 'resize', util.debounce( function(e) {
	    r.invalidateContainerClientCoordsCache();

	    r.matchCanvasSize(r.container);
	    r.redrawHint('eles', true);
	    r.redraw();
	  }, 100 ) );

	  var invalCtnrBBOnScroll = function(domEle){
	    r.registerBinding(domEle, 'scroll', function(e){
	      r.invalidateContainerClientCoordsCache();
	    } );
	  };

	  var bbCtnr = r.cy.container();

	  for( ;; ){

	    invalCtnrBBOnScroll( bbCtnr );

	    if( bbCtnr.parentNode ){
	      bbCtnr = bbCtnr.parentNode;
	    } else {
	      break;
	    }

	  }

	  // stop right click menu from appearing on cy
	  r.registerBinding(r.container, 'contextmenu', function(e){
	    e.preventDefault();
	  });

	  var inBoxSelection = function(){
	    return r.selection[4] !== 0;
	  };

	  // Primary key
	  r.registerBinding(r.container, 'mousedown', function(e) {
	    e.preventDefault();
	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;

	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements;

	    r.hoverData.mdownPos = pos;

	    var checkForTaphold = function(){
	      r.hoverData.tapholdCancelled = false;

	      clearTimeout( r.hoverData.tapholdTimeout );

	      r.hoverData.tapholdTimeout = setTimeout(function(){

	        if( r.hoverData.tapholdCancelled ){
	          return;
	        } else {
	          var ele = r.hoverData.down;

	          if( ele ){
	            ele.trigger( Event(e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            }) );
	          } else {
	            cy.trigger( Event(e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            }) );
	          }
	        }

	      }, r.tapholdDuration);
	    };

	    // Right click button
	    if( e.which == 3 ){

	      r.hoverData.cxtStarted = true;

	      var cxtEvt = Event(e, {
	        type: 'cxttapstart',
	        cyPosition: { x: pos[0], y: pos[1] }
	      });

	      if( near ){
	        near.activate();
	        near.trigger( cxtEvt );

	        r.hoverData.down = near;
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      r.hoverData.downTime = (new Date()).getTime();
	      r.hoverData.cxtDragged = false;

	    // Primary button
	    } else if (e.which == 1) {

	      if( near ){
	        near.activate();
	      }

	      // Element dragging
	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if (near != null) {

	          if( r.nodeIsDraggable(near) ){

	            var grabEvent = Event(e, {
	              type: 'grab',
	              cyPosition: { x: pos[0], y: pos[1] }
	            });

	            if ( near.isNode() && !near.selected() ){

	              draggedElements = r.dragData.possibleDragElements = [];
	              addNodeToDrag( near, { addToList: draggedElements } );

	              near.trigger(grabEvent);

	            } else if ( near.isNode() && near.selected() ){
	              draggedElements = r.dragData.possibleDragElements = [  ];

	              var selectedNodes = cy.$(function(){ return this.isNode() && this.selected(); });

	              for( var i = 0; i < selectedNodes.length; i++ ){

	                // Only add this selected node to drag if it is draggable, eg. has nonzero opacity
	                if( r.nodeIsDraggable( selectedNodes[i] ) ){
	                  addNodeToDrag( selectedNodes[i], { addToList: draggedElements } );
	                }
	              }

	              near.trigger( grabEvent );
	            }

	            r.redrawHint('eles', true);
	            r.redrawHint('drag', true);

	          }

	        }

	        r.hoverData.down = near;
	        r.hoverData.downTime = (new Date()).getTime();
	      }

	      triggerEvents( near, ['mousedown', 'tapstart', 'vmousedown'], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if ( near == null ) {
	        select[4] = 1;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);

	        r.redraw();
	      } else if( near.isEdge() ){
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();

	    }

	    // Initialize selection box coordinates
	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];

	  }, false);

	  r.registerBinding(window, 'mousemove', function(e) {
	    var preventDefault = false;
	    var capture = r.hoverData.capture;

	    // save cycles if mouse events aren't to be captured
	    if ( !capture ){
	      var containerPageCoords = r.findContainerClientCoords();

	      if (e.clientX > containerPageCoords[0] && e.clientX < containerPageCoords[0] + r.canvasWidth
	        && e.clientY > containerPageCoords[1] && e.clientY < containerPageCoords[1] + r.canvasHeight
	      ) {
	        // inside container bounds so OK
	      } else {
	        return;
	      }

	      var cyContainer = r.container;
	      var target = e.target;
	      var tParent = target.parentNode;
	      var containerIsTarget = false;

	      while( tParent ){
	        if( tParent === cyContainer ){
	          containerIsTarget = true;
	          break;
	        }

	        tParent = tParent.parentNode;
	      }

	      if( !containerIsTarget ){ return; } // if target is outisde cy container, then this event is not for us
	    }

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;

	    var near = null;
	    if( !r.hoverData.draggingEles ){
	      near = r.findNearestElement(pos[0], pos[1], true, false);
	    }
	    var last = r.hoverData.last;
	    var down = r.hoverData.down;

	    var disp = [pos[0] - select[2], pos[1] - select[3]];

	    var draggedElements = r.dragData.possibleDragElements;

	    var dx = select[2] - select[0];
	    var dx2 = dx * dx;
	    var dy = select[3] - select[1];
	    var dy2 = dy * dy;
	    var dist2 = dx2 + dy2;
	    var rdist2 = dist2 * zoom * zoom;

	    var multSelKeyDown = isMultSelKeyDown( e );

	    r.hoverData.tapholdCancelled = true;

	    var updateDragDelta = function(){
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

	      if( dragDelta.length === 0 ){
	        dragDelta.push( disp[0] );
	        dragDelta.push( disp[1] );
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };


	    preventDefault = true;

	    triggerEvents( near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
	      cyPosition: { x: pos[0], y: pos[1] }
	    } );

	    // trigger context drag if rmouse down
	    if( r.hoverData.which === 3 ){
	      var cxtEvt = Event(e, {
	        type: 'cxtdrag',
	        cyPosition: { x: pos[0], y: pos[1] }
	      });

	      if( down ){
	        down.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      r.hoverData.cxtDragged = true;

	      if( !r.hoverData.cxtOver || near !== r.hoverData.cxtOver ){

	        if( r.hoverData.cxtOver ){
	          r.hoverData.cxtOver.trigger( Event(e, {
	            type: 'cxtdragout',
	            cyPosition: { x: pos[0], y: pos[1] }
	          }) );
	        }

	        r.hoverData.cxtOver = near;

	        if( near ){
	          near.trigger( Event(e, {
	            type: 'cxtdragover',
	            cyPosition: { x: pos[0], y: pos[1] }
	          }) );
	        }

	      }

	    // Check if we are drag panning the entire graph
	    } else if (r.hoverData.dragging) {
	      preventDefault = true;

	      if( cy.panningEnabled() && cy.userPanningEnabled() ){
	        var deltaP;

	        if( r.hoverData.justStartedPan ){
	          var mdPos = r.hoverData.mdownPos;

	          deltaP = {
	            x: ( pos[0] - mdPos[0] ) * zoom,
	            y: ( pos[1] - mdPos[1] ) * zoom
	          };

	          r.hoverData.justStartedPan = false;

	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };

	        }

	        cy.panBy( deltaP );

	        r.hoverData.dragged = true;
	      }

	      // Needs reproject due to pan changing viewport
	      pos = r.projectIntoViewport(e.clientX, e.clientY);

	    // Checks primary button down & out of time & mouse not moved much
	    } else if(
	        select[4] == 1 && (down == null || down.isEdge())
	    ){

	      if( !r.hoverData.dragging && cy.boxSelectionEnabled() && ( multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled() ) ){
	        r.data.bgActivePosistion = undefined;
	        r.hoverData.selecting = true;

	        r.redrawHint('select', true);
	        r.redraw();

	      } else if( !r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled() ){
	        r.hoverData.dragging = true;
	        r.hoverData.justStartedPan = true;
	        select[4] = 0;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);
	        r.redraw();
	      }

	      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	    } else {
	      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	      if (near != last) {

	        if (last) {
	          triggerEvents( last, ['mouseout', 'tapdragout'], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        if (near) {
	          triggerEvents( near, ['mouseover', 'tapdragover'], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        r.hoverData.last = near;
	      }

	      if( down && down.isNode() && r.nodeIsDraggable(down) ){

	        if( rdist2 >= r.desktopTapThreshold2 ){ // then drag

	          var justStartedDrag = !r.dragData.didDrag;

	          if( justStartedDrag ) {
	            r.redrawHint('eles', true);
	          }

	          r.dragData.didDrag = true; // indicate that we actually did drag the node

	          var toTrigger = [];

	          for( var i = 0; i < draggedElements.length; i++ ){
	            var dEle = draggedElements[i];

	            // now, add the elements to the drag layer if not done already
	            if( !r.hoverData.draggingEles ){
	              addNodeToDrag( dEle, { inDragLayer: true } );
	            }

	            // Locked nodes not draggable, as well as non-visible nodes
	            if( dEle.isNode() && r.nodeIsDraggable(dEle) && dEle.grabbed() ){
	              var dPos = dEle._private.position;

	              toTrigger.push( dEle );

	              if( is.number(disp[0]) && is.number(disp[1]) ){
	                var updatePos = !dEle.isParent();

	                if( updatePos ){
	                  dPos.x += disp[0];
	                  dPos.y += disp[1];
	                }

	                if( justStartedDrag ){
	                  var dragDelta = r.hoverData.dragDelta;

	                  if( updatePos && is.number(dragDelta[0]) && is.number(dragDelta[1]) ){
	                    dPos.x += dragDelta[0];
	                    dPos.y += dragDelta[1];
	                  }
	                }
	              }

	            }
	          }

	          r.hoverData.draggingEles = true;

	          var tcol = (Collection(cy, toTrigger));

	          tcol.updateCompoundBounds();
	          tcol.trigger('position drag');

	          r.redrawHint('drag', true);
	          r.redraw();

	        } else { // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      }

	      // prevent the dragging from triggering text selection on the page
	      preventDefault = true;
	    }

	    select[2] = pos[0]; select[3] = pos[1];

	    if( preventDefault ){
	      if(e.stopPropagation) e.stopPropagation();
	        if(e.preventDefault) e.preventDefault();
	        return false;
	      }
	  }, false);

	  r.registerBinding(window, 'mouseup', function(e) {
	    var capture = r.hoverData.capture;
	    if (!capture) { return; }
	    r.hoverData.capture = false;

	    var cy = r.cy; var pos = r.projectIntoViewport(e.clientX, e.clientY); var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements; var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown( e );

	    if( r.data.bgActivePosistion ){
	      r.redrawHint('select', true);
	      r.redraw();
	    }

	    r.hoverData.tapholdCancelled = true;

	    r.data.bgActivePosistion = undefined; // not active bg now

	    if( down ){
	      down.unactivate();
	    }

	    if( r.hoverData.which === 3 ){
	      var cxtEvt = Event(e, {
	        type: 'cxttapend',
	        cyPosition: { x: pos[0], y: pos[1] }
	      });

	      if( down ){
	        down.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( !r.hoverData.cxtDragged ){
	        var cxtTap = Event(e, {
	          type: 'cxttap',
	          cyPosition: { x: pos[0], y: pos[1] }
	        });

	        if( down ){
	          down.trigger( cxtTap );
	        } else {
	          cy.trigger( cxtTap );
	        }
	      }

	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;

	    } else if( r.hoverData.which === 1 ) {

	      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
	      if ( (down == null) // not mousedown on node
	        && !r.dragData.didDrag // didn't move the node around
	        && !r.hoverData.selecting // not box selection
	        && !r.hoverData.dragged // didn't pan
	        && !isMultSelKeyDown( e )
	      ) {

	        cy.$(function(){
	          return this.selected();
	        }).unselect();

	        if (draggedElements.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        r.dragData.possibleDragElements = draggedElements = [];
	      }

	      triggerEvents( near, ['mouseup', 'tapend', 'vmouseup'], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if(
	        !r.dragData.didDrag // didn't move a node around
	        && !r.hoverData.dragged // didn't pan
	      ){
	        triggerEvents( near, ['click', 'tap', 'vclick'], e, {
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );
	      }

	      // Single selection
	      if( near == down && !r.dragData.didDrag && !r.hoverData.selecting ){
	        if( near != null && near._private.selectable ){

	          if( r.hoverData.dragging ){
	            // if panning, don't change selection state
	          } else if( cy.selectionType() === 'additive' || multSelKeyDown ){
	            if( near.selected() ){
	              near.unselect();
	            } else {
	              near.select();
	            }
	          } else {
	            if( !multSelKeyDown ){
	              cy.$(':selected').unmerge( near ).unselect();
	              near.select();
	            }
	          }

	          r.redrawHint('eles', true);
	        }
	      }

	      if ( r.hoverData.selecting ) {
	        var newlySelected = [];
	        var box = r.getAllInBox( select[0], select[1], select[2], select[3] );

	        r.redrawHint('select', true);

	        if( box.length > 0 ) {
	          r.redrawHint('eles', true);
	        }

	        for( var i = 0; i < box.length; i++ ){
	          if( box[i]._private.selectable ){
	            newlySelected.push( box[i] );
	          }
	        }

	        var newlySelCol = Collection( cy, newlySelected );

	        if( cy.selectionType() === 'additive' ){
	          newlySelCol.select();
	        } else {
	          if( !multSelKeyDown ){
	            cy.$(':selected').unmerge( newlySelCol ).unselect();
	          }

	          newlySelCol.select();
	        }

	        // always need redraw in case eles unselectable
	        r.redraw();

	      }

	      // Cancel drag pan
	      if( r.hoverData.dragging ){
	        r.hoverData.dragging = false;

	        r.redrawHint('select', true);
	        r.redrawHint('eles', true);

	        r.redraw();
	      }

	      if (!select[4]) {


	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        freeDraggedElements( draggedElements );

	        if( down ){ down.trigger('free'); }
	      }

	    } // else not right mouse

	    select[4] = 0; r.hoverData.down = null;

	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];

	  }, false);

	  var wheelHandler = function(e) {


	    if( r.scrollingPage ){ return; } // while scrolling, ignore wheel-to-zoom

	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var rpos = [pos[0] * cy.zoom() + cy.pan().x,
	                  pos[1] * cy.zoom() + cy.pan().y];

	    if( r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection() ){ // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }

	    if( cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled() ){
	      e.preventDefault();

	      r.data.wheelZooming = true;
	      clearTimeout( r.data.wheelTimeout );
	      r.data.wheelTimeout = setTimeout(function(){
	        r.data.wheelZooming = false;

	        r.redrawHint('eles', true);
	        r.redraw();
	      }, 150);

	      var diff = e.deltaY / -250 || e.wheelDeltaY / 1000 || e.wheelDelta / 1000;
	      diff = diff * r.wheelSensitivity;

	      var needsWheelFix = e.deltaMode === 1;
	      if( needsWheelFix ){ // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }

	      cy.zoom({
	        level: cy.zoom() * Math.pow(10, diff),
	        renderedPosition: { x: rpos[0], y: rpos[1] }
	      });
	    }

	  };

	  // Functions to help with whether mouse wheel should trigger zooming
	  // --
	  r.registerBinding(r.container, 'wheel', wheelHandler, true);

	  // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding(window, 'scroll', function(e){
	    r.scrollingPage = true;

	    clearTimeout( r.scrollingPageTimeout );
	    r.scrollingPageTimeout = setTimeout(function(){
	      r.scrollingPage = false;
	    }, 250);
	  }, true);

	  // Functions to help with handling mouseout/mouseover on the Cytoscape container
	        // Handle mouseout on Cytoscape container
	  r.registerBinding(r.container, 'mouseout', function(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.trigger(Event(e, {
	      type: 'mouseout',
	      cyPosition: { x: pos[0], y: pos[1] }
	    }));
	  }, false);

	  r.registerBinding(r.container, 'mouseover', function(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.trigger(Event(e, {
	      type: 'mouseover',
	      cyPosition: { x: pos[0], y: pos[1] }
	    }));
	  }, false);

	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
	  var center1, modelCenter1; // center point on start pinch to zoom
	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;

	  var distance = function(x1, y1, x2, y2){
	    return Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) );
	  };

	  var distanceSq = function(x1, y1, x2, y2){
	    return (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);
	  };

	  var touchstartHandler;
	  r.registerBinding(r.container, 'touchstart', touchstartHandler = function(e) {
	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;

	    var cy = r.cy;
	    var nodes = r.getCachedNodes();
	    var edges = r.getCachedEdges();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }


	    // record starting points for pinch-to-zoom
	    if( e.touches[1] ){

	      // anything in the set of dragged eles should be released
	      var release = function( eles ){
	        for( var i = 0; i < eles.length; i++ ){
	          eles[i]._private.grabbed = false;
	          eles[i]._private.rscratch.inDragLayer = false;
	          if( eles[i].active() ){ eles[i].unactivate(); }
	        }
	      };
	      release(nodes);
	      release(edges);

	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];

	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;

	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;

	      twoFingersStartInside =
	           0 <= f1x1 && f1x1 <= containerWidth
	        && 0 <= f2x1 && f2x1 <= containerWidth
	        && 0 <= f1y1 && f1y1 <= containerHeight
	        && 0 <= f2y1 && f2y1 <= containerHeight
	      ;

	      var pan = cy.pan();
	      var zoom = cy.zoom();

	      distance1 = distance( f1x1, f1y1, f2x1, f2y1 );
	      distance1Sq = distanceSq( f1x1, f1y1, f2x1, f2y1 );
	      center1 = [ (f1x1 + f2x1)/2, (f1y1 + f2y1)/2 ];
	      modelCenter1 = [
	        (center1[0] - pan.x) / zoom,
	        (center1[1] - pan.y) / zoom
	      ];

	      // consider context tap
	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
	      if( distance1Sq < cxtDistThresholdSq && !e.touches[2] ){

	        var near1 = r.findNearestElement(now[0], now[1], true, true);
	        var near2 = r.findNearestElement(now[2], now[3], true, true);

	        if( near1 && near1.isNode() ){
	          near1.activate().trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = near1;

	        } else if( near2 && near2.isNode() ){
	          near2.activate().trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = near2;

	        } else {
	          cy.trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = null;
	        }

	        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;

	        r.redraw();
	        return;

	      }

	    }

	    if (e.touches[2]) {

	    } else if (e.touches[1]) {

	    } else if (e.touches[0]) {
	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if (near != null) {
	        near.activate();

	        r.touchData.start = near;

	        if( near.isNode() && r.nodeIsDraggable(near) ){

	          var draggedEles = r.dragData.touchDragEles = [];

	          r.redrawHint('eles', true);
	          r.redrawHint('drag', true);

	          if( near.selected() ){
	            // reset drag elements, since near will be added again

	            var selectedNodes = cy.$(function(){
	              return this.isNode() && this.selected();
	            });

	            for( var k = 0; k < selectedNodes.length; k++ ){
	              var selectedNode = selectedNodes[k];

	              if( r.nodeIsDraggable(selectedNode) ){
	                addNodeToDrag( selectedNode, { addToList: draggedEles } );
	              }
	            }
	          } else {
	            addNodeToDrag( near, { addToList: draggedEles } );
	          }

	          near.trigger( Event(e, {
	            type: 'grab',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	        }
	      }

	      triggerEvents( near, ['touchstart', 'tapstart', 'vmousedown'], e, {
	        cyPosition: { x: now[0], y: now[1] }
	      } );

	      if (near == null) {
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);
	        r.redraw();
	      }


	      // Tap, taphold
	      // -----

	      for (var i=0; i<now.length; i++) {
	        earlier[i] = now[i];
	        r.touchData.startPosition[i] = now[i];
	      }

	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();

	      clearTimeout( r.touchData.tapholdTimeout );
	      r.touchData.tapholdTimeout = setTimeout(function() {
	        if(
	            r.touchData.singleTouchMoved === false
	            && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	            && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ){
	          triggerEvents( r.touchData.start, ['taphold'], e, {
	            cyPosition: { x: now[0], y: now[1] }
	          } );

	          if (!r.touchData.start) {
	            cy.$(':selected').unselect();
	          }

	        }
	      }, r.tapholdDuration);
	    }

	  }, false);

	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function(e) {

	    var select = r.selection;
	    var capture = r.touchData.capture;
	    var cy = r.cy;
	    var now = r.touchData.now; var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    var disp = []; for (var j=0;j<now.length;j++) { disp[j] = now[j] - earlier[j]; }
	    var startPos = r.touchData.startPosition;
	    var dx = now[0] - startPos[0];
	    var dx2 = dx * dx;
	    var dy = now[1] - startPos[1];
	    var dy2 = dy * dy;
	    var dist2 = dx2 + dy2;
	    var rdist2 = dist2 * zoom * zoom;

	    // context swipe cancelling
	    if( capture && r.touchData.cxt ){
	      e.preventDefault();

	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
	      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      var factorSq = distance2Sq / distance1Sq;

	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold;

	      // cancel ctx gestures if the distance b/t the fingers increases
	      if( factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq ){
	        r.touchData.cxt = false;
	        if( r.touchData.start ){ r.touchData.start.unactivate(); r.touchData.start = null; }
	        r.data.bgActivePosistion = undefined;
	        r.redrawHint('select', true);

	        var cxtEvt = Event(e, {
	          type: 'cxttapend',
	          cyPosition: { x: now[0], y: now[1] }
	        });
	        if( r.touchData.start ){
	          r.touchData.start.trigger( cxtEvt );
	        } else {
	          cy.trigger( cxtEvt );
	        }
	      }

	    }

	    // context swipe
	    if( capture && r.touchData.cxt ){
	      var cxtEvt = Event(e, {
	        type: 'cxtdrag',
	        cyPosition: { x: now[0], y: now[1] }
	      });
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      if( r.touchData.start ){
	        r.touchData.start.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxtDragged = true;

	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if( !r.touchData.cxtOver || near !== r.touchData.cxtOver ){

	        if( r.touchData.cxtOver ){
	          r.touchData.cxtOver.trigger( Event(e, {
	            type: 'cxtdragout',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	        }

	        r.touchData.cxtOver = near;

	        if( near ){
	          near.trigger( Event(e, {
	            type: 'cxtdragover',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );

	        }

	      }

	    // box selection
	    } else if( capture && e.touches[2] && cy.boxSelectionEnabled() ){
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;

	      this.lastThreeTouch = +new Date();
	      r.touchData.selecting = true;

	      r.redrawHint('select', true);

	      if( !select || select.length === 0 || select[0] === undefined ){
	        select[0] = (now[0] + now[2] + now[4])/3;
	        select[1] = (now[1] + now[3] + now[5])/3;
	        select[2] = (now[0] + now[2] + now[4])/3 + 1;
	        select[3] = (now[1] + now[3] + now[5])/3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4])/3;
	        select[3] = (now[1] + now[3] + now[5])/3;
	      }

	      select[4] = 1;
	      r.touchData.selecting = true;

	      r.redraw();

	    // pinch to zoom
	    } else if ( capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled() ) { // two fingers => pinch to zoom
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;
	      if( draggedEles ){
	        r.redrawHint('drag', true);

	        for( var i = 0; i < draggedEles.length; i++ ){
	          draggedEles[i]._private.grabbed = false;
	          draggedEles[i]._private.rscratch.inDragLayer = false;
	        }
	      }

	      // (x2, y2) for fingers 1 and 2
	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;


	      var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
	      var factor = distance2 / distance1;

	      if( factor != 1 && twoFingersStartInside){
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1;

	        // delta finger 2
	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1;

	        // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans
	        var tx = (df1x + df2x)/2;
	        var ty = (df1y + df2y)/2;

	        // adjust factor by the speed multiplier
	        // var speed = 1.5;
	        // if( factor > 1 ){
	        //   factor = (factor - 1) * speed + 1;
	        // } else {
	        //   factor = 1 - (1 - factor) * speed;
	        // }

	        // now calculate the zoom
	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan();

	        // the model center point converted to the current rendered pos
	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;

	        var pan2 = {
	          x: -zoom2/zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2/zoom1 * (ctry - pan1.y - ty) + ctry
	        };

	        // remove dragged eles
	        if( r.touchData.start ){
	          var draggedEles = r.dragData.touchDragEles;

	          if( draggedEles ){ for( var i = 0; i < draggedEles.length; i++ ){
	            var dEi_p = draggedEles[i]._private;

	            dEi_p.grabbed = false;
	            dEi_p.rscratch.inDragLayer = false;
	          } }

	          var start_p = r.touchData.start._private;
	          start_p.active = false;
	          start_p.grabbed = false;
	          start_p.rscratch.inDragLayer = false;

	          r.redrawHint('drag', true);

	          r.touchData.start
	            .trigger('free')
	            .trigger('unactivate')
	          ;
	        }

	        cy.viewport({
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        });

	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;

	        r.pinching = true;
	      }

	      // Re-project
	      if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	      if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	      if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    } else if (e.touches[0]) {
	      var start = r.touchData.start;
	      var last = r.touchData.last;
	      var near = near || r.findNearestElement(now[0], now[1], true, true);

	      if( start != null ){
	        e.preventDefault();
	      }

	      // dragging nodes
	      if( start != null && start._private.group == 'nodes' && r.nodeIsDraggable(start) ){

	        if( rdist2 >= r.touchTapThreshold2 ){ // then dragging can happen
	          var draggedEles = r.dragData.touchDragEles;
	          var justStartedDrag = !r.dragData.didDrag;

	          for( var k = 0; k < draggedEles.length; k++ ){
	            var draggedEle = draggedEles[k];

	            if( justStartedDrag ){
	              addNodeToDrag( draggedEle, { inDragLayer: true } );
	            }

	            if( r.nodeIsDraggable(draggedEle) && draggedEle.isNode() && draggedEle.grabbed() ){
	              r.dragData.didDrag = true;
	              var dPos = draggedEle._private.position;
	              var updatePos = !draggedEle.isParent();

	              if( updatePos && is.number(disp[0]) && is.number(disp[1]) ){
	                dPos.x += disp[0];
	                dPos.y += disp[1];
	              }

	              if( justStartedDrag ){
	                r.redrawHint('eles', true);

	                var dragDelta = r.touchData.dragDelta;

	                if( updatePos && is.number(dragDelta[0]) && is.number(dragDelta[1]) ){
	                  dPos.x += dragDelta[0];
	                  dPos.y += dragDelta[1];
	                }

	              }
	            }
	          }

	          var tcol = Collection(cy, draggedEles);

	          tcol.updateCompoundBounds();
	          tcol.trigger('position drag');

	          r.hoverData.draggingEles = true;

	          r.redrawHint('drag', true);

	          if(
	               r.touchData.startPosition[0] == earlier[0]
	            && r.touchData.startPosition[1] == earlier[1]
	          ){

	            r.redrawHint('eles', true);
	          }

	          r.redraw();
	        } else { // otherise keep track of drag delta for later
	          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

	          if( dragDelta.length === 0 ){
	            dragDelta.push( disp[0] );
	            dragDelta.push( disp[1] );
	          } else {
	            dragDelta[0] += disp[0];
	            dragDelta[1] += disp[1];
	          }
	        }
	      }

	      // touchmove
	      {
	        triggerEvents( (start || near), ['touchmove', 'tapdrag', 'vmousemove'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        if (near != last) {
	          if (last) { last.trigger(Event(e, { type: 'tapdragout', cyPosition: { x: now[0], y: now[1] } })); }
	          if (near) { near.trigger(Event(e, { type: 'tapdragover', cyPosition: { x: now[0], y: now[1] } })); }
	        }

	        r.touchData.last = near;
	      }

	      // check to cancel taphold
	      for (var i=0;i<now.length;i++) {
	        if( now[i]
	          && r.touchData.startPosition[i]
	          && rdist2 > r.touchTapThreshold2 ){

	          r.touchData.singleTouchMoved = true;
	        }
	      }

	      // panning
	      if(
	          capture
	          && ( start == null || start.isEdge() )
	          && cy.panningEnabled() && cy.userPanningEnabled()
	      ){

	        e.preventDefault();

	        if( r.swipePanning ){
	          cy.panBy({
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          });

	        } else if( rdist2 >= r.touchTapThreshold2 ){
	          r.swipePanning = true;

	          cy.panBy({
	            x: dx * zoom,
	            y: dy * zoom
	          });

	          if( start ){
	            start.unactivate();

	            if( !r.data.bgActivePosistion ){
	              r.data.bgActivePosistion = {
	                x: now[0],
	                y: now[1]
	              };
	            }

	            r.redrawHint('select', true);

	            r.touchData.start = null;
	          }
	        }

	        // Re-project
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0]; now[1] = pos[1];
	      }
	    }

	    for (var j=0; j<now.length; j++) { earlier[j] = now[j]; }
	    //r.redraw();

	  }, false);

	  var touchcancelHandler;
	  r.registerBinding(window, 'touchcancel', touchcancelHandler = function(e) {
	    var start = r.touchData.start;

	    r.touchData.capture = false;

	    if( start ){
	      start.unactivate();
	    }
	  });

	  var touchendHandler;
	  r.registerBinding(window, 'touchend', touchendHandler = function(e) {
	    var start = r.touchData.start;

	    var capture = r.touchData.capture;

	    if( capture ){
	      r.touchData.capture = false;

	      e.preventDefault();
	    } else {
	      return;
	    }

	    var select = r.selection;

	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    if( start ){
	      start.unactivate();
	    }

	    var ctxTapend;
	    if( r.touchData.cxt ){
	      ctxTapend = Event(e, {
	        type: 'cxttapend',
	        cyPosition: { x: now[0], y: now[1] }
	      });

	      if( start ){
	        start.trigger( ctxTapend );
	      } else {
	        cy.trigger( ctxTapend );
	      }

	      if( !r.touchData.cxtDragged ){
	        var ctxTap = Event(e, {
	          type: 'cxttap',
	          cyPosition: { x: now[0], y: now[1] }
	        });

	        if( start ){
	          start.trigger( ctxTap );
	        } else {
	          cy.trigger( ctxTap );
	        }

	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxt = false;
	      r.touchData.start = null;

	      r.redraw();
	      return;
	    }

	    // no more box selection if we don't have three fingers
	    if( !e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting ){
	      r.touchData.selecting = false;

	      var newlySelected = [];
	      var box = r.getAllInBox( select[0], select[1], select[2], select[3] );

	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;

	      r.redrawHint('select', true);

	      for( var i = 0; i< box.length; i++ ) {
	        if( box[i]._private.selectable ){
	          newlySelected.push( box[i] );
	        }
	      }

	      var newlySelCol = Collection( cy, newlySelected );

	      newlySelCol.select();

	      if( newlySelCol.length > 0 ) {
	        r.redrawHint('eles', true);
	      } else {
	        r.redraw();
	      }
	    }

	    var updateStartStyle = false;

	    if( start != null ){
	      start._private.active = false;
	      updateStartStyle = true;
	      start.unactivate();
	    }

	    if (e.touches[2]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	    } else if (e.touches[1]) {

	    } else if (e.touches[0]) {

	    // Last touch released
	    } else if (!e.touches[0]) {

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;

	      if (start != null ) {

	        var startWasGrabbed = start._private.grabbed;

	        freeDraggedElements( draggedEles );

	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        if( startWasGrabbed ){
	          start.trigger('free');
	        }

	        triggerEvents( start, ['touchend', 'tapend', 'vmouseup'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        start.unactivate();

	        r.touchData.start = null;

	      } else {
	        var near = r.findNearestElement(now[0], now[1], true, true);

	        triggerEvents( near, ['touchend', 'tapend', 'vmouseup'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	      }

	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom;

	      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
	      if (start != null
	          && !r.dragData.didDrag // didn't drag nodes around
	          && start._private.selectable
	          && rdist2 < r.touchTapThreshold2
	          && !r.pinching // pinch to zoom should not affect selection
	      ) {

	        if( cy.selectionType() === 'single' ){
	          cy.$(':selected').unmerge( start ).unselect();
	          start.select();
	        } else {
	          if( start.selected() ){
	            start.unselect();
	          } else {
	            start.select();
	          }
	        }

	        updateStartStyle = true;


	        r.redrawHint('eles', true);
	      }

	      // Tap event, roughly same as mouse click event for touch
	      if( !r.touchData.singleTouchMoved ){
	        triggerEvents( start, ['tap', 'vclick'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );
	      }

	      r.touchData.singleTouchMoved = true;
	    }

	    for( var j = 0; j < now.length; j++ ){ earlier[j] = now[j]; }

	    r.dragData.didDrag = false; // reset for next mousedown

	    if( e.touches.length === 0 ){
	      r.touchData.dragDelta = [];
	    }

	    if( updateStartStyle && start ){
	      start.updateStyle(false);
	    }

	    if( e.touches.length < 2 ){
	      r.pinching = false;
	      r.redrawHint('eles', true);
	      r.redraw();
	    }

	    //r.redraw();

	  }, false);

	  // fallback compatibility layer for ms pointer events
	  if( typeof TouchEvent === 'undefined' ){

	    var pointers = [];

	    var makeTouch = function( e ){
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width/2,
	        radiusY: e.height/2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };

	    var makePointer = function( e ){
	      return {
	        event: e,
	        touch: makeTouch(e)
	      };
	    };

	    var addPointer = function( e ){
	      pointers.push( makePointer(e) );
	    };

	    var removePointer = function( e ){
	      for( var i = 0; i < pointers.length; i++ ){
	        var p = pointers[i];

	        if( p.event.pointerId === e.pointerId ){
	          pointers.splice( i, 1 );
	          return;
	        }
	      }
	    };

	    var updatePointer = function( e ){
	      var p = pointers.filter(function( p ){
	        return p.event.pointerId === e.pointerId;
	      })[0];

	      p.event = e;
	      p.touch = makeTouch(e);
	    };

	    var addTouchesToEvent = function( e ){
	      e.touches = pointers.map(function( p ){
	        return p.touch;
	      });
	    };

	    var pointerIsMouse = function( e ){
	      return e.pointerType === 'mouse' || e.pointerType === 4;
	    };

	    r.registerBinding(r.container, 'pointerdown', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      e.preventDefault();

	      addPointer( e );

	      addTouchesToEvent( e );
	      touchstartHandler( e );
	    });

	    r.registerBinding(r.container, 'pointerup', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchendHandler( e );
	    });

	    r.registerBinding(r.container, 'pointercancel', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchcancelHandler( e );
	    });

	    r.registerBinding(r.container, 'pointermove', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      e.preventDefault();

	      updatePointer( e );

	      addTouchesToEvent( e );
	      touchmoveHandler( e );
	    });

	  }
	};

	module.exports = BRp;

	},{"../../../collection":23,"../../../event":42,"../../../is":77,"../../../util":94}],60:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');

	var BRp = {};

	BRp.registerNodeShapes = function(){
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;

	  nodeShapes['ellipse'] = {
	    name: 'ellipse',

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.intersectLineEllipse(
	        x, y,
	        nodeX,
	        nodeY,
	        width / 2 + padding,
	        height / 2 + padding)
	      ;
	    },

	    checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	      x -= centerX;
	      y -= centerY;

	      x /= (width / 2 + padding);
	      y /= (height / 2 + padding);

	      return x*x + y*y <= 1;
	    }
	  };

	  function generatePolygon( name, points ){
	    return ( nodeShapes[name] = {
	      name: name,

	      points: points,

	      draw: function( context, centerX, centerY, width, height ){
	        renderer.nodeShapeImpl('polygon')( context, centerX, centerY, width, height, this.points );
	      },

	      intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	        return math.polygonIntersectLine(
	            x, y,
	            this.points,
	            nodeX,
	            nodeY,
	            width / 2, height / 2,
	            padding)
	          ;
	      },

	      checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	        return math.pointInsidePolygon(x, y, nodeShapes[name].points,
	          centerX, centerY, width, height, [0, -1], padding)
	        ;
	      }
	    } );
	  }

	  generatePolygon( 'triangle', math.generateUnitNgonPointsFitToSquare(3, 0) );

	  generatePolygon( 'square', math.generateUnitNgonPointsFitToSquare(4, 0) );
	  nodeShapes['rectangle'] = nodeShapes['square'];

	  nodeShapes['roundrectangle'] = {
	    name: 'roundrectangle',

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.roundRectangleIntersectLine(
	        x, y,
	        nodeX,
	        nodeY,
	        width, height,
	        padding)
	      ;
	    },

	    // Looks like the width passed into this function is actually the total width / 2
	    checkPoint: function(
	      x, y, padding, width, height, centerX, centerY ){

	      var cornerRadius = math.getRoundRectangleRadius(width, height);

	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points,
	        centerX, centerY, width, height - 2 * cornerRadius, [0, -1], padding) ){
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points,
	        centerX, centerY, width - 2 * cornerRadius, height, [0, -1], padding) ){
	        return true;
	      }

	      var checkInEllipse = function( x, y, centerX, centerY, width, height, padding ){
	        x -= centerX;
	        y -= centerY;

	        x /= (width / 2 + padding);
	        y /= (height / 2 + padding);

	        return (x*x + y*y <= 1);
	      };


	      // Check top left quarter circle
	      if (checkInEllipse(x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check top right quarter circle
	      if (checkInEllipse(x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check bottom right quarter circle
	      if (checkInEllipse(x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check bottom left quarter circle
	      if (checkInEllipse(x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      return false;
	    }
	  };

	  generatePolygon( 'diamond', [
	    0, 1,
	    1, 0,
	    0, -1,
	    -1, 0
	  ] );

	  generatePolygon( 'pentagon', math.generateUnitNgonPointsFitToSquare(5, 0) );

	  generatePolygon( 'hexagon', math.generateUnitNgonPointsFitToSquare(6, 0) );

	  generatePolygon( 'heptagon', math.generateUnitNgonPointsFitToSquare(7, 0) );

	  generatePolygon( 'octagon', math.generateUnitNgonPointsFitToSquare(8, 0) );

	  var star5Points = new Array(20);
	  {
	    var outerPoints = math.generateUnitNgonPoints(5, 0);
	    var innerPoints = math.generateUnitNgonPoints(5, Math.PI / 5);

	    // Outer radius is 1; inner radius of star is smaller
	    var innerRadius = 0.5 * (3 - Math.sqrt(5));
	    innerRadius *= 1.57;

	    for (var i=0;i<innerPoints.length/2;i++ ){
	      innerPoints[i*2] *= innerRadius;
	      innerPoints[i*2+1] *= innerRadius;
	    }

	    for (var i=0;i<20/4;i++ ){
	      star5Points[i*4] = outerPoints[i*2];
	      star5Points[i*4+1] = outerPoints[i*2+1];

	      star5Points[i*4+2] = innerPoints[i*2];
	      star5Points[i*4+3] = innerPoints[i*2+1];
	    }
	  }

	  star5Points = math.fitPolygonToSquare( star5Points );

	  generatePolygon( 'star', star5Points );

	  generatePolygon( 'vee', [
	    -1, -1,
	    0, -0.333,
	    1, -1,
	    0, 1
	  ] );

	  generatePolygon( 'rhomboid', [
	    -1, -1,
	    0.333, -1,
	    1, 1,
	    -0.333, 1
	  ] );

	  nodeShapes.makePolygon = function( points ){

	    // use caching on user-specified polygons so they are as fast as native shapes

	    var key = points.join('$');
	    var name = 'polygon-' + key;
	    var shape;

	    if( (shape = nodeShapes[name]) ){ // got cached shape
	      return shape;
	    }

	    // create and cache new shape
	    return generatePolygon( name, points );
	  };

	};

	module.exports = BRp;

	},{"../../../math":79}],61:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../../util');

	var BRp = {};

	BRp.timeToRender = function(){
	  return this.redrawTotalTime / this.redrawCount;
	};

	var minRedrawLimit = 1000/60; // people can't see much better than 60fps
	var maxRedrawLimit = 1000;  // don't cap max b/c it's more important to be responsive than smooth

	BRp.redraw = function( options ){
	  options = options || util.staticEmptyObject();

	  var r = this;
	  var forcedContext = options.forcedContext;

	  if( r.averageRedrawTime === undefined ){ r.averageRedrawTime = 0; }
	  if( r.lastRedrawTime === undefined ){ r.lastRedrawTime = 0; }

	  var redrawLimit = r.lastRedrawTime; // estimate the ideal redraw limit based on how fast we can draw
	  redrawLimit = minRedrawLimit > redrawLimit ? minRedrawLimit : redrawLimit;
	  redrawLimit = redrawLimit < maxRedrawLimit ? redrawLimit : maxRedrawLimit;

	  if( r.lastDrawTime === undefined ){ r.lastDrawTime = 0; }

	  var nowTime = Date.now();
	  var timeElapsed = nowTime - r.lastDrawTime;
	  var callAfterLimit = timeElapsed >= redrawLimit;

	  if( !forcedContext ){
	    if( !callAfterLimit ){
	      r.skipFrame = true;
	      return;
	    }
	  }

	  r.requestedFrame = true;
	  r.renderOptions = options;
	};

	BRp.startRenderLoop = function(){
	  var r = this;

	  if( r.renderLoopStarted ){
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }

	  var renderFn = function(){
	    if( r.destroyed ){ return; }

	    if( r.requestedFrame && !r.skipFrame ){
	      var startTime = util.performanceNow();

	      r.render( r.renderOptions );

	      var endTime = r.lastRedrawTime = util.performanceNow();

	      if( r.averageRedrawTime === undefined ){
	        r.averageRedrawTime = endTime - startTime;
	      }

	      if( r.redrawCount === undefined ){
	        r.redrawCount = 0;
	      }

	      r.redrawCount++;

	      if( r.redrawTotalTime === undefined ){
	        r.redrawTotalTime = 0;
	      }

	      var duration = endTime - startTime;

	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration;

	      // use a weighted average with a bias from the previous average so we don't spike so easily
	      r.averageRedrawTime = r.averageRedrawTime/2 + duration/2;

	      r.requestedFrame = false;
	    }

	    r.skipFrame = false;

	    util.requestAnimationFrame( renderFn );
	  };

	  util.requestAnimationFrame( renderFn );

	};

	module.exports = BRp;

	},{"../../../util":94}],62:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var impl;

	CRp.arrowShapeImpl = function( name ){
	  return ( impl || (impl = {
	    'polygon': function( context, points ){
	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[i];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'triangle-backcurve': function( context, points, controlPoint ){
	      var firstPt;

	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[i];

	        if( i === 0 ){
	          firstPt = pt;
	        }

	        context.lineTo( pt.x, pt.y );
	      }

	      context.quadraticCurveTo( controlPoint.x, controlPoint.y, firstPt.x, firstPt.y );
	    },

	    'triangle-tee': function( context, trianglePoints, teePoints ){
	      var triPts = trianglePoints;
	      for( var i = 0; i < triPts.length; i++ ){
	        var pt = triPts[i];

	        context.lineTo( pt.x, pt.y );
	      }

	      var teePts = teePoints;
	      var firstTeePt = teePoints[0];
	      context.moveTo( firstTeePt.x, firstTeePt.y );

	      for( var i = 0; i < teePts.length; i++ ){
	        var pt = teePts[i];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'circle': function( context, rx, ry, r ){
	      context.arc(rx, ry, r, 0, Math.PI * 2, false);
	    }
	  }) )[ name ];
	};

	module.exports = CRp;

	},{}],63:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	CRp.drawEdge = function(context, edge, drawOverlayInstead) {
	  var rs = edge._private.rscratch;
	  var usePaths = this.usePaths();

	  // if bezier ctrl pts can not be calculated, then die
	  if( rs.badBezier || rs.badLine || isNaN( rs.allpts[0] ) ){ // iNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }

	  var style = edge._private.style;

	  // Edge line width
	  if (style['width'].pfValue <= 0) {
	    return;
	  }

	  var overlayPadding = style['overlay-padding'].pfValue;
	  var overlayOpacity = style['overlay-opacity'].value;
	  var overlayColor = style['overlay-color'].value;

	  // Edge color & opacity
	  if( drawOverlayInstead ){

	    if( overlayOpacity === 0 ){ // exit early if no overlay
	      return;
	    }

	    this.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
	    context.lineCap = 'round';

	    if( rs.edgeType == 'self' && !usePaths ){
	      context.lineCap = 'butt';
	    }

	  } else {
	    var lineColor = style['line-color'].value;

	    this.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], style.opacity.value);

	    context.lineCap = 'butt';
	  }

	  var edgeWidth = style['width'].pfValue + (drawOverlayInstead ? 2 * overlayPadding : 0);
	  var lineStyle = drawOverlayInstead ? 'solid' : style['line-style'].value;
	  context.lineWidth = edgeWidth;

	  var shadowBlur = style['shadow-blur'].pfValue;
	  var shadowOpacity = style['shadow-opacity'].value;
	  var shadowColor = style['shadow-color'].value;
	  var shadowOffsetX = style['shadow-offset-x'].pfValue;
	  var shadowOffsetY = style['shadow-offset-y'].pfValue;

	  this.shadowStyle(context,  shadowColor, drawOverlayInstead ? 0 : shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	  this.drawEdgePath(
	    edge,
	    context,
	    rs.allpts,
	    lineStyle,
	    edgeWidth
	  );

	  this.drawArrowheads(context, edge, drawOverlayInstead);

	  this.shadowStyle(context, 'transparent', 0); // reset for next guy

	};


	CRp.drawEdgePath = function(edge, context, pts, type, width) {
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    var pathCacheKey = pts.join('$');
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

	    if( keyMatches ){
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if( canvasCxt.setLineDash ){ // for very outofdate browsers
	    switch( type ){
	      case 'dotted':
	        canvasCxt.setLineDash([ 1, 1 ]);
	        break;

	      case 'dashed':
	        canvasCxt.setLineDash([ 6, 3 ]);
	        break;

	      case 'solid':
	        canvasCxt.setLineDash([ ]);
	        break;
	    }
	  }

	  if( !pathCacheHit ){
	    if( context.beginPath ){ context.beginPath(); }
	    context.moveTo( pts[0], pts[1] );

	    switch( rs.edgeType ){
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        if( !rs.badBezier ){
	          for( var i = 2; i + 3 < pts.length; i += 4 ){
	            context.quadraticCurveTo( pts[i], pts[i+1], pts[i+2], pts[i+3] );
	          }
	        }
	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        if( !rs.badLine ){
	          for( var i = 2; i + 1 < pts.length; i += 2 ){
	            context.lineTo( pts[i], pts[i+1] );
	          }
	        }
	        break;
	    }
	  }

	  context = canvasCxt;
	  if( usePaths ){
	    context.stroke( path );
	  } else {
	    context.stroke();
	  }

	  // reset any line dashes
	  if( context.setLineDash ){ // for very outofdate browsers
	    context.setLineDash([ ]);
	  }

	};

	CRp.drawArrowheads = function(context, edge, drawOverlayInstead) {
	  if( drawOverlayInstead ){ return; } // don't do anything for overlays

	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle );
	  }

	  this.drawArrowhead( context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle );

	  this.drawArrowhead( context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle );

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle );
	  }
	};

	CRp.drawArrowhead = function( context, edge, prefix, x, y, angle ){
	  if( isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null ){ return; }

	  var self = this;
	  var style = edge._private.style;
	  var arrowShape = style[prefix + '-arrow-shape'].value;

	  if( arrowShape === 'none' ){
	    return;
	  }

	  var gco = context.globalCompositeOperation;

	  var arrowClearFill = style[prefix + '-arrow-fill'].value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = style[prefix + '-arrow-fill'].value;

	  if( arrowShape === 'half-triangle-overshot' ){
	    arrowFill = 'hollow';
	    arrowClearFill = 'hollow';
	  }

	  if( style.opacity.value !== 1 || arrowFill === 'hollow' ){ // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';

	    self.fillStyle(context, 255, 255, 255, 1);
	    self.strokeStyle(context, 255, 255, 255, 1);

	    self.drawArrowShape( edge, prefix, context,
	      arrowClearFill, style['width'].pfValue, style[prefix + '-arrow-shape'].value,
	      x, y, angle
	    );

	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)

	  var color = style[prefix + '-arrow-color'].value;
	  self.fillStyle(context, color[0], color[1], color[2], style.opacity.value);
	  self.strokeStyle(context, color[0], color[1], color[2], style.opacity.value);

	  self.drawArrowShape( edge, prefix, context,
	    arrowFill, style['width'].pfValue, style[prefix + '-arrow-shape'].value,
	    x, y, angle
	  );
	};

	CRp.drawArrowShape = function(edge, arrowType, context, fill, edgeWidth, shape, x, y, angle) {
	  var r = this;
	  var usePaths = this.usePaths();
	  var rs = edge._private.rscratch;
	  var pathCacheHit = false;
	  var path;
	  var canvasContext = context;
	  var translation = { x: x, y: y };
	  var size = this.getArrowWidth( edgeWidth );
	  var shapeImpl = r.arrowShapes[shape];

	  if( usePaths ){
	    var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
	    rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
	    rs.arrowPathCache = rs.arrowPathCache || {};

	    var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;
	    if( alreadyCached ){
	      path = context = rs.arrowPathCache[arrowType];
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.arrowPathCacheKey[arrowType] = pathCacheKey;
	      rs.arrowPathCache[arrowType] = path;
	    }
	  }

	  if( context.beginPath ){ context.beginPath(); }

	  if( !pathCacheHit ){
	    shapeImpl.draw(context, size, angle, translation);
	  }

	  if( !shapeImpl.leavePathOpen && context.closePath ){
	    context.closePath();
	  }

	  context = canvasContext;

	  if( fill === 'filled' || fill === 'both' ){
	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }
	  }

	  if( fill === 'hollow' || fill === 'both' ){
	    context.lineWidth = ( shapeImpl.matchEdgeWidth ? edgeWidth : 1 );
	    context.lineJoin = 'miter';

	    if( usePaths ){
	      context.stroke( path );
	    } else {
	      context.stroke();
	    }

	  }
	};

	module.exports = CRp;

	},{}],64:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	CRp.safeDrawImage = function( context, img, ix, iy, iw, ih, x, y, w, h ){
	  var r = this;

	  try {
	    context.drawImage( img, ix, iy, iw, ih, x, y, w, h );
	  } catch(e){
	    r.data.canvasNeedsRedraw[r.NODE] = true;
	    r.data.canvasNeedsRedraw[r.DRAG] = true;

	    r.drawingImage = true;

	    r.redraw();
	  }
	};

	CRp.drawInscribedImage = function(context, img, node) {
	  var r = this;
	  var nodeX = node._private.position.x;
	  var nodeY = node._private.position.y;
	  var style = node._private.style;
	  var fit = style['background-fit'].value;
	  var xPos = style['background-position-x'];
	  var yPos = style['background-position-y'];
	  var repeat = style['background-repeat'].value;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var rs = node._private.rscratch;
	  var clip = style['background-clip'].value;
	  var shouldClip = clip === 'node';
	  var imgOpacity = style['background-image-opacity'].value;

	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH;

	  // workaround for broken browsers like ie
	  if( null == imgW || null == imgH ){
	    document.body.appendChild( img );

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;

	    document.body.removeChild( img );
	  }

	  var w = imgW;
	  var h = imgH;

	  var bgW = style['background-width'];
	  if( bgW.value !== 'auto' ){
	    if( bgW.units === '%' ){
	      w = bgW.value/100 * nodeW;
	    } else {
	      w = bgW.pfValue;
	    }
	  }

	  var bgH = style['background-height'];
	  if( bgH.value !== 'auto' ){
	    if( bgH.units === '%' ){
	      h = bgH.value/100 * nodeH;
	    } else {
	      h = bgH.pfValue;
	    }
	  }

	  if( w === 0 || h === 0 ){
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if( fit === 'contain' ){
	    var scale = Math.min( nodeW/w, nodeH/h );

	    w *= scale;
	    h *= scale;

	  } else if( fit === 'cover' ){
	    var scale = Math.max( nodeW/w, nodeH/h );

	    w *= scale;
	    h *= scale;
	  }

	  var x = (nodeX - nodeW/2); // left
	  if( xPos.units === '%' ){
	    x += (nodeW - w) * xPos.value/100;
	  } else {
	    x += xPos.pfValue;
	  }

	  var y = (nodeY - nodeH/2); // top
	  if( yPos.units === '%' ){
	    y += (nodeH - h) * yPos.value/100;
	  } else {
	    y += yPos.pfValue;
	  }

	  if( rs.pathCache ){
	    x -= nodeX;
	    y -= nodeY;

	    nodeX = 0;
	    nodeY = 0;
	  }

	  var gAlpha = context.globalAlpha;

	  context.globalAlpha = imgOpacity;

	  if( repeat === 'no-repeat' ){

	    if( shouldClip ){
	      context.save();

	      if( rs.pathCache ){
	        context.clip( rs.pathCache );
	      } else {
	        r.nodeShapes[r.getNodeShape(node)].draw(
	          context,
	          nodeX, nodeY,
	          nodeW, nodeH);

	        context.clip();
	      }
	    }

	    r.safeDrawImage( context, img, 0, 0, imgW, imgH, x, y, w, h );

	    if( shouldClip ){
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern( img, repeat );
	    context.fillStyle = pattern;

	    r.nodeShapes[r.getNodeShape(node)].draw(
	        context,
	        nodeX, nodeY,
	        nodeW, nodeH);

	      context.translate(x, y);
	      context.fill();
	      context.translate(-x, -y);
	  }

	  context.globalAlpha = gAlpha;

	};

	module.exports = CRp;

	},{}],65:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	// Draw edge text
	CRp.drawEdgeText = function(context, edge) {
	  var text = edge._private.style['label'].strValue;

	  if( !text || text.match(/^\s+$/) ){
	    return;
	  }

	  if( this.hideEdgesOnViewport && (this.dragData.didDrag || this.pinching || this.hoverData.dragging || this.data.wheel || this.swipePanning) ){ return; } // save cycles on pinching

	  var computedSize = edge._private.style['font-size'].pfValue * edge.cy().zoom();
	  var minSize = edge._private.style['min-zoomed-font-size'].pfValue;

	  if( computedSize < minSize ){
	    return;
	  }

	  // Calculate text draw position

	  context.textAlign = 'center';
	  context.textBaseline = 'middle';

	  var rs = edge._private.rscratch;
	  if( !is.number( rs.labelX ) || !is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered

	  var style = edge._private.style;
	  var autorotate = style['edge-text-rotation'].strValue === 'autorotate';
	  var theta;

	  if( autorotate ){
	    theta = rs.labelAngle;

	    context.translate(rs.labelX, rs.labelY);
	    context.rotate(theta);

	    this.drawText(context, edge, 0, 0);

	    context.rotate(-theta);
	    context.translate(-rs.labelX, -rs.labelY);
	  } else {
	    this.drawText(context, edge, rs.labelX, rs.labelY);
	  }

	};

	// Draw node text
	CRp.drawNodeText = function(context, node) {
	  var text = node._private.style['label'].strValue;

	  if ( !text || text.match(/^\s+$/) ) {
	    return;
	  }

	  var computedSize = node._private.style['font-size'].pfValue * node.cy().zoom();
	  var minSize = node._private.style['min-zoomed-font-size'].pfValue;

	  if( computedSize < minSize ){
	    return;
	  }

	  // this.recalculateNodeLabelProjection( node );

	  var textHalign = node._private.style['text-halign'].strValue;
	  var textValign = node._private.style['text-valign'].strValue;
	  var rs = node._private.rscratch;
	  if( !is.number( rs.labelX ) || !is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered

	  switch( textHalign ){
	    case 'left':
	      context.textAlign = 'right';
	      break;

	    case 'right':
	      context.textAlign = 'left';
	      break;

	    default: // e.g. center
	      context.textAlign = 'center';
	  }

	  switch( textValign ){
	    case 'top':
	      context.textBaseline = 'bottom';
	      break;

	    case 'bottom':
	      context.textBaseline = 'top';
	      break;

	    default: // e.g. center
	      context.textBaseline = 'middle';
	  }

	  this.drawText(context, node, rs.labelX, rs.labelY);
	};

	CRp.getFontCache = function(context){
	  var cache;

	  this.fontCaches = this.fontCaches || [];

	  for( var i = 0; i < this.fontCaches.length; i++ ){
	    cache = this.fontCaches[i];

	    if( cache.context === context ){
	      return cache;
	    }
	  }

	  cache = {
	    context: context
	  };
	  this.fontCaches.push(cache);

	  return cache;
	};

	// set up canvas context with font
	// returns transformed text string
	CRp.setupTextStyle = function( context, element ){
	  // Font style
	  var parentOpacity = element.effectiveOpacity();
	  var style = element._private.style;
	  var labelStyle = style['font-style'].strValue;
	  var labelSize = style['font-size'].pfValue + 'px';
	  var labelFamily = style['font-family'].strValue;
	  var labelWeight = style['font-weight'].strValue;
	  var opacity = style['text-opacity'].value * style['opacity'].value * parentOpacity;
	  var outlineOpacity = style['text-outline-opacity'].value * opacity;
	  var color = style['color'].value;
	  var outlineColor = style['text-outline-color'].value;
	  var shadowBlur = style['text-shadow-blur'].pfValue;
	  var shadowOpacity = style['text-shadow-opacity'].value;
	  var shadowColor = style['text-shadow-color'].value;
	  var shadowOffsetX = style['text-shadow-offset-x'].pfValue;
	  var shadowOffsetY = style['text-shadow-offset-y'].pfValue;

	  var fontCacheKey = element._private.fontKey;
	  var cache = this.getFontCache(context);

	  if( cache.key !== fontCacheKey ){
	    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

	    cache.key = fontCacheKey;
	  }

	  var text = this.getLabelText( element );

	  // Calculate text draw position based on text alignment

	  // so text outlines aren't jagged
	  context.lineJoin = 'round';

	  this.fillStyle(context, color[0], color[1], color[2], opacity);

	  this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);

	  this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	  return text;
	};

	function roundRect(ctx, x, y, width, height, radius) {
	  var radius = radius || 5;
	  ctx.beginPath();
	  ctx.moveTo(x + radius, y);
	  ctx.lineTo(x + width - radius, y);
	  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  ctx.lineTo(x + width, y + height - radius);
	  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  ctx.lineTo(x + radius, y + height);
	  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  ctx.lineTo(x, y + radius);
	  ctx.quadraticCurveTo(x, y, x + radius, y);
	  ctx.closePath();
	  ctx.fill();
	}

	// Draw text
	CRp.drawText = function(context, element, textX, textY) {
	  var _p = element._private;
	  var style = _p.style;
	  var rstyle = _p.rstyle;
	  var rscratch = _p.rscratch;
	  var parentOpacity = element.effectiveOpacity();
	  if( parentOpacity === 0 || style['text-opacity'].value === 0){ return; }

	  var text = this.setupTextStyle( context, element );
	  var halign = style['text-halign'].value;
	  var valign = style['text-valign'].value;

	  if( element.isEdge() ){
	    halign = 'center';
	    valign = 'center';
	  }

	  if( element.isNode() ){
	    var pLeft = style['padding-left'].pfValue;
	    var pRight = style['padding-right'].pfValue;
	    var pTop = style['padding-top'].pfValue;
	    var pBottom = style['padding-bottom'].pfValue;

	    textX += pLeft/2;
	    textX -= pRight/2;

	    textY += pTop/2;
	    textY -= pBottom/2;
	  }

	  if ( text != null && !isNaN(textX) && !isNaN(textY)) {
	    var backgroundOpacity = style['text-background-opacity'].value;
	    var borderOpacity = style['text-border-opacity'].value;
	    var textBorderWidth = style['text-border-width'].pfValue;

	    if( backgroundOpacity > 0 || (textBorderWidth > 0 && borderOpacity > 0) ){
	      var margin = 4 + textBorderWidth/2;

	      if (element.isNode()) {
	        //Move textX, textY to include the background margins
	        if (valign === 'top') {
	          textY -= margin;
	        } else if (valign === 'bottom') {
	          textY += margin;
	        }
	        if (halign === 'left') {
	          textX -= margin;
	        } else if (halign === 'right') {
	          textX += margin;
	        }
	      }

	      var bgWidth = rstyle.labelWidth;
	      var bgHeight = rstyle.labelHeight;
	      var bgX = textX;

	      if (halign) {
	        if (halign == 'center') {
	          bgX = bgX - bgWidth / 2;
	        } else if (halign == 'left') {
	          bgX = bgX- bgWidth;
	        }
	      }

	      var bgY = textY;

	      if (element.isNode()) {
	        if (valign == 'top') {
	           bgY = bgY - bgHeight;
	        } else if (valign == 'center') {
	          bgY = bgY- bgHeight / 2;
	        }
	      } else {
	        bgY = bgY - bgHeight / 2;
	      }

	      if (style['edge-text-rotation'].strValue === 'autorotate') {
	        textY = 0;
	        bgWidth += 4;
	        bgX = textX - bgWidth / 2;
	        bgY = textY - bgHeight / 2;
	      } else {
	        // Adjust with border width & margin
	        bgX -= margin;
	        bgY -= margin;
	        bgHeight += margin*2;
	        bgWidth += margin*2;
	      }

	      if( backgroundOpacity > 0 ){
	        var textFill = context.fillStyle;
	        var textBackgroundColor = style['text-background-color'].value;

	        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
	        var styleShape = style['text-background-shape'].strValue;
	        if (styleShape == 'roundrectangle') {
	          roundRect(context, bgX, bgY, bgWidth, bgHeight, 2);
	        } else {
	          context.fillRect(bgX,bgY,bgWidth,bgHeight);
	        }
	        context.fillStyle = textFill;
	      }

	      if( textBorderWidth > 0 && borderOpacity > 0 ){
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = style['text-border-color'].value;
	        var textBorderStyle = style['text-border-style'].value;

	        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;

	        if( context.setLineDash ){ // for very outofdate browsers
	          switch( textBorderStyle ){
	            case 'dotted':
	              context.setLineDash([ 1, 1 ]);
	              break;
	            case 'dashed':
	              context.setLineDash([ 4, 2 ]);
	              break;
	            case 'double':
	              context.lineWidth = textBorderWidth/4; // 50% reserved for white between the two borders
	              context.setLineDash([ ]);
	              break;
	            case 'solid':
	              context.setLineDash([ ]);
	              break;
	          }
	        }

	        context.strokeRect(bgX,bgY,bgWidth,bgHeight);

	        if( textBorderStyle === 'double' ){
	          var whiteWidth = textBorderWidth/2;

	          context.strokeRect(bgX+whiteWidth,bgY+whiteWidth,bgWidth-whiteWidth*2,bgHeight-whiteWidth*2);
	        }

	        if( context.setLineDash ){ // for very outofdate browsers
	          context.setLineDash([ ]);
	        }
	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }

	    }

	    var lineWidth = 2  * style['text-outline-width'].pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if( lineWidth > 0 ){
	      context.lineWidth = lineWidth;
	    }

	    if( style['text-wrap'].value === 'wrap' ){
	      var lines = rscratch.labelWrapCachedLines;
	      var lineHeight = rstyle.labelHeight / lines.length;

	      switch( valign ){
	        case 'top':
	          textY -= (lines.length - 1) * lineHeight;
	          break;

	        case 'bottom':
	          // nothing required
	          break;

	        default:
	        case 'center':
	          textY -= (lines.length - 1) * lineHeight / 2;
	      }

	      for( var l = 0; l < lines.length; l++ ){
	        if( lineWidth > 0 ){
	          context.strokeText( lines[l], textX, textY );
	        }

	        context.fillText( lines[l], textX, textY );

	        textY += lineHeight;
	      }

	    } else {
	      if( lineWidth > 0 ){
	        context.strokeText( text, textX, textY );
	      }

	      context.fillText( text, textX, textY );
	    }


	    this.shadowStyle(context, 'transparent', 0); // reset for next guy
	  }
	};


	module.exports = CRp;

	},{"../../../is":77}],66:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	// Draw node
	CRp.drawNode = function(context, node, drawOverlayInstead) {

	  var r = this;
	  var nodeWidth, nodeHeight;
	  var style = node._private.style;
	  var rs = node._private.rscratch;
	  var _p = node._private;
	  var pos = _p.position;

	  if( !is.number(pos.x) || !is.number(pos.y) ){
	    return; // can't draw node with undefined position
	  }

	  var usePaths = this.usePaths();
	  var canvasContext = context;
	  var path;
	  var pathCacheHit = false;

	  var overlayPadding = style['overlay-padding'].pfValue;
	  var overlayOpacity = style['overlay-opacity'].value;
	  var overlayColor = style['overlay-color'].value;

	  if( drawOverlayInstead && overlayOpacity === 0 ){ // exit early if drawing overlay but none to draw
	    return;
	  }

	  var parentOpacity = node.effectiveOpacity();
	  if( parentOpacity === 0 ){ return; }

	  nodeWidth = node.width() + style['padding-left'].pfValue + style['padding-right'].pfValue;
	  nodeHeight = node.height() + style['padding-top'].pfValue + style['padding-bottom'].pfValue;

	  context.lineWidth = style['border-width'].pfValue;

	  if( drawOverlayInstead === undefined || !drawOverlayInstead ){

	    var url = style['background-image'].value[2] ||
	      style['background-image'].value[1];
	    var image;

	    if (url !== undefined) {

	      // get image, and if not loaded then ask to redraw when later loaded
	      image = this.getCachedImage(url, function(){
	        r.data.canvasNeedsRedraw[r.NODE] = true;
	        r.data.canvasNeedsRedraw[r.DRAG] = true;

	        r.drawingImage = true;

	        r.redraw();
	      });

	      var prevBging = _p.backgrounding;
	      _p.backgrounding = !image.complete;

	      if( prevBging !== _p.backgrounding ){ // update style b/c :backgrounding state changed
	        node.updateStyle( false );
	      }
	    }

	    // Node color & opacity

	    var bgColor = style['background-color'].value;
	    var borderColor = style['border-color'].value;
	    var borderStyle = style['border-style'].value;

	    this.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], style['background-opacity'].value * parentOpacity);

	    this.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], style['border-opacity'].value * parentOpacity);

	    var shadowBlur = style['shadow-blur'].pfValue;
	    var shadowOpacity = style['shadow-opacity'].value;
	    var shadowColor = style['shadow-color'].value;
	    var shadowOffsetX = style['shadow-offset-x'].pfValue;
	    var shadowOffsetY = style['shadow-offset-y'].pfValue;

	    this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	    context.lineJoin = 'miter'; // so borders are square with the node shape

	    if( context.setLineDash ){ // for very outofdate browsers
	      switch( borderStyle ){
	        case 'dotted':
	          context.setLineDash([ 1, 1 ]);
	          break;

	        case 'dashed':
	          context.setLineDash([ 4, 2 ]);
	          break;

	        case 'solid':
	        case 'double':
	          context.setLineDash([ ]);
	          break;
	      }
	    }


	    var styleShape = style['shape'].strValue;

	    if( usePaths ){
	      var pathCacheKey = styleShape + '$' + nodeWidth +'$' + nodeHeight;

	      context.translate( pos.x, pos.y );

	      if( rs.pathCacheKey === pathCacheKey ){
	        path = context = rs.pathCache;
	        pathCacheHit = true;
	      } else {
	        path = context = new Path2D();
	        rs.pathCacheKey = pathCacheKey;
	        rs.pathCache = path;
	      }
	    }

	    if( !pathCacheHit ){

	      var npos = pos;

	      if( usePaths ){
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }

	      r.nodeShapes[this.getNodeShape(node)].draw(
	            context,
	            npos.x,
	            npos.y,
	            nodeWidth,
	            nodeHeight);
	    }

	    context = canvasContext;

	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }

	    this.shadowStyle(context, 'transparent', 0); // reset for next guy

	    if (url !== undefined) {
	      if( image.complete ){
	        this.drawInscribedImage(context, image, node);
	      }
	    }

	    var darkness = style['background-blacken'].value;
	    var borderWidth = style['border-width'].pfValue;

	    if( this.hasPie(node) ){
	      this.drawPie( context, node, parentOpacity );

	      // redraw path for blacken and border
	      if( darkness !== 0 || borderWidth !== 0 ){

	        if( !usePaths ){
	          r.nodeShapes[this.getNodeShape(node)].draw(
	              context,
	              pos.x,
	              pos.y,
	              nodeWidth,
	              nodeHeight);
	        }
	      }
	    }

	    if( darkness > 0 ){
	      this.fillStyle(context, 0, 0, 0, darkness);

	      if( usePaths ){
	        context.fill( path );
	      } else {
	        context.fill();
	      }

	    } else if( darkness < 0 ){
	      this.fillStyle(context, 255, 255, 255, -darkness);

	      if( usePaths ){
	        context.fill( path );
	      } else {
	        context.fill();
	      }
	    }

	    // Border width, draw border
	    if (borderWidth > 0) {

	      if( usePaths ){
	        context.stroke( path );
	      } else {
	        context.stroke();
	      }

	      if( borderStyle === 'double' ){
	        context.lineWidth = style['border-width'].pfValue/3;

	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';

	        if( usePaths ){
	          context.stroke( path );
	        } else {
	          context.stroke();
	        }

	        context.globalCompositeOperation = gco;
	      }

	    }

	    if( usePaths ){
	      context.translate( -pos.x, -pos.y );
	    }

	    // reset in case we changed the border style
	    if( context.setLineDash ){ // for very outofdate browsers
	      context.setLineDash([ ]);
	    }

	  // draw the overlay
	  } else {

	    if( overlayOpacity > 0 ){
	      this.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);

	      r.nodeShapes['roundrectangle'].draw(
	        context,
	        node._private.position.x,
	        node._private.position.y,
	        nodeWidth + overlayPadding * 2,
	        nodeHeight + overlayPadding * 2
	      );

	      context.fill();
	    }
	  }

	};

	// does the node have at least one pie piece?
	CRp.hasPie = function(node){
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};

	CRp.drawPie = function( context, node, nodeOpacity ){
	  node = node[0]; // ensure ele ref

	  var _p = node._private;
	  var cyStyle = node.cy().style();
	  var style = _p.style;
	  var pieSize = style['pie-size'];
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var x = _p.position.x;
	  var y = _p.position.y;
	  var radius = Math.min( nodeW, nodeH ) / 2; // must fit in node
	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    x = 0;
	    y = 0;
	  }

	  if( pieSize.units === '%' ){
	    radius = radius * pieSize.value / 100;
	  } else if( pieSize.pfValue !== undefined ){
	    radius = pieSize.pfValue / 2;
	  }

	  for( var i = 1; i <= cyStyle.pieBackgroundN; i++ ){ // 1..N
	    var size = style['pie-' + i + '-background-size'].value;
	    var color = style['pie-' + i + '-background-color'].value;
	    var opacity = style['pie-' + i + '-background-opacity'].value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]

	    // percent can't push beyond 1
	    if( percent + lastPercent > 1 ){
	      percent = 1 - lastPercent;
	    }

	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta;

	    // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle
	    if( size === 0 || lastPercent >= 1 || lastPercent + percent > 1 ){
	      continue;
	    }

	    context.beginPath();
	    context.moveTo(x, y);
	    context.arc( x, y, radius, angleStart, angleEnd );
	    context.closePath();

	    this.fillStyle(context, color[0], color[1], color[2], opacity);

	    context.fill();

	    lastPercent += percent;
	  }

	};


	module.exports = CRp;

	},{"../../../is":77}],67:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var util = _dereq_('../../../util');
	var math = _dereq_('../../../math');

	var motionBlurDelay = 100;

	// var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp.getPixelRatio = function(){
	  var context = this.data.contexts[0];

	  if( this.forcedPixelRatio != null ){
	    return this.forcedPixelRatio;
	  }

	  var backingStore = context.backingStorePixelRatio ||
	    context.webkitBackingStorePixelRatio ||
	    context.mozBackingStorePixelRatio ||
	    context.msBackingStorePixelRatio ||
	    context.oBackingStorePixelRatio ||
	    context.backingStorePixelRatio || 1;

	  return (window.devicePixelRatio || 1) / backingStore;
	};

	CRp.paintCache = function(context){
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;

	  for(var i = 0; i < caches.length; i++ ){
	    cache = caches[i];

	    if( cache.context === context ){
	      needToCreateCache = false;
	      break;
	    }
	  }

	  if( needToCreateCache ){
	    cache = {
	      context: context
	    };
	    caches.push( cache );
	  }

	  return cache;
	};

	CRp.fillStyle = function(context, r, g, b, a){
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp.strokeStyle = function(context, r, g, b, a){
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	CRp.shadowStyle = function(context, color, opacity, blur, offsetX, offsetY){
	  var zoom = this.cy.zoom();

	  var cache = this.paintCache(context);

	  // don't make expensive changes to the shadow style if it's not used
	  if( cache.shadowOpacity === 0 && opacity === 0 ){
	    return;
	  }

	  cache.shadowOpacity = opacity;

	  if (opacity > 0) {
	    context.shadowBlur = blur * zoom;
	    context.shadowColor = "rgba(" + color[0] + "," + color[1] + "," + color[2] + "," + opacity + ")";
	    context.shadowOffsetX = offsetX * zoom;
	    context.shadowOffsetY = offsetY * zoom;
	  } else {
	    context.shadowBlur = 0;
	    context.shadowColor = "transparent";
	  }
	};

	// Resize canvas
	CRp.matchCanvasSize = function(container) {
	  var r = this;
	  var data = r.data;
	  var width = container.clientWidth;
	  var height = container.clientHeight;
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;

	  if(
	    container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] ||
	    container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]
	  ){
	    pixelRatio = mbPxRatio;
	  }

	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;

	  if( canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight ){
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';

	  for (var i = 0; i < r.CANVAS_LAYERS; i++) {

	    canvas = data.canvases[i];

	    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  for (var i = 0; i < r.BUFFER_COUNT; i++) {

	    canvas = data.bufferCanvases[i];

	    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  r.textureMult = 1;
	  if( pixelRatio <= 1 ){
	    canvas = data.bufferCanvases[ r.TEXTURE_BUFFER ];

	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }

	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;

	};

	CRp.renderTo = function( cxt, zoom, pan, pxRatio ){
	  this.render({
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  });
	};

	CRp.render = function( options ) {
	  options = options || util.staticEmptyObject();

	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy; var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;

	  if( !forcedContext && r.motionBlurTimeout ){
	    clearTimeout( r.motionBlurTimeout );
	  }

	  if( motionBlur ){
	    if( r.mbFrames == null ){
	      r.mbFrames = 0;
	    }

	    if( !r.drawingImage ){ // image loading frames don't count towards motion blur blurry frames
	      r.mbFrames++;
	    }

	    if( r.mbFrames < 3 ){ // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    }

	    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
	    if( r.mbFrames > r.minMbLowQualFrames ){
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }

	  if( r.clearingMotionBlur ){
	    r.motionBlurPxRatio = 1;
	  }

	  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw
	  if( r.textureDrawLastFrame && !textureDraw ){
	    needDraw[r.NODE] = true;
	    needDraw[r.SELECT_BOX] = true;
	  }

	  var edges = r.getCachedEdges();
	  var coreStyle = cy.style()._private.coreStyle;

	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };

	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

	  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
	  if( !viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes) ){
	    r.motionBlurPxRatio = 1;
	  }

	  if( forcedPan ){
	    effectivePan = forcedPan;
	  }

	  // apply pixel ratio

	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;

	  var eles = {
	    drag: {
	      nodes: [],
	      edges: [],
	      eles: []
	    },
	    nondrag: {
	      nodes: [],
	      edges: [],
	      eles: []
	    }
	  };

	  function mbclear( context, x, y, w, h ){
	    var gco = context.globalCompositeOperation;

	    context.globalCompositeOperation = 'destination-out';
	    r.fillStyle( context, 255, 255, 255, r.motionBlurTransparency );
	    context.fillRect(x, y, w, h);

	    context.globalCompositeOperation = gco;
	  }

	  function setContextTransform(context, clear){
	    var ePan, eZoom, w, h;

	    if( !r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG]) ){
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };

	      eZoom = zoom * mbPxRatio;

	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;

	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if( clear === 'motionBlur' ){
	      mbclear(context, 0, 0, w, h);
	    } else if( !forcedContext && (clear === undefined || clear) ){
	      context.clearRect(0, 0, w, h);
	    }

	    if( !drawAllLayers ){
	      context.translate( ePan.x, ePan.y );
	      context.scale( eZoom, eZoom );
	    }
	    if( forcedPan ){
	      context.translate( forcedPan.x, forcedPan.y );
	    }
	    if( forcedZoom ){
	      context.scale( forcedZoom, forcedZoom );
	    }
	  }

	  if( !textureDraw ){
	    r.textureDrawLastFrame = false;
	  }

	  if( textureDraw ){
	    r.textureDrawLastFrame = true;

	    var bb;

	    if( !r.textureCache ){
	      r.textureCache = {};

	      bb = r.textureCache.bb = cy.elements().boundingBox();

	      r.textureCache.texture = r.data.bufferCanvases[ r.TEXTURE_BUFFER ];

	      var cxt = r.data.bufferContexts[ r.TEXTURE_BUFFER ];

	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);

	      r.render({
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      });

	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };

	      vp.mpan = {
	        x: (0 - vp.pan.x)/vp.zoom,
	        y: (0 - vp.pan.y)/vp.zoom
	      };
	    }

	    needDraw[r.DRAG] = false;
	    needDraw[r.NODE] = false;

	    var context = data.contexts[r.NODE];

	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    bb = r.textureCache.bb;

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if( motionBlur ){
	      mbclear(context, 0, 0, vp.width, vp.height);
	    } else {
	      context.clearRect(0, 0, vp.width, vp.height);
	    }

	    var outsideBgColor = coreStyle['outside-texture-bg-color'].value;
	    var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;
	    r.fillStyle( context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity );
	    context.fillRect( 0, 0, vp.width, vp.height );

	    var zoom = cy.zoom();

	    setContextTransform( context, false );

	    context.clearRect( vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );
	    context.drawImage( texture, vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );

	  } else if( r.textureOnViewport && !forcedContext ){ // clear the cache since we don't need it
	    r.textureCache = null;
	  }

	  var vpManip = (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles);
	  var hideEdges = r.hideEdgesOnViewport && vpManip;
	  var hideLabels = r.hideLabelsOnViewport && vpManip;

	  if (needDraw[r.DRAG] || needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer) {
	    if( hideEdges ){
	    } else {
	      r.findEdgeControlPoints(edges);
	    }

	    var zEles = r.getCachedZSortedEles();
	    var extent = cy.extent();

	    for (var i = 0; i < zEles.length; i++) {
	      var ele = zEles[i];
	      var list;
	      var bb = forcedContext ? null : ele.boundingBox();
	      var insideExtent = forcedContext ? true : math.boundingBoxesIntersect( extent, bb );

	      if( !insideExtent ){ continue; } // no need to render

	      if ( ele._private.rscratch.inDragLayer ) {
	        list = eles.drag;
	      } else {
	        list = eles.nondrag;
	      }

	      list.eles.push( ele );
	    }

	  }


	  function drawElements( list, context ){
	    var eles = list.eles;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      if( ele.isNode() ){
	        r.drawNode(context, ele);

	        if( !hideLabels ){
	          r.drawNodeText(context, ele);
	        }

	        r.drawNode(context, ele, true);
	      } else if( !hideEdges ) {
	        r.drawEdge(context, ele);

	        if( !hideLabels ){
	          r.drawEdgeText(context, ele);
	        }

	        r.drawEdge(context, ele, true);
	      }


	    }

	  }

	  var needMbClear = [];

	  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
	  if( needMbClear[r.NODE] ){ r.clearedForMotionBlur[r.NODE] = true; }

	  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
	  if( needMbClear[r.DRAG] ){ r.clearedForMotionBlur[r.DRAG] = true; }

	  if( needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE] ){
	    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] : data.contexts[r.NODE] );
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

	    setContextTransform( context, clear );
	    drawElements(eles.nondrag, context);

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[r.NODE] = false;
	    }
	  }

	  if ( !drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG]) ) {
	    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ] : data.contexts[r.DRAG] );

	    setContextTransform( context, motionBlur && !useBuffer ? 'motionBlur' : undefined );
	    drawElements(eles.drag, context);

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[r.DRAG] = false;
	    }
	  }

	  if( r.showFps || (!drawOnlyNodeLayer && (needDraw[r.SELECT_BOX] && !drawAllLayers)) ) {
	    var context = forcedContext || data.contexts[r.SELECT_BOX];

	    setContextTransform( context );

	    if( r.selection[4] == 1 && ( r.hoverData.selecting || r.touchData.selecting ) ){
	      var zoom = r.cy.zoom();
	      var borderWidth = coreStyle['selection-box-border-width'].value / zoom;

	      context.lineWidth = borderWidth;
	      context.fillStyle = "rgba("
	        + coreStyle['selection-box-color'].value[0] + ","
	        + coreStyle['selection-box-color'].value[1] + ","
	        + coreStyle['selection-box-color'].value[2] + ","
	        + coreStyle['selection-box-opacity'].value + ")";

	      context.fillRect(
	        r.selection[0],
	        r.selection[1],
	        r.selection[2] - r.selection[0],
	        r.selection[3] - r.selection[1]);

	      if (borderWidth > 0) {
	        context.strokeStyle = "rgba("
	          + coreStyle['selection-box-border-color'].value[0] + ","
	          + coreStyle['selection-box-border-color'].value[1] + ","
	          + coreStyle['selection-box-border-color'].value[2] + ","
	          + coreStyle['selection-box-opacity'].value + ")";

	        context.strokeRect(
	          r.selection[0],
	          r.selection[1],
	          r.selection[2] - r.selection[0],
	          r.selection[3] - r.selection[1]);
	      }
	    }

	    if( data.bgActivePosistion && !r.hoverData.selecting ){
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;

	      context.fillStyle = "rgba("
	        + coreStyle['active-bg-color'].value[0] + ","
	        + coreStyle['active-bg-color'].value[1] + ","
	        + coreStyle['active-bg-color'].value[2] + ","
	        + coreStyle['active-bg-opacity'].value + ")";

	      context.beginPath();
	      context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pfValue / zoom, 0, 2 * Math.PI);
	      context.fill();
	    }

	    var timeToRender = r.lastRedrawTime;
	    if( r.showFps && timeToRender ){
	      timeToRender = Math.round( timeToRender );
	      var fps = Math.round(1000/timeToRender);

	      context.setTransform(1, 0, 0, 1, 0, 0);

	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText( '1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);

	      var maxFps = 60;
	      context.strokeRect(0, 30, 250, 20);
	      context.fillRect(0, 30, 250 * Math.min(fps/maxFps, 1), 20);
	    }

	    if( !drawAllLayers ){
	      needDraw[r.SELECT_BOX] = false;
	    }
	  }

	  // motionblur: blit rendered blurry frames
	  if( motionBlur && mbPxRatio !== 1 ){
	    var cxtNode = data.contexts[r.NODE];
	    var txtNode = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ];

	    var cxtDrag = data.contexts[r.DRAG];
	    var txtDrag = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ];

	    var drawMotionBlur = function( cxt, txt, needClear ){
	      cxt.setTransform(1, 0, 0, 1, 0, 0);

	      if( needClear || !motionBlurFadeEffect ){
	        cxt.clearRect( 0, 0, r.canvasWidth, r.canvasHeight );
	      } else {
	        mbclear( cxt, 0, 0, r.canvasWidth, r.canvasHeight );
	      }

	      var pxr = mbPxRatio;

	      cxt.drawImage(
	        txt, // img
	        0, 0, // sx, sy
	        r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
	        0, 0, // x, y
	        r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if( needDraw[r.NODE] || needMbClear[r.NODE] ){
	      drawMotionBlur( cxtNode, txtNode, needMbClear[r.NODE] );
	      needDraw[r.NODE] = false;
	    }

	    if( needDraw[r.DRAG] || needMbClear[r.DRAG] ){
	      drawMotionBlur( cxtDrag, txtDrag, needMbClear[r.DRAG] );
	      needDraw[r.DRAG] = false;
	    }
	  }

	  r.prevViewport = vp;

	  if( r.clearingMotionBlur ){
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }

	  if( motionBlur ){
	    r.motionBlurTimeout = setTimeout(function(){
	      r.motionBlurTimeout = null;

	      r.clearedForMotionBlur[r.NODE] = false;
	      r.clearedForMotionBlur[r.DRAG] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;

	      needDraw[r.NODE] = true;
	      needDraw[r.DRAG] = true;

	      r.redraw();
	    }, motionBlurDelay);
	  }

	  r.drawingImage = false;


	  if( !forcedContext && !r.initrender ){
	    r.initrender = true;
	    cy.trigger('initrender');
	  }

	  if( !forcedContext ){
	    cy.triggerOnRender();
	  }

	};

	module.exports = CRp;

	},{"../../../math":79,"../../../util":94}],68:[function(_dereq_,module,exports){
	'use strict';

	  var math = _dereq_('../../../math');

	  var CRp = {};

	  // @O Polygon drawing
	  CRp.drawPolygonPath = function(
	    context, x, y, width, height, points) {

	    var halfW = width / 2;
	    var halfH = height / 2;

	    if( context.beginPath ){ context.beginPath(); }

	    context.moveTo( x + halfW * points[0], y + halfH * points[1] );

	    for (var i = 1; i < points.length / 2; i++) {
	      context.lineTo( x + halfW * points[i * 2], y + halfH * points[i * 2 + 1] );
	    }

	    context.closePath();
	  };

	  // Round rectangle drawing
	  CRp.drawRoundRectanglePath = function(
	    context, x, y, width, height, radius) {

	    var halfWidth = width / 2;
	    var halfHeight = height / 2;
	    var cornerRadius = math.getRoundRectangleRadius(width, height);

	    if( context.beginPath ){ context.beginPath(); }

	    // Start at top middle
	    context.moveTo(x, y - halfHeight);
	    // Arc from middle top to right side
	    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
	    // Arc from right side to bottom
	    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	    // Arc from bottom to left side
	    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	    // Arc from left side to topBorder
	    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
	    // Join line
	    context.lineTo(x, y - halfHeight);


	    context.closePath();
	  };

	  var sin0 = Math.sin(0);
	  var cos0 = Math.cos(0);

	  var sin = {};
	  var cos = {};

	  var ellipseStepSize = Math.PI / 40;

	  for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {
	    sin[i] = Math.sin(i);
	    cos[i] = Math.cos(i);
	  }

	  CRp.drawEllipsePath = function(context, centerX, centerY, width, height){
	    if( context.beginPath ){ context.beginPath(); }

	    if( context.ellipse ){
	      context.ellipse( centerX, centerY, width/2, height/2, 0, 0, 2*Math.PI );
	    } else {
	      var xPos, yPos;
	      var rw = width/2;
	      var rh = height/2;
	      for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {
	        xPos = centerX - (rw * sin[i]) * sin0 + (rw * cos[i]) * cos0;
	        yPos = centerY + (rh * cos[i]) * sin0 + (rh * sin[i]) * cos0;

	        if (i === 0) {
	          context.moveTo(xPos, yPos);
	        } else {
	          context.lineTo(xPos, yPos);
	        }
	      }
	    }

	    context.closePath();
	  };

	module.exports = CRp;

	},{"../../../math":79}],69:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	CRp.createBuffer = function(w, h) {
	  var buffer = document.createElement('canvas');
	  buffer.width = w;
	  buffer.height = h;

	  return [buffer, buffer.getContext('2d')];
	};

	CRp.bufferCanvasImage = function( options ){
	  var cy = this.cy;
	  var bb = cy.elements().boundingBox();
	  var width = options.full ? Math.ceil(bb.w) : this.container.clientWidth;
	  var height = options.full ? Math.ceil(bb.h) : this.container.clientHeight;
	  var scale = 1;

	  if( options.scale !== undefined ){
	    width *= options.scale;
	    height *= options.scale;

	    scale = options.scale;
	  } else if( is.number(options.maxWidth) || is.number(options.maxHeight) ){
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;

	    if( is.number(options.maxWidth) ){
	      maxScaleW = scale * options.maxWidth / width;
	    }

	    if( is.number(options.maxHeight) ){
	      maxScaleH = scale * options.maxHeight / height;
	    }

	    scale = Math.min( maxScaleW, maxScaleH );

	    width *= scale;
	    height *= scale;
	  }

	  var buffCanvas = document.createElement('canvas');

	  buffCanvas.width = width;
	  buffCanvas.height = height;

	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';

	  var buffCxt = buffCanvas.getContext('2d');

	  // Rasterize the layers, but only if container has nonzero size
	  if (width > 0 && height > 0) {

	    buffCxt.clearRect( 0, 0, width, height );

	    if( options.bg ){
	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect( 0, 0, width, height );
	      buffCxt.fill();
	    }

	    buffCxt.globalCompositeOperation = 'source-over';

	    if( options.full ){ // draw the full bounds of the graph
	      this.render({
	        forcedContext: buffCxt,
	        drawAllLayers: true,
	        forcedZoom: scale,
	        forcedPan: { x: -bb.x1*scale, y: -bb.y1*scale },
	        forcedPxRatio: 1
	      });
	    } else { // draw the current view
	      var cyPan = cy.pan();
	      var pan = {
	        x: cyPan.x * scale,
	        y: cyPan.y * scale
	      };
	      var zoom = cy.zoom() * scale;

	      this.render({
	        forcedContext: buffCxt,
	        drawAllLayers: true,
	        forcedZoom: zoom,
	        forcedPan: pan,
	        forcedPxRatio: 1
	      });
	    }
	  }

	  return buffCanvas;
	};

	CRp.png = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL('image/png');
	};

	CRp.jpg = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL('image/jpeg');
	};

	module.exports = CRp;

	},{"../../../is":77}],70:[function(_dereq_,module,exports){
	/*
	The canvas renderer was written by Yue Dong.

	Modifications tracked on Github.
	*/

	'use strict';

	var util = _dereq_('../../../util');
	var is = _dereq_('../../../is');

	var CR = CanvasRenderer;
	var CRp = CanvasRenderer.prototype;

	CRp.CANVAS_LAYERS = 3;
	//
	CRp.SELECT_BOX = 0;
	CRp.DRAG = 1;
	CRp.NODE = 2;

	CRp.BUFFER_COUNT = 3;
	//
	CRp.TEXTURE_BUFFER = 0;
	CRp.MOTIONBLUR_BUFFER_NODE = 1;
	CRp.MOTIONBLUR_BUFFER_DRAG = 2;

	function CanvasRenderer(options) {
	  var r = this;

	  r.data = {
	    canvases: new Array(CRp.CANVAS_LAYERS),
	    contexts: new Array(CRp.CANVAS_LAYERS),
	    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),

	    bufferCanvases: new Array(CRp.BUFFER_COUNT),
	    bufferContexts: new Array(CRp.CANVAS_LAYERS)
	  };

	  r.data.canvasContainer = document.createElement('div');
	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.setAttribute('style', '-webkit-tap-highlight-color: rgba(0,0,0,0);');
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';

	  var container = options.cy.container();
	  container.appendChild( r.data.canvasContainer );
	  container.setAttribute('style', ( container.getAttribute('style') || '' ) + '-webkit-tap-highlight-color: rgba(0,0,0,0);');

	  for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {
	    var canvas = r.data.canvases[i] = document.createElement('canvas');
	    r.data.contexts[i] = canvas.getContext('2d');
	    canvas.setAttribute( 'style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + ( is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : '' ) );
	    canvas.style.position = 'absolute';
	    canvas.setAttribute('data-id', 'layer' + i);
	    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);
	    r.data.canvasContainer.appendChild(canvas);

	    r.data.canvasNeedsRedraw[i] = false;
	  }
	  r.data.topCanvas = r.data.canvases[0];

	  r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');
	  r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');
	  r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');

	  for (var i = 0; i < CRp.BUFFER_COUNT; i++) {
	    r.data.bufferCanvases[i] = document.createElement('canvas');
	    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
	    r.data.bufferCanvases[i].style.position = 'absolute';
	    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
	    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
	    r.data.bufferCanvases[i].style.visibility = 'hidden';
	    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;
	}

	CRp.redrawHint = function( group, bool ){
	  var r = this;

	  switch( group ){
	    case 'eles':
	      r.data.canvasNeedsRedraw[ CRp.NODE ] = bool;
	      break;
	    case 'drag':
	      r.data.canvasNeedsRedraw[ CRp.DRAG ] = bool;
	      break;
	    case 'select':
	      r.data.canvasNeedsRedraw[ CRp.SELECT_BOX ] = bool;
	      break;
	  }
	};

	// whether to use Path2D caching for drawing
	var pathsImpld = typeof Path2D !== 'undefined';

	CRp.path2dEnabled = function( on ){
	  if( on === undefined ){
	    return this.pathsEnabled;
	  }

	  this.pathsEnabled = on ? true : false;
	};

	CRp.usePaths = function(){
	  return pathsImpld && this.pathsEnabled;
	};

	[
	  _dereq_('./arrow-shapes'),
	  _dereq_('./drawing-edges'),
	  _dereq_('./drawing-images'),
	  _dereq_('./drawing-label-text'),
	  _dereq_('./drawing-nodes'),
	  _dereq_('./drawing-redraw'),
	  _dereq_('./drawing-shapes'),
	  _dereq_('./export-image'),
	  _dereq_('./node-shapes')
	].forEach(function( props ){
	  util.extend( CRp, props );
	});

	module.exports = CR;

	},{"../../../is":77,"../../../util":94,"./arrow-shapes":62,"./drawing-edges":63,"./drawing-images":64,"./drawing-label-text":65,"./drawing-nodes":66,"./drawing-redraw":67,"./drawing-shapes":68,"./export-image":69,"./node-shapes":71}],71:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var impl;

	CRp.nodeShapeImpl = function( name ){
	  var self = this;

	  return ( impl || (impl = {
	    'ellipse': function( context, centerX, centerY, width, height ){
	      self.drawEllipsePath( context, centerX, centerY, width, height );
	    },

	    'polygon': function( context, centerX, centerY, width, height, points ){
	      self.drawPolygonPath( context, centerX, centerY, width, height, points );
	    },

	    'roundrectangle': function( context, centerX, centerY, width, height ){
	      self.drawRoundRectanglePath( context, centerX, centerY, width, height, 10 );
	    }
	  }) )[ name ];
	};

	module.exports = CRp;

	},{}],72:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  { name: 'null', impl: _dereq_('./null') },
	  { name: 'base', impl: _dereq_('./base') },
	  { name: 'canvas', impl: _dereq_('./canvas') }
	];

	},{"./base":58,"./canvas":70,"./null":73}],73:[function(_dereq_,module,exports){
	'use strict';

	function NullRenderer(options){
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop = function(){};

	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop,
	  notify: function(){ this.notifications++; },
	  init: noop
	};

	module.exports = NullRenderer;

	},{}],74:[function(_dereq_,module,exports){
	/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');
	var Thread = _dereq_('./thread');
	var Promise = _dereq_('./promise');
	var define = _dereq_('./define');

	var Fabric = function( N ){
	  if( !(this instanceof Fabric) ){
	    return new Fabric( N );
	  }

	  this._private = {
	    pass: []
	  };

	  var defN = 4;

	  if( is.number(N) ){
	    // then use the specified number of threads
	  } if( typeof navigator !== 'undefined' && navigator.hardwareConcurrency != null ){
	    N = navigator.hardwareConcurrency;
	  } else {
	    try{
	      N = _dereq_('os').cpus().length;
	    } catch( err ){
	      N = defN;
	    }
	  } // TODO could use an estimation here but would the additional expense be worth it?

	  for( var i = 0; i < N; i++ ){
	    this[i] = new Thread();
	  }

	  this.length = N;
	};

	var fabfn = Fabric.prototype; // short alias

	util.extend(fabfn, {

	  instanceString: function(){ return 'fabric'; },

	  // require fn in all threads
	  require: function( fn, as ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.require( fn, as );
	    }

	    return this;
	  },

	  // get a random thread
	  random: function(){
	    var i = Math.round( (this.length - 1) * Math.random() );
	    var thread = this[i];

	    return thread;
	  },

	  // run on random thread
	  run: function( fn ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass ).run( fn );
	  },

	  // sends a random thread a message
	  message: function( m ){
	    return this.random().message( m );
	  },

	  // send all threads a message
	  broadcast: function( m ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.message( m );
	    }

	    return this; // chaining
	  },

	  // stop all threads
	  stop: function(){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.stop();
	    }

	    return this; // chaining
	  },

	  // pass data to be used with .spread() etc.
	  pass: function( data ){
	    var pass = this._private.pass;

	    if( is.array(data) ){
	      pass.push( data );
	    } else {
	      throw 'Only arrays may be used with fabric.pass()';
	    }

	    return this; // chaining
	  },

	  spreadSize: function(){
	    var subsize =  Math.ceil( this._private.pass[0].length / this.length );

	    subsize = Math.max( 1, subsize ); // don't pass less than one ele to each thread

	    return subsize;
	  },

	  // split the data into slices to spread the data equally among threads
	  spread: function( fn ){
	    var self = this;
	    var _p = self._private;
	    var subsize = self.spreadSize(); // number of pass eles to handle in each thread
	    var pass = _p.pass.shift().concat([]); // keep a copy
	    var runPs = [];

	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];
	      var slice = pass.splice( 0, subsize );

	      var runP = thread.pass( slice ).run( fn );

	      runPs.push( runP );

	      var doneEarly = pass.length === 0;
	      if( doneEarly ){ break; }
	    }

	    return Promise.all( runPs ).then(function( thens ){
	      var postpass = [];
	      var p = 0;

	      // fill postpass with the total result joined from all threads
	      for( var i = 0; i < thens.length; i++ ){
	        var then = thens[i]; // array result from thread i

	        for( var j = 0; j < then.length; j++ ){
	          var t = then[j]; // array element

	          postpass[ p++ ] = t;
	        }
	      }

	      return postpass;
	    });
	  },

	  // parallel version of array.map()
	  map: function( fn ){
	    var self = this;

	    self.require( fn, '_$_$_fabmap' );

	    return self.spread(function( split ){
	      var mapped = [];
	      var origResolve = resolve; // jshint ignore:line

	      resolve = function( val ){ // jshint ignore:line
	        mapped.push( val );
	      };

	      for( var i = 0; i < split.length; i++ ){
	        var oldLen = mapped.length;
	        var ret = _$_$_fabmap( split[i] ); // jshint ignore:line
	        var nothingInsdByResolve = oldLen === mapped.length;

	        if( nothingInsdByResolve ){
	          mapped.push( ret );
	        }
	      }

	      resolve = origResolve; // jshint ignore:line

	      return mapped;
	    });

	  },

	  // parallel version of array.filter()
	  filter: function( fn ){
	    var _p = this._private;
	    var pass = _p.pass[0];

	    return this.map( fn ).then(function( include ){
	      var ret = [];

	      for( var i = 0; i < pass.length; i++ ){
	        var datum = pass[i];
	        var incDatum = include[i];

	        if( incDatum ){
	          ret.push( datum );
	        }
	      }

	      return ret;
	    });
	  },

	  // sorts the passed array using a divide and conquer strategy
	  sort: function( cmp ){
	    var self = this;
	    var P = this._private.pass[0].length;
	    var subsize = this.spreadSize();

	    cmp = cmp || function( a, b ){ // default comparison function
	      if( a < b ){
	        return -1;
	      } else if( a > b ){
	        return 1;
	      }

	      return 0;
	    };

	    self.require( cmp, '_$_$_cmp' );

	    return self.spread(function( split ){ // sort each split normally
	      var sortedSplit = split.sort( _$_$_cmp ); // jshint ignore:line
	      resolve( sortedSplit ); // jshint ignore:line

	    }).then(function( joined ){
	      // do all the merging in the main thread to minimise data transfer

	      // TODO could do merging in separate threads but would incur add'l cost of data transfer
	      // for each level of the merge

	      var merge = function( i, j, max ){
	        // don't overflow array
	        j = Math.min( j, P );
	        max = Math.min( max, P );

	        // left and right sides of merge
	        var l = i;
	        var r = j;

	        var sorted = [];

	        for( var k = l; k < max; k++ ){

	          var eleI = joined[i];
	          var eleJ = joined[j];

	          if( i < r && ( j >= max || cmp(eleI, eleJ) <= 0 ) ){
	            sorted.push( eleI );
	            i++;
	          } else {
	            sorted.push( eleJ );
	            j++;
	          }

	        }

	        // in the array proper, put the sorted values
	        for( var k = 0; k < sorted.length; k++ ){ // kth sorted item
	          var index = l + k;

	          joined[ index ] = sorted[k];
	        }
	      };

	      for( var splitL = subsize; splitL < P; splitL *= 2 ){ // merge until array is "split" as 1

	        for( var i = 0; i < P; i += 2*splitL ){
	          merge( i, i + splitL, i + 2*splitL );
	        }

	      }

	      return joined;
	    });
	  }


	});

	var defineRandomPasser = function( opts ){
	  opts = opts || {};

	  return function( fn, arg1 ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass )[ opts.threadFn ]( fn, arg1 );
	  };
	};

	util.extend(fabfn, {
	  randomMap: defineRandomPasser({ threadFn: 'map' }),

	  reduce: defineRandomPasser({ threadFn: 'reduce' }),

	  reduceRight: defineRandomPasser({ threadFn: 'reduceRight' })
	});

	// aliases
	var fn = fabfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(fabfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( fabfn );

	module.exports = Fabric;

	},{"./define":41,"./is":77,"./promise":80,"./thread":92,"./util":94,"os":undefined}],75:[function(_dereq_,module,exports){
	/*!
	Ported by Xueqiao Xu <xueqiaoxu@gmail.com>;

	PSF LICENSE AGREEMENT FOR PYTHON 2.7.2

	1. This LICENSE AGREEMENT is between the Python Software Foundation (“PSF”), and the Individual or Organization (“Licensee”) accessing and otherwise using Python 2.7.2 software in source or binary form and its associated documentation.
	2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 2.7.2 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2012 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.2 alone or in any derivative version prepared by Licensee.
	3. In the event Licensee prepares a derivative work that is based on or incorporates Python 2.7.2 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 2.7.2.
	4. PSF is making Python 2.7.2 available to Licensee on an “AS IS” basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
	5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
	6. This License Agreement will automatically terminate upon a material breach of its terms and conditions.
	7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.
	8. By copying, installing or otherwise using Python 2.7.2, Licensee agrees to be bound by the terms and conditions of this License Agreement.
	*/

	'use strict';
	/* jshint ignore:start */

	// Generated by CoffeeScript 1.8.0
	(function() {
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function(x, y) {
	    if (x < y) {
	      return -1;
	    }
	    if (x > y) {
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.

	  If x is already in a, insert it to the right of the rightmost x.

	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function(a, x, lo, hi, cmp) {
	    var mid;
	    if (lo == null) {
	      lo = 0;
	    }
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (lo < 0) {
	      throw new Error('lo must be non-negative');
	    }
	    if (hi == null) {
	      hi = a.length;
	    }
	    while (lo < hi) {
	      mid = floor((lo + hi) / 2);
	      if (cmp(x, a[mid]) < 0) {
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function(array, item, cmp) {
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    array.push(item);
	    return _siftdown(array, 0, array.length - 1, cmp);
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function(array, cmp) {
	    var lastelt, returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if (array.length) {
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup(array, 0, cmp);
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.

	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function(array, item, cmp) {
	    var returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup(array, 0, cmp);
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function(array, item, cmp) {
	    var _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (array.length && cmp(array[0], item) < 0) {
	      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
	      _siftup(array, 0, cmp);
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function(array, cmp) {
	    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    _ref1 = (function() {
	      _results1 = [];
	      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
	      return _results1;
	    }).apply(this).reverse();
	    _results = [];
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      i = _ref1[_i];
	      _results.push(_siftup(array, i, cmp));
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function(array, item, cmp) {
	    var pos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf(item);
	    if (pos === -1) {
	      return;
	    }
	    _siftdown(array, 0, pos, cmp);
	    return _siftup(array, pos, cmp);
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function(array, n, cmp) {
	    var elem, result, _i, _len, _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    result = array.slice(0, n);
	    if (!result.length) {
	      return result;
	    }
	    heapify(result, cmp);
	    _ref = array.slice(n);
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      elem = _ref[_i];
	      heappushpop(result, elem, cmp);
	    }
	    return result.sort(cmp).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function(array, n, cmp) {
	    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (n * 10 <= array.length) {
	      result = array.slice(0, n).sort(cmp);
	      if (!result.length) {
	        return result;
	      }
	      los = result[result.length - 1];
	      _ref = array.slice(n);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        elem = _ref[_i];
	        if (cmp(elem, los) < 0) {
	          insort(result, elem, 0, null, cmp);
	          result.pop();
	          los = result[result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify(array, cmp);
	    _results = [];
	    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	      _results.push(heappop(array, cmp));
	    }
	    return _results;
	  };

	  _siftdown = function(array, startpos, pos, cmp) {
	    var newitem, parent, parentpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    newitem = array[pos];
	    while (pos > startpos) {
	      parentpos = (pos - 1) >> 1;
	      parent = array[parentpos];
	      if (cmp(newitem, parent) < 0) {
	        array[pos] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[pos] = newitem;
	  };

	  _siftup = function(array, pos, cmp) {
	    var childpos, endpos, newitem, rightpos, startpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[pos];
	    childpos = 2 * pos + 1;
	    while (childpos < endpos) {
	      rightpos = childpos + 1;
	      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
	        childpos = rightpos;
	      }
	      array[pos] = array[childpos];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[pos] = newitem;
	    return _siftdown(array, startpos, pos, cmp);
	  };

	  Heap = (function() {
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap(cmp) {
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function(x) {
	      return heappush(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pop = function() {
	      return heappop(this.nodes, this.cmp);
	    };

	    Heap.prototype.peek = function() {
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function(x) {
	      return this.nodes.indexOf(x) !== -1;
	    };

	    Heap.prototype.replace = function(x) {
	      return heapreplace(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pushpop = function(x) {
	      return heappushpop(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.heapify = function() {
	      return heapify(this.nodes, this.cmp);
	    };

	    Heap.prototype.updateItem = function(x) {
	      return updateItem(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.clear = function() {
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function() {
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function() {
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function() {
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice(0);
	      return heap;
	    };

	    Heap.prototype.toArray = function() {
	      return this.nodes.slice(0);
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function(root, factory) {
	    if (typeof define === 'function' && define.amd) {
	      return define([], factory);
	    } else if (typeof exports === 'object') {
	      return module.exports = factory();
	    } else {
	      return root.Heap = factory();
	    }
	  })(this, function() {
	    return Heap;
	  });

	}).call(this);

	/* jshint ignore:end */

	},{}],76:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('./window');
	var is = _dereq_('./is');
	var Core = _dereq_('./core');
	var extension = _dereq_('./extension');
	var registerJquery = _dereq_('./jquery-plugin');
	var Stylesheet = _dereq_('./stylesheet');
	var Thread = _dereq_('./thread');
	var Fabric = _dereq_('./fabric');

	var cytoscape = function( options ){ // jshint ignore:line
	  // if no options specified, use default
	  if( options === undefined ){
	    options = {};
	  }

	  // create instance
	  if( is.plainObject( options ) ){
	    return new Core( options );
	  }

	  // allow for registration of extensions
	  else if( is.string( options ) ) {
	    return extension.apply(extension, arguments);
	  }
	};

	// replaced by build system
	cytoscape.version = '2.6.3';

	// try to register w/ jquery
	if( window && window.jQuery ){
	  registerJquery( window.jQuery, cytoscape );
	}

	// expose register api
	cytoscape.registerJquery = function( jQuery ){
	  registerJquery( jQuery, cytoscape );
	};

	// expose public apis (mostly for extensions)
	cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;
	cytoscape.thread = cytoscape.Thread = Thread;
	cytoscape.fabric = cytoscape.Fabric = Fabric;

	module.exports = cytoscape;

	},{"./core":34,"./extension":43,"./fabric":74,"./is":77,"./jquery-plugin":78,"./stylesheet":91,"./thread":92,"./window":100}],77:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('./window');
	var navigator = window ? window.navigator : null;

	var typeofstr = typeof '';
	var typeofobj = typeof {};
	var typeoffn = typeof function(){};
	var typeofhtmlele = typeof HTMLElement;

	var instanceStr = function( obj ){
	  return obj && obj.instanceString && is.fn( obj.instanceString ) ? obj.instanceString() : null;
	};

	var is = {
	  defined: function(obj){
	    return obj != null; // not undefined or null
	  },

	  string: function(obj){
	    return obj != null && typeof obj == typeofstr;
	  },

	  fn: function(obj){
	    return obj != null && typeof obj === typeoffn;
	  },

	  array: function(obj){
	    return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
	  },

	  plainObject: function(obj){
	    return obj != null && typeof obj === typeofobj && !is.array(obj) && obj.constructor === Object;
	  },

	  object: function(obj){
	    return obj != null && typeof obj === typeofobj;
	  },

	  number: function(obj){
	    return obj != null && typeof obj === typeof 1 && !isNaN(obj);
	  },

	  integer: function( obj ){
	    return is.number(obj) && Math.floor(obj) === obj;
	  },

	  bool: function(obj){
	    return obj != null && typeof obj === typeof true;
	  },

	  htmlElement: function(obj){
	    if( 'undefined' === typeofhtmlele ){
	      return undefined;
	    } else {
	      return null != obj && obj instanceof HTMLElement;
	    }
	  },

	  elementOrCollection: function(obj){
	    return is.element(obj) || is.collection(obj);
	  },

	  element: function(obj){
	    return instanceStr(obj) === 'collection' && obj._private.single;
	  },

	  collection: function(obj){
	    return instanceStr(obj) === 'collection' && !obj._private.single;
	  },

	  core: function(obj){
	    return instanceStr(obj) === 'core';
	  },

	  style: function(obj){
	    return instanceStr(obj) === 'style';
	  },

	  stylesheet: function(obj){
	    return instanceStr(obj) === 'stylesheet';
	  },

	  event: function(obj){
	    return instanceStr(obj) === 'event';
	  },

	  thread: function(obj){
	    return instanceStr(obj) === 'thread';
	  },

	  fabric: function(obj){
	    return instanceStr(obj) === 'fabric';
	  },

	  emptyString: function(obj){
	    if( !obj ){ // null is empty
	      return true;
	    } else if( is.string(obj) ){
	      if( obj === '' || obj.match(/^\s+$/) ){
	        return true; // empty string is empty
	      }
	    }

	    return false; // otherwise, we don't know what we've got
	  },

	  nonemptyString: function(obj){
	    if( obj && is.string(obj) && obj !== '' && !obj.match(/^\s+$/) ){
	      return true;
	    }

	    return false;
	  },

	  domElement: function(obj){
	    if( typeof HTMLElement === 'undefined' ){
	      return false; // we're not in a browser so it doesn't matter
	    } else {
	      return obj instanceof HTMLElement;
	    }
	  },

	  boundingBox: function(obj){
	    return is.plainObject(obj) &&
	      is.number(obj.x1) && is.number(obj.x2) &&
	      is.number(obj.y1) && is.number(obj.y2)
	    ;
	  },

	  promise: function(obj){
	    return is.object(obj) && is.fn(obj.then);
	  },

	  touch: function(){
	    return window && ( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch );
	  },

	  gecko: function(){
	    return typeof InstallTrigger !== 'undefined' || ('MozAppearance' in document.documentElement.style);
	  },

	  webkit: function(){
	    return typeof webkitURL !== 'undefined' || ('WebkitAppearance' in document.documentElement.style);
	  },

	  chromium: function(){
	    return typeof chrome !== 'undefined';
	  },

	  khtml: function(){
	    return navigator && navigator.vendor.match(/kde/i); // probably a better way to detect this...
	  },

	  khtmlEtc: function(){
	    return is.khtml() || is.webkit() || is.chromium();
	  },

	  ms: function(){
	     return navigator && navigator.userAgent.match(/msie|trident|edge/i); // probably a better way to detect this...
	  },

	  windows: function(){
	    return navigator && navigator.appVersion.match(/Win/i);
	  },

	  mac: function(){
	    return navigator && navigator.appVersion.match(/Mac/i);
	  },

	  linux: function(){
	    return navigator && navigator.appVersion.match(/Linux/i);
	  },

	  unix: function(){
	    return navigator && navigator.appVersion.match(/X11/i);
	  }
	};

	module.exports = is;

	},{"./window":100}],78:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');

	var cyReg = function( $ele ){
	  var d = $ele[0]._cyreg = $ele[0]._cyreg || {};

	  return d;
	};

	var registerJquery = function( $, cytoscape ){
	  if( !$ ){ return; } // no jquery => don't need this

	  if( $.fn.cytoscape ){ return; } // already registered

	  // allow calls on a jQuery selector by proxying calls to $.cytoscape
	  // e.g. $("#foo").cytoscape(options) => $.cytoscape(options) on #foo
	  $.fn.cytoscape = function(opts){
	    var $this = $(this);

	    // get object
	    if( opts === 'get' ){
	      return cyReg( $this ).cy;
	    }

	    // bind to ready
	    else if( is.fn(opts) ){

	      var ready = opts;
	      var cy = cyReg( $this ).cy;

	      if( cy && cy.isReady() ){ // already ready so just trigger now
	        cy.trigger('ready', [], ready);

	      } else { // not yet ready, so add to readies list
	        var data = cyReg( $this );
	        var readies = data.readies = data.readies || [];

	        readies.push( ready );
	      }

	    }

	    // proxy to create instance
	    else if( is.plainObject(opts) ){
	      return $this.each(function(){
	        var options = $.extend({}, opts, {
	          container: $(this)[0]
	        });

	        cytoscape(options);
	      });
	    }
	  };

	  // allow access to the global cytoscape object under jquery for legacy reasons
	  $.cytoscape = cytoscape;

	  // use short alias (cy) if not already defined
	  if( $.fn.cy == null && $.cy == null ){
	    $.fn.cy = $.fn.cytoscape;
	    $.cy = $.cytoscape;
	  }
	};

	module.exports = registerJquery;

	},{"./is":77}],79:[function(_dereq_,module,exports){
	'use strict';

	var math = {};

	math.signum = function(x){
	  if( x > 0 ){
	    return 1;
	  } else if( x < 0 ){
	    return -1;
	  } else {
	    return 0;
	  }
	};

	math.distance = function( p1, p2 ){
	  return Math.sqrt( math.sqDistance(p1, p2) );
	};

	math.sqDistance = function( p1, p2 ){
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;

	  return dx*dx + dy*dy;
	};

	// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
	math.qbezierAt = function(p0, p1, p2, t){
	  return (1 - t)*(1 - t)*p0 + 2*(1 - t)*t*p1 + t*t*p2;
	};

	math.qbezierPtAt = function(p0, p1, p2, t){
	  return {
	    x: math.qbezierAt( p0.x, p1.x, p2.x, t ),
	    y: math.qbezierAt( p0.y, p1.y, p2.y, t )
	  };
	};

	// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
	math.makeBoundingBox = function( bb ){
	  if( bb.x1 != null && bb.y1 != null ){
	    if( bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if( bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};

	math.boundingBoxesIntersect = function( bb1, bb2 ){
	  // case: one bb to right of other
	  if( bb1.x1 > bb2.x2 ){ return false; }
	  if( bb2.x1 > bb1.x2 ){ return false; }

	  // case: one bb to left of other
	  if( bb1.x2 < bb2.x1 ){ return false; }
	  if( bb2.x2 < bb1.x1 ){ return false; }

	  // case: one bb above other
	  if( bb1.y2 < bb2.y1 ){ return false; }
	  if( bb2.y2 < bb1.y1 ){ return false; }

	  // case: one bb below other
	  if( bb1.y1 > bb2.y2 ){ return false; }
	  if( bb2.y1 > bb1.y2 ){ return false; }

	  // otherwise, must have some overlap
	  return true;
	};

	math.inBoundingBox = function( bb, x, y ){
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};

	math.pointInBoundingBox = function( bb, pt ){
	  return this.inBoundingBox( bb, pt.x, pt.y );
	};

	math.roundRectangleIntersectLine = function(
	  x, y, nodeX, nodeY, width, height, padding) {

	  var cornerRadius = this.getRoundRectangleRadius(width, height);

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;

	  // Check intersections with straight line segments
	  var straightLineIntersections;

	  // Top segment, left to right
	  {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Right segment, top to bottom
	  {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Bottom segment, left to right
	  {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Left segment, top to bottom
	  {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Check intersections with arc segments
	  var arcIntersections;

	  // Top Left
	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topLeftCenterX, topLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] <= topLeftCenterX
	      && arcIntersections[1] <= topLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Top Right
	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topRightCenterX, topRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] >= topRightCenterX
	      && arcIntersections[1] <= topRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Right
	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] >= bottomRightCenterX
	      && arcIntersections[1] >= bottomRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Left
	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] <= bottomLeftCenterX
	      && arcIntersections[1] >= bottomLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  return []; // if nothing
	};

	math.inLineVicinity = function(x, y, lx1, ly1, lx2, ly2, tolerance){
	  var t = tolerance;

	  var x1 = Math.min(lx1, lx2);
	  var x2 = Math.max(lx1, lx2);
	  var y1 = Math.min(ly1, ly2);
	  var y2 = Math.max(ly1, ly2);

	  return x1 - t <= x && x <= x2 + t
	    && y1 - t <= y && y <= y2 + t;
	};

	math.inBezierVicinity = function(
	  x, y, x1, y1, x2, y2, x3, y3, tolerance) {

	  var bb = {
	    x1: Math.min( x1, x3, x2 ) - tolerance,
	    x2: Math.max( x1, x3, x2 ) + tolerance,
	    y1: Math.min( y1, y3, y2 ) - tolerance,
	    y2: Math.max( y1, y3, y2 ) + tolerance
	  };

	  // if outside the rough bounding box for the bezier, then it can't be a hit
	  if( x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2 ){
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }

	};

	math.solveCubic = function(a, b, c, d, result) {

	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component

	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

	  b /= a;
	  c /= a;
	  d /= a;

	  var discriminant, q, r, dum1, s, t, term1, r13;

	  q = (3.0 * c - (b * b)) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;

	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = (b / 3.0);

	  if (discriminant > 0) {
	    s = r + Math.sqrt(discriminant);
	    s = ((s < 0) ? -Math.pow(-s, (1.0 / 3.0)) : Math.pow(s, (1.0 / 3.0)));
	    t = r - Math.sqrt(discriminant);
	    t = ((t < 0) ? -Math.pow(-t, (1.0 / 3.0)) : Math.pow(t, (1.0 / 3.0)));
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt(3.0) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }

	  result[5] = result[3] = 0;

	  if (discriminant === 0) {
	    r13 = ((r < 0) ? -Math.pow(-r, (1.0 / 3.0)) : Math.pow(r, (1.0 / 3.0)));
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }

	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos(r / Math.sqrt(dum1));
	  r13 = 2.0 * Math.sqrt(q);
	  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
	  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
	  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);

	  return;
	};

	math.sqDistanceToQuadraticBezier = function(
	  x, y, x1, y1, x2, y2, x3, y3) {

	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve

	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)

	  var a = 1.0 * x1*x1 - 4*x1*x2 + 2*x1*x3 + 4*x2*x2 - 4*x2*x3 + x3*x3
	    + y1*y1 - 4*y1*y2 + 2*y1*y3 + 4*y2*y2 - 4*y2*y3 + y3*y3;

	  var b = 1.0 * 9*x1*x2 - 3*x1*x1 - 3*x1*x3 - 6*x2*x2 + 3*x2*x3
	    + 9*y1*y2 - 3*y1*y1 - 3*y1*y3 - 6*y2*y2 + 3*y2*y3;

	  var c = 1.0 * 3*x1*x1 - 6*x1*x2 + x1*x3 - x1*x + 2*x2*x2 + 2*x2*x - x3*x
	    + 3*y1*y1 - 6*y1*y2 + y1*y3 - y1*y + 2*y2*y2 + 2*y2*y - y3*y;

	  var d = 1.0 * x1*x2 - x1*x1 + x1*x - x2*x
	    + y1*y2 - y1*y1 + y1*y - y2*y;

	  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = [];

	  // Use the cubic solving algorithm
	  this.solveCubic(a, b, c, d, roots);

	  var zeroThreshold = 0.0000001;

	  var params = [];

	  for (var index = 0; index < 6; index += 2) {
	    if (Math.abs(roots[index + 1]) < zeroThreshold
	        && roots[index] >= 0
	        && roots[index] <= 1.0) {
	      params.push(roots[index]);
	    }
	  }

	  params.push(1.0);
	  params.push(0.0);

	  var minDistanceSquared = -1;
	  var closestParam;

	  var curX, curY, distSquared;
	  for (var i = 0; i < params.length; i++) {
	    curX = Math.pow(1.0 - params[i], 2.0) * x1
	      + 2.0 * (1 - params[i]) * params[i] * x2
	      + params[i] * params[i] * x3;

	    curY = Math.pow(1 - params[i], 2.0) * y1
	      + 2 * (1.0 - params[i]) * params[i] * y2
	      + params[i] * params[i] * y3;

	    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
	    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
	    if (minDistanceSquared >= 0) {
	      if (distSquared < minDistanceSquared) {
	        minDistanceSquared = distSquared;
	        closestParam = params[i];
	      }
	    } else {
	      minDistanceSquared = distSquared;
	      closestParam = params[i];
	    }
	  }

	  return minDistanceSquared;
	};

	math.sqDistanceToFiniteLine = function(x, y, x1, y1, x2, y2) {
	  var offset = [x - x1, y - y1];
	  var line = [x2 - x1, y2 - y1];

	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;

	  if (dotProduct < 0) {
	    return hypSq;
	  }

	  if (adjSq > lineSq) {
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }

	  return hypSq - adjSq;
	};

	math.pointInsidePolygonPoints = function(x, y, points){
	  var x1, y1, x2, y2;
	  var y3;

	  // Intersect with vertical line through (x, y)
	  var up = 0;
	  var down = 0;
	  for (var i = 0; i < points.length / 2; i++) {

	    x1 = points[i * 2];
	    y1 = points[i * 2 + 1];

	    if (i + 1 < points.length / 2) {
	      x2 = points[(i + 1) * 2];
	      y2 = points[(i + 1) * 2 + 1];
	    } else {
	      x2 = points[(i + 1 - points.length / 2) * 2];
	      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
	    }

	    if (x1 == x && x2 == x) {

	    } else if ((x1 >= x && x >= x2)
	      || (x1 <= x && x <= x2)) {

	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

	      if (y3 > y) {
	        up++;
	      }

	      if (y3 < y) {
	        down++;
	      }

	    } else {
	      continue;
	    }

	  }

	  if (up % 2 === 0) {
	    return false;
	  } else {
	    return true;
	  }
	};

	math.pointInsidePolygon = function(
	  x, y, basePoints, centerX, centerY, width, height, direction, padding) {

	  //var direction = arguments[6];
	  var transformedPoints = new Array(basePoints.length);

	  // Gives negative angle
	  var angle;

	  if( direction[0] != null ){
	    angle = Math.atan(direction[1] / direction[0]);

	    if (direction[0] < 0) {
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }

	  var cos = Math.cos(-angle);
	  var sin = Math.sin(-angle);

	  //    console.log("base: " + basePoints);
	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] =
	      width / 2 * (basePoints[i * 2] * cos
	        - basePoints[i * 2 + 1] * sin);

	    transformedPoints[i * 2 + 1] =
	      height / 2 * (basePoints[i * 2 + 1] * cos
	        + basePoints[i * 2] * sin);

	    transformedPoints[i * 2] += centerX;
	    transformedPoints[i * 2 + 1] += centerY;
	  }

	  var points;

	  if (padding > 0) {
	    var expandedLineSet = this.expandPolygon(
	      transformedPoints,
	      -padding);

	    points = this.joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }

	  return math.pointInsidePolygonPoints( x, y, points );
	};

	math.joinLines = function(lineSet) {

	  var vertices = new Array(lineSet.length / 2);

	  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
	  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

	  for (var i = 0; i < lineSet.length / 4; i++) {
	    currentLineStartX = lineSet[i * 4];
	    currentLineStartY = lineSet[i * 4 + 1];
	    currentLineEndX = lineSet[i * 4 + 2];
	    currentLineEndY = lineSet[i * 4 + 3];

	    if (i < lineSet.length / 4 - 1) {
	      nextLineStartX = lineSet[(i + 1) * 4];
	      nextLineStartY = lineSet[(i + 1) * 4 + 1];
	      nextLineEndX = lineSet[(i + 1) * 4 + 2];
	      nextLineEndY = lineSet[(i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }

	    var intersection = this.finiteLinesIntersect(
	      currentLineStartX, currentLineStartY,
	      currentLineEndX, currentLineEndY,
	      nextLineStartX, nextLineStartY,
	      nextLineEndX, nextLineEndY,
	      true);

	    vertices[i * 2] = intersection[0];
	    vertices[i * 2 + 1] = intersection[1];
	  }

	  return vertices;
	};

	math.expandPolygon = function(points, pad) {

	  var expandedLineSet = new Array(points.length * 2);

	  var currentPointX, currentPointY, nextPointX, nextPointY;

	  for (var i = 0; i < points.length / 2; i++) {
	    currentPointX = points[i * 2];
	    currentPointY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextPointX = points[(i + 1) * 2];
	      nextPointY = points[(i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    }

	    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

	    // Assume CCW polygon winding

	    var offsetX = (nextPointY - currentPointY);
	    var offsetY = -(nextPointX - currentPointX);

	    // Normalize
	    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;

	    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }

	  return expandedLineSet;
	};

	math.intersectLineEllipse = function(
	  x, y, centerX, centerY, ellipseWradius, ellipseHradius) {

	  var dispX = centerX - x;
	  var dispY = centerY - y;

	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;

	  var len = Math.sqrt(dispX * dispX + dispY * dispY);

	  var newLength = len - 1;

	  if (newLength < 0) {
	    return [];
	  }

	  var lenProportion = newLength / len;

	  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
	};

	// Returns intersections of increasing distance from line's start point
	math.intersectLineCircle = function(
	  x1, y1, x2, y2, centerX, centerY, radius) {

	  // Calculate d, direction vector of line
	  var d = [x2 - x1, y2 - y1]; // Direction vector of line
	  var c = [centerX, centerY]; // Center of circle
	  var f = [x1 - centerX, y1 - centerY];

	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = (f[0] * f[0] + f[1] * f[1]) - radius * radius ;

	  var discriminant = b*b-4*a*c;

	  if (discriminant < 0) {
	    return [];
	  }

	  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
	  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

	  var tMin = Math.min(t1, t2);
	  var tMax = Math.max(t1, t2);
	  var inRangeParams = [];

	  if (tMin >= 0 && tMin <= 1) {
	    inRangeParams.push(tMin);
	  }

	  if (tMax >= 0 && tMax <= 1) {
	    inRangeParams.push(tMax);
	  }

	  if (inRangeParams.length === 0) {
	    return [];
	  }

	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

	  if (inRangeParams.length > 1) {

	    if (inRangeParams[0] == inRangeParams[1]) {
	      return [nearIntersectionX, nearIntersectionY];
	    } else {

	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;

	      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
	    }

	  } else {
	    return [nearIntersectionX, nearIntersectionY];
	  }

	};

	math.findCircleNearPoint = function(centerX, centerY,
	  radius, farX, farY) {

	  var displacementX = farX - centerX;
	  var displacementY = farY - centerY;
	  var distance = Math.sqrt(displacementX * displacementX
	    + displacementY * displacementY);

	  var unitDisplacementX = displacementX / distance;
	  var unitDisplacementY = displacementY / distance;

	  return [centerX + unitDisplacementX * radius,
	    centerY + unitDisplacementY * radius];
	};

	math.findMaxSqDistanceToOrigin = function(points) {
	  var maxSqDistance = 0.000001;
	  var sqDistance;

	  for (var i = 0; i < points.length / 2; i++) {

	    sqDistance = points[i * 2] * points[i * 2]
	      + points[i * 2 + 1] * points[i * 2 + 1];

	    if (sqDistance > maxSqDistance) {
	      maxSqDistance = sqDistance;
	    }
	  }

	  return maxSqDistance;
	};

	math.finiteLinesIntersect = function(
	  x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {

	  var ua_t = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
	  var ub_t = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
	  var u_b = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

	  if (u_b !== 0) {
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;

	    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
	      return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];

	    } else {
	      if (!infiniteLines) {
	        return [];
	      } else {
	        return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];
	      }
	    }
	  } else {
	    if (ua_t === 0 || ub_t === 0) {

	      // Parallel, coincident lines. Check if overlap

	      // Check endpoint of second line
	      if ([x1, x2, x4].sort()[1] === x4) {
	        return [x4, y4];
	      }

	      // Check start point of second line
	      if ([x1, x2, x3].sort()[1] === x3) {
	        return [x3, y3];
	      }

	      // Endpoint of first line
	      if ([x3, x4, x2].sort()[1] === x2) {
	        return [x2, y2];
	      }

	      return [];
	    } else {

	      // Parallel, non-coincident
	      return [];
	    }
	  }
	};

	math.polygonIntersectLine = function(
	  x, y, basePoints, centerX, centerY, width, height, padding) {

	  var intersections = [];
	  var intersection;

	  var transformedPoints = new Array(basePoints.length);

	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
	    transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
	  }

	  var points;

	  if (padding > 0) {
	    var expandedLineSet = math.expandPolygon(
	      transformedPoints,
	      -padding);

	    points = math.joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }
	  // var points = transformedPoints;

	  var currentX, currentY, nextX, nextY;

	  for (var i = 0; i < points.length / 2; i++) {

	    currentX = points[i * 2];
	    currentY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextX = points[(i + 1) * 2];
	      nextY = points[(i + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }

	    intersection = this.finiteLinesIntersect(
	      x, y, centerX, centerY,
	      currentX, currentY,
	      nextX, nextY);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  return intersections;
	};

	math.shortenIntersection = function(
	  intersection, offset, amount) {

	  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];

	  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);

	  var lenRatio = (length - amount) / length;

	  if (lenRatio < 0) {
	    lenRatio = 0.00001;
	  }

	  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
	};

	math.generateUnitNgonPointsFitToSquare = function(sides, rotationRadians) {
	  var points = math.generateUnitNgonPoints(sides, rotationRadians);
	  points = math.fitPolygonToSquare(points);

	  return points;
	};

	math.fitPolygonToSquare = function(points){
	  var x, y;
	  var sides = points.length/2;
	  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

	  for (var i = 0; i < sides; i++) {
	    x = points[2 * i];
	    y = points[2 * i + 1];

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  // stretch factors
	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);

	  for (var i = 0; i < sides; i++){
	    x = points[2 * i] = points[2 * i] * sx;
	    y = points[2 * i + 1] = points[2 * i + 1] * sy;

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  if( minY < -1 ){
	    for (var i = 0; i < sides; i++){
	      y = points[2 * i + 1] = points[2 * i + 1] + (-1 -minY);
	    }
	  }

	  return points;
	};

	math.generateUnitNgonPoints = function(sides, rotationRadians) {

	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ?
	    Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
	    //    console.log(nodeShapes['square']);
	  startAngle += rotationRadians;

	  var points = new Array(sides * 2);

	  var currentAngle, x, y;
	  for (var i = 0; i < sides; i++) {
	    currentAngle = i * increment + startAngle;

	    x = points[2 * i] = Math.cos(currentAngle);// * (1 + i/2);
	    y = points[2 * i + 1] = Math.sin(-currentAngle);//  * (1 + i/2);
	  }

	  return points;
	};

	math.getRoundRectangleRadius = function(width, height) {

	  // Set the default radius, unless half of width or height is smaller than default
	  return Math.min(width / 4, height / 4, 8);
	};

	module.exports = math;

	},{}],80:[function(_dereq_,module,exports){
	/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	'use strict';

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */
	var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */
	var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */
	var api = function (executor) {
	  /*  optionally support non-constructor/plain-function call  */
	  if (!(this instanceof api))
	    return new api(executor);

	  /*  initialize object  */
	  this.id           = "Thenable/1.0.7";
	  this.state        = STATE_PENDING; /*  initial state  */
	  this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */
	  this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */
	  this.onFulfilled  = [];            /*  initial handlers  */
	  this.onRejected   = [];            /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */
	  this.proxy = {
	    then: this.then.bind(this)
	  };

	  /*  support optional executor function  */
	  if (typeof executor === "function")
	    executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
	};

	/*  promise API methods  */
	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function (value) { return deliver(this, STATE_FULFILLED, "fulfillValue", value); },
	  reject:  function (value) { return deliver(this, STATE_REJECTED,  "rejectReason", value); },

	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function (onFulfilled, onRejected) {
	    var curr = this;
	    var next = new api();                                    /*  [Promises/A+ 2.2.7]  */
	    curr.onFulfilled.push(
	      resolver(onFulfilled, next, "fulfill"));             /*  [Promises/A+ 2.2.2/2.2.6]  */
	    curr.onRejected.push(
	      resolver(onRejected,  next, "reject" ));             /*  [Promises/A+ 2.2.3/2.2.6]  */
	    execute(curr);
	    return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};

	/*  deliver an action  */
	var deliver = function (curr, state, name, value) {
	  if (curr.state === STATE_PENDING) {
	    curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
	    curr[name] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
	    execute(curr);
	  }
	  return curr;
	};

	/*  execute all handlers  */
	var execute = function (curr) {
	  if (curr.state === STATE_FULFILLED)
	    execute_handlers(curr, "onFulfilled", curr.fulfillValue);
	  else if (curr.state === STATE_REJECTED)
	    execute_handlers(curr, "onRejected",  curr.rejectReason);
	};

	/*  execute particular set of handlers  */
	var execute_handlers = function (curr, name, value) {
	  /* global setImmediate: true */
	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if (curr[name].length === 0)
	    return;

	  /*  iterate over all handlers, exactly once  */
	  var handlers = curr[name];
	  curr[name] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
	  var func = function () {
	    for (var i = 0; i < handlers.length; i++)
	      handlers[i](value);                                  /*  [Promises/A+ 2.2.5]  */
	  };

	  /*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */
	  if (typeof setImmediate === "function")
	    setImmediate(func);
	  else
	    setTimeout(func, 0);
	};

	/*  generate a resolver function  */
	var resolver = function (cb, next, method) {
	  return function (value) {
	    if (typeof cb !== "function")                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[method].call(next, value);                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
	    else {
	      var result;
	      try { result = cb(value); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
	      catch (e) {
	        next.reject(e);                                  /*  [Promises/A+ 2.2.7.2]  */
	        return;
	      }
	      resolve(next, result);                               /*  [Promises/A+ 2.2.7.1]  */
	    }
	  };
	};

	/*  "Promise Resolution Procedure"  */                           /*  [Promises/A+ 2.3]  */
	var resolve = function (promise, x) {
	  /*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */
	  if (promise === x || promise.proxy === x) {
	    promise.reject(new TypeError("cannot resolve promise with itself"));
	    return;
	  }

	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */
	  var then;
	  if ((typeof x === "object" && x !== null) || typeof x === "function") {
	    try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */
	    catch (e) {
	      promise.reject(e);                                   /*  [Promises/A+ 2.3.3.2]  */
	      return;
	    }
	  }

	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */
	  if (typeof then === "function") {
	    var resolved = false;
	    try {
	      /*  call retrieved "then" method */                  /*  [Promises/A+ 2.3.3.3]  */
	      then.call(x,
	        /*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */
	        function (y) {
	          if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          if (y === x)                                 /*  [Promises/A+ 3.6]  */
	            promise.reject(new TypeError("circular thenable chain"));
	          else
	            resolve(promise, y);
	        },

	        /*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */
	        function (r) {
	          if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          promise.reject(r);
	        }
	      );
	    }
	    catch (e) {
	      if (!resolved)                                       /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(e);                               /*  [Promises/A+ 2.3.3.3.4]  */
	    }
	    return;
	  }

	  /*  handle other values  */
	  promise.fulfill(x);                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	};

	// use native promises where possible
	var Promise = typeof Promise === 'undefined' ? api : Promise;

	// so we always have Promise.all()
	Promise.all = Promise.all || function( ps ){
	  return new Promise(function( resolveAll, rejectAll ){
	    var vals = new Array( ps.length );
	    var doneCount = 0;

	    var fulfill = function( i, val ){
	      vals[i] = val;
	      doneCount++;

	      if( doneCount === ps.length ){
	        resolveAll( vals );
	      }
	    };

	    for( var i = 0; i < ps.length; i++ ){
	      (function( i ){
	        var p = ps[i];
	        var isPromise = p.then != null;

	        if( isPromise ){
	          p.then(function( val ){
	            fulfill( i, val );
	          }, function( err ){
	            rejectAll( err );
	          });
	        } else {
	          var val = p;
	          fulfill( i, val );
	        }
	      })( i );
	    }

	  });
	};

	module.exports = Promise;

	},{}],81:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');

	var Selector = function( onlyThisGroup, selector ){

	  if( !(this instanceof Selector) ){
	    return new Selector(onlyThisGroup, selector);
	  }

	  if( selector === undefined && onlyThisGroup !== undefined ){
	    selector = onlyThisGroup;
	    onlyThisGroup = undefined;
	  }

	  var self = this;

	  self._private = {
	    selectorText: null,
	    invalid: true
	  };

	  if( !selector || ( is.string(selector) && selector.match(/^\s*$/) ) ){

	    if( onlyThisGroup == null ){
	      // ignore
	      self.length = 0;
	    } else {
	      self[0] = newQuery();
	      self[0].group = onlyThisGroup;
	      self.length = 1;
	    }

	  } else if( is.elementOrCollection( selector ) ){
	    var collection = selector.collection();

	    self[0] = newQuery();
	    self[0].collection = collection;
	    self.length = 1;

	  } else if( is.fn( selector ) ) {
	    self[0] = newQuery();
	    self[0].filter = selector;
	    self.length = 1;

	  } else if( is.string( selector ) ){

	    // the current subject in the query
	    var currentSubject = null;

	    // storage for parsed queries
	    var newQuery = function(){
	      return {
	        classes: [],
	        colonSelectors: [],
	        data: [],
	        group: null,
	        ids: [],
	        meta: [],

	        // fake selectors
	        collection: null, // a collection to match against
	        filter: null, // filter function

	        // these are defined in the upward direction rather than down (e.g. child)
	        // because we need to go up in Selector.filter()
	        parent: null, // parent query obj
	        ancestor: null, // ancestor query obj
	        subject: null, // defines subject in compound query (subject query obj; points to self if subject)

	        // use these only when subject has been defined
	        child: null,
	        descendant: null
	      };
	    };

	    // tokens in the query language
	    var tokens = {
	      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in var names, etc
	      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
	      boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
	      string: '"(?:\\\\"|[^"])+"' + '|' + "'(?:\\\\'|[^'])+'", // string literals (used in data selectors) -- doublequotes | singlequotes
	      number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	      meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
	      separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	      descendant: '\\s+',
	      child: '\\s+>\\s+',
	      subject: '\\$'
	    };
	    tokens.variable = '(?:[\\w-]|(?:\\\\'+ tokens.metaChar +'))+'; // a variable name
	    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
	    tokens.className = tokens.variable; // a class name (follows variable conventions)
	    tokens.id = tokens.variable; // an element id (follows variable conventions)

	    // when a token like a variable has escaped meta characters, we need to clean the backslashes out
	    // so that values get compared properly in Selector.filter()
	    var cleanMetaChars = function(str){
	      return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function(match, $1, offset, original){
	        return $1;
	      });
	    };

	    // add @ variants to comparatorOp
	    var ops = tokens.comparatorOp.split('|');
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[i];
	      tokens.comparatorOp += '|@' + op;
	    }

	    // add ! variants to comparatorOp
	    var ops = tokens.comparatorOp.split('|');
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[i];

	      if( op.indexOf('!') >= 0 ){ continue; } // skip ops that explicitly contain !
	      if( op === '=' ){ continue; } // skip = b/c != is explicitly defined

	      tokens.comparatorOp += '|\\!' + op;
	    }

	    // NOTE: add new expression syntax here to have it recognised by the parser;
	    // - a query contains all adjacent (i.e. no separator in between) expressions;
	    // - the current query is stored in self[i] --- you can use the reference to `this` in the populate function;
	    // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
	    // - when you add something here, also add to Selector.toString()
	    var exprs = [
	      {
	        name: 'group',
	        query: true,
	        regex: '(node|edge|\\*)',
	        populate: function( group ){
	          this.group = group == "*" ? group : group + 's';
	        }
	      },

	      {
	        name: 'state',
	        query: true,
	        // NB: if one colon selector is a substring of another from its start, place the longer one first
	        // e.g. :foobar|:foo
	        regex: '(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)',
	        populate: function( state ){
	          this.colonSelectors.push( state );
	        }
	      },

	      {
	        name: 'id',
	        query: true,
	        regex: '\\#('+ tokens.id +')',
	        populate: function( id ){
	          this.ids.push( cleanMetaChars(id) );
	        }
	      },

	      {
	        name: 'className',
	        query: true,
	        regex: '\\.('+ tokens.className +')',
	        populate: function( className ){
	          this.classes.push( cleanMetaChars(className) );
	        }
	      },

	      {
	        name: 'dataExists',
	        query: true,
	        regex: '\\[\\s*('+ tokens.variable +')\\s*\\]',
	        populate: function( variable ){
	          this.data.push({
	            field: cleanMetaChars(variable)
	          });
	        }
	      },

	      {
	        name: 'dataCompare',
	        query: true,
	        regex: '\\[\\s*('+ tokens.variable +')\\s*('+ tokens.comparatorOp +')\\s*('+ tokens.value +')\\s*\\]',
	        populate: function( variable, comparatorOp, value ){
	          var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

	          if( valueIsString ){
	            value = value.substring(1, value.length - 1);
	          } else {
	            value = parseFloat(value);
	          }

	          this.data.push({
	            field: cleanMetaChars(variable),
	            operator: comparatorOp,
	            value: value
	          });
	        }
	      },

	      {
	        name: 'dataBool',
	        query: true,
	        regex: '\\[\\s*('+ tokens.boolOp +')\\s*('+ tokens.variable +')\\s*\\]',
	        populate: function( boolOp, variable ){
	          this.data.push({
	            field: cleanMetaChars(variable),
	            operator: boolOp
	          });
	        }
	      },

	      {
	        name: 'metaCompare',
	        query: true,
	        regex: '\\[\\[\\s*('+ tokens.meta +')\\s*('+ tokens.comparatorOp +')\\s*('+ tokens.number +')\\s*\\]\\]',
	        populate: function( meta, comparatorOp, number ){
	          this.meta.push({
	            field: cleanMetaChars(meta),
	            operator: comparatorOp,
	            value: parseFloat(number)
	          });
	        }
	      },

	      {
	        name: 'nextQuery',
	        separator: true,
	        regex: tokens.separator,
	        populate: function(){
	          // go on to next query
	          self[++i] = newQuery();
	          currentSubject = null;
	        }
	      },

	      {
	        name: 'child',
	        separator: true,
	        regex: tokens.child,
	        populate: function(){
	          // this query is the parent of the following query
	          var childQuery = newQuery();
	          childQuery.parent = this;
	          childQuery.subject = currentSubject;

	          // we're now populating the child query with expressions that follow
	          self[i] = childQuery;
	        }
	      },

	      {
	        name: 'descendant',
	        separator: true,
	        regex: tokens.descendant,
	        populate: function(){
	          // this query is the ancestor of the following query
	          var descendantQuery = newQuery();
	          descendantQuery.ancestor = this;
	          descendantQuery.subject = currentSubject;

	          // we're now populating the descendant query with expressions that follow
	          self[i] = descendantQuery;
	        }
	      },

	      {
	        name: 'subject',
	        modifier: true,
	        regex: tokens.subject,
	        populate: function(){
	          if( currentSubject != null && this.subject != this ){
	            util.error('Redefinition of subject in selector `' + selector + '`');
	            return false;
	          }

	          currentSubject = this;
	          this.subject = this;
	        }

	      }
	    ];

	    self._private.selectorText = selector;
	    var remaining = selector;
	    var i = 0;

	    // of all the expressions, find the first match in the remaining text
	    var consumeExpr = function( expectation ){
	      var expr;
	      var match;
	      var name;

	      for( var j = 0; j < exprs.length; j++ ){
	        var e = exprs[j];
	        var n = e.name;

	        // ignore this expression if it doesn't meet the expectation function
	        if( is.fn( expectation ) && !expectation(n, e) ){ continue; }

	        var m = remaining.match(new RegExp( '^' + e.regex ));

	        if( m != null ){
	          match = m;
	          expr = e;
	          name = n;

	          var consumed = m[0];
	          remaining = remaining.substring( consumed.length );

	          break; // we've consumed one expr, so we can return now
	        }
	      }

	      return {
	        expr: expr,
	        match: match,
	        name: name
	      };
	    };

	    // consume all leading whitespace
	    var consumeWhitespace = function(){
	      var match = remaining.match(/^\s+/);

	      if( match ){
	        var consumed = match[0];
	        remaining = remaining.substring( consumed.length );
	      }
	    };

	    self[0] = newQuery(); // get started

	    consumeWhitespace(); // get rid of leading whitespace
	    for(;;){
	      var check = consumeExpr();

	      if( check.expr == null ){
	        util.error('The selector `'+ selector +'`is invalid');
	        return;
	      } else {
	        var args = [];
	        for(var j = 1; j < check.match.length; j++){
	          args.push( check.match[j] );
	        }

	        // let the token populate the selector object (i.e. in self[i])
	        var ret = check.expr.populate.apply( self[i], args );

	        if( ret === false ){ return; } // exit if population failed
	      }

	      // we're done when there's nothing left to parse
	      if( remaining.match(/^\s*$/) ){
	        break;
	      }
	    }

	    self.length = i + 1;

	    // adjust references for subject
	    for(var j = 0; j < self.length; j++){
	      var query = self[j];

	      if( query.subject != null ){
	        // go up the tree until we reach the subject
	        for(;;){
	          if( query.subject == query ){ break; } // done if subject is self

	          if( query.parent != null ){ // swap parent/child reference
	            var parent = query.parent;
	            var child = query;

	            child.parent = null;
	            parent.child = child;

	            query = parent; // go up the tree
	          } else if( query.ancestor != null ){ // swap ancestor/descendant
	            var ancestor = query.ancestor;
	            var descendant = query;

	            descendant.ancestor = null;
	            ancestor.descendant = descendant;

	            query = ancestor; // go up the tree
	          } else {
	            util.error('When adjusting references for the selector `'+ query +'`, neither parent nor ancestor was found');
	            break;
	          }
	        } // for

	        self[j] = query.subject; // subject should be the root query
	      } // if
	    } // for

	    // make sure for each query that the subject group matches the implicit group if any
	    if( onlyThisGroup != null ){
	      for(var j = 0; j < self.length; j++){
	        if( self[j].group != null && self[j].group != onlyThisGroup ){
	          util.error('Group `'+ self[j].group +'` conflicts with implicit group `'+ onlyThisGroup +'` in selector `'+ selector +'`');
	          return;
	        }

	        self[j].group = onlyThisGroup; // set to implicit group
	      }
	    }

	  } else {
	    util.error('A selector must be created from a string; found ' + selector);
	    return;
	  }

	  self._private.invalid = false;

	};

	var selfn = Selector.prototype;

	selfn.size = function(){
	  return this.length;
	};

	selfn.eq = function(i){
	  return this[i];
	};

	var queryMatches = function(query, element){
	  // check group
	  if( query.group != null && query.group != '*' && query.group != element._private.group ){
	    return false;
	  }

	  var cy = element.cy();

	  // check colon selectors
	  var allColonSelectorsMatch = true;
	  for(var k = 0; k < query.colonSelectors.length; k++){
	    var sel = query.colonSelectors[k];

	    switch(sel){
	    case ':selected':
	      allColonSelectorsMatch = element.selected();
	      break;
	    case ':unselected':
	      allColonSelectorsMatch = !element.selected();
	      break;
	    case ':selectable':
	      allColonSelectorsMatch = element.selectable();
	      break;
	    case ':unselectable':
	      allColonSelectorsMatch = !element.selectable();
	      break;
	    case ':locked':
	      allColonSelectorsMatch = element.locked();
	      break;
	    case ':unlocked':
	      allColonSelectorsMatch = !element.locked();
	      break;
	    case ':visible':
	      allColonSelectorsMatch = element.visible();
	      break;
	    case ':hidden':
	      allColonSelectorsMatch = !element.visible();
	      break;
	    case ':transparent':
	      allColonSelectorsMatch = element.transparent();
	      break;
	    case ':grabbed':
	      allColonSelectorsMatch = element.grabbed();
	      break;
	    case ':free':
	      allColonSelectorsMatch = !element.grabbed();
	      break;
	    case ':removed':
	      allColonSelectorsMatch = element.removed();
	      break;
	    case ':inside':
	      allColonSelectorsMatch = !element.removed();
	      break;
	    case ':grabbable':
	      allColonSelectorsMatch = element.grabbable();
	      break;
	    case ':ungrabbable':
	      allColonSelectorsMatch = !element.grabbable();
	      break;
	    case ':animated':
	      allColonSelectorsMatch = element.animated();
	      break;
	    case ':unanimated':
	      allColonSelectorsMatch = !element.animated();
	      break;
	    case ':parent':
	      allColonSelectorsMatch = element.isNode() && element.children().nonempty();
	      break;
	    case ':child':
	    case ':nonorphan':
	      allColonSelectorsMatch = element.isNode() && element.parent().nonempty();
	      break;
	    case ':orphan':
	      allColonSelectorsMatch = element.isNode() && element.parent().empty();
	      break;
	    case ':loop':
	      allColonSelectorsMatch = element.isEdge() && element.data('source') === element.data('target');
	      break;
	    case ':simple':
	      allColonSelectorsMatch = element.isEdge() && element.data('source') !== element.data('target');
	      break;
	    case ':active':
	      allColonSelectorsMatch = element.active();
	      break;
	    case ':inactive':
	      allColonSelectorsMatch = !element.active();
	      break;
	    case ':touch':
	      allColonSelectorsMatch = is.touch();
	      break;
	    case ':backgrounding':
	      allColonSelectorsMatch = element.backgrounding();
	      break;
	    case ':nonbackgrounding':
	      allColonSelectorsMatch = !element.backgrounding();
	      break;
	    }

	    if( !allColonSelectorsMatch ) break;
	  }
	  if( !allColonSelectorsMatch ) return false;

	  // check id
	  var allIdsMatch = true;
	  for(var k = 0; k < query.ids.length; k++){
	    var id = query.ids[k];
	    var actualId = element._private.data.id;

	    allIdsMatch = allIdsMatch && (id == actualId);

	    if( !allIdsMatch ) break;
	  }
	  if( !allIdsMatch ) return false;

	  // check classes
	  var allClassesMatch = true;
	  for(var k = 0; k < query.classes.length; k++){
	    var cls = query.classes[k];

	    allClassesMatch = allClassesMatch && element.hasClass(cls);

	    if( !allClassesMatch ) break;
	  }
	  if( !allClassesMatch ) return false;

	  // generic checking for data/metadata
	  var operandsMatch = function(params){
	    var allDataMatches = true;
	    for(var k = 0; k < query[params.name].length; k++){
	      var data = query[params.name][k];
	      var operator = data.operator;
	      var value = data.value;
	      var field = data.field;
	      var matches;

	      if( operator != null && value != null ){

	        var fieldVal = params.fieldValue(field);
	        var fieldStr = !is.string(fieldVal) && !is.number(fieldVal) ? '' : '' + fieldVal;
	        var valStr = '' + value;

	        var caseInsensitive = false;
	        if( operator.indexOf('@') >= 0 ){
	          fieldStr = fieldStr.toLowerCase();
	          valStr = valStr.toLowerCase();

	          operator = operator.replace('@', '');
	          caseInsensitive = true;
	        }

	        var notExpr = false;
	        var handledNotExpr = false;
	        if( operator.indexOf('!') >= 0 ){
	          operator = operator.replace('!', '');
	          notExpr = true;
	        }

	        // if we're doing a case insensitive comparison, then we're using a STRING comparison
	        // even if we're comparing numbers
	        if( caseInsensitive ){
	          value = valStr.toLowerCase();
	          fieldVal = fieldStr.toLowerCase();
	        }

	        switch(operator){
	        case '*=':
	          matches = fieldStr.search(valStr) >= 0;
	          break;
	        case '$=':
	          matches = new RegExp(valStr + '$').exec(fieldStr) != null;
	          break;
	        case '^=':
	          matches = new RegExp('^' + valStr).exec(fieldStr) != null;
	          break;
	        case '=':
	          matches = fieldVal === value;
	          break;
	        case '!=':
	          matches = fieldVal !== value;
	          break;
	        case '>':
	          matches = !notExpr ? fieldVal > value : fieldVal <= value;
	          handledNotExpr = true;
	          break;
	        case '>=':
	          matches = !notExpr ? fieldVal >= value : fieldVal < value;
	          handledNotExpr = true;
	          break;
	        case '<':
	          matches = !notExpr ? fieldVal < value : fieldVal >= value;
	          handledNotExpr = true;
	          break;
	        case '<=':
	          matches = !notExpr ? fieldVal <= value : fieldVal > value;
	          handledNotExpr = true;
	          break;
	        default:
	          matches = false;
	          break;

	        }
	      } else if( operator != null ){
	        switch(operator){
	        case '?':
	          matches = params.fieldTruthy(field);
	          break;
	        case '!':
	          matches = !params.fieldTruthy(field);
	          break;
	        case '^':
	          matches = params.fieldUndefined(field);
	          break;
	        }
	      } else {
	        matches = !params.fieldUndefined(field);
	      }

	      if( notExpr && !handledNotExpr ){
	        matches = !matches;
	        handledNotExpr = true;
	      }

	      if( !matches ){
	        allDataMatches = false;
	        break;
	      }
	    } // for

	    return allDataMatches;
	  }; // operandsMatch

	  // check data matches
	  var allDataMatches = operandsMatch({
	    name: 'data',
	    fieldValue: function(field){
	      return element._private.data[field];
	    },
	    fieldRef: function(field){
	      return 'element._private.data.' + field;
	    },
	    fieldUndefined: function(field){
	      return element._private.data[field] === undefined;
	    },
	    fieldTruthy: function(field){
	      if( element._private.data[field] ){
	        return true;
	      }
	      return false;
	    }
	  });

	  if( !allDataMatches ){
	    return false;
	  }

	  // check metadata matches
	  var allMetaMatches = operandsMatch({
	    name: 'meta',
	    fieldValue: function(field){
	      return element[field]();
	    },
	    fieldRef: function(field){
	      return 'element.' + field + '()';
	    },
	    fieldUndefined: function(field){
	      return element[field]() == null;
	    },
	    fieldTruthy: function(field){
	      if( element[field]() ){
	        return true;
	      }
	      return false;
	    }
	  });

	  if( !allMetaMatches ){
	    return false;
	  }

	  // check collection
	  if( query.collection != null ){
	    var matchesAny = query.collection._private.ids[ element.id() ] != null;

	    if( !matchesAny ){
	      return false;
	    }
	  }

	  // check filter function
	  if( query.filter != null && element.collection().filter( query.filter ).size() === 0 ){
	    return false;
	  }


	  // check parent/child relations
	  var confirmRelations = function( query, elements ){
	    if( query != null ){
	      var matches = false;

	      if( !cy.hasCompoundNodes() ){
	        return false;
	      }

	      elements = elements(); // make elements functional so we save cycles if query == null

	      // query must match for at least one element (may be recursive)
	      for(var i = 0; i < elements.length; i++){
	        if( queryMatches( query, elements[i] ) ){
	          matches = true;
	          break;
	        }
	      }

	      return matches;
	    } else {
	      return true;
	    }
	  };

	  if (! confirmRelations(query.parent, function(){
	    return element.parent();
	  }) ){ return false; }

	  if (! confirmRelations(query.ancestor, function(){
	    return element.parents();
	  }) ){ return false; }

	  if (! confirmRelations(query.child, function(){
	    return element.children();
	  }) ){ return false; }

	  if (! confirmRelations(query.descendant, function(){
	    return element.descendants();
	  }) ){ return false; }

	  // we've reached the end, so we've matched everything for this query
	  return true;
	}; // queryMatches

	// filter an existing collection
	selfn.filter = function(collection){
	  var self = this;
	  var cy = collection.cy();

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return cy.collection();
	  }

	  var selectorFunction = function(i, element){
	    for(var j = 0; j < self.length; j++){
	      var query = self[j];

	      if( queryMatches(query, element) ){
	        return true;
	      }
	    }

	    return false;
	  };

	  if( self._private.selectorText == null ){
	    selectorFunction = function(){ return true; };
	  }

	  var filteredCollection = collection.filter( selectorFunction );

	  return filteredCollection;
	}; // filter

	// does selector match a single element?
	selfn.matches = function(ele){
	  var self = this;

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return false;
	  }

	  for(var j = 0; j < self.length; j++){
	    var query = self[j];

	    if( queryMatches(query, ele) ){
	      return true;
	    }
	  }

	  return false;
	}; // filter

	// ith query to string
	selfn.toString = selfn.selector = function(){

	  var str = '';

	  var clean = function(obj, isValue){
	    if( is.string(obj) ){
	      return isValue ? '"' + obj + '"' : obj;
	    }
	    return '';
	  };

	  var queryToString = function(query){
	    var str = '';

	    if( query.subject === query ){
	      str += '$';
	    }

	    var group = clean(query.group);
	    str += group.substring(0, group.length - 1);

	    for(var j = 0; j < query.data.length; j++){
	      var data = query.data[j];

	      if( data.value ){
	        str += '[' + data.field + clean(data.operator) + clean(data.value, true) + ']';
	      } else {
	        str += '[' + clean(data.operator) + data.field + ']';
	      }
	    }

	    for(var j = 0; j < query.meta.length; j++){
	      var meta = query.meta[j];
	      str += '[[' + meta.field + clean(meta.operator) + clean(meta.value, true) + ']]';
	    }

	    for(var j = 0; j < query.colonSelectors.length; j++){
	      var sel = query.colonSelectors[i];
	      str += sel;
	    }

	    for(var j = 0; j < query.ids.length; j++){
	      var sel = '#' + query.ids[i];
	      str += sel;
	    }

	    for(var j = 0; j < query.classes.length; j++){
	      var sel = '.' + query.classes[j];
	      str += sel;
	    }

	    if( query.parent != null ){
	      str = queryToString( query.parent ) + ' > ' + str;
	    }

	    if( query.ancestor != null ){
	      str = queryToString( query.ancestor ) + ' ' + str;
	    }

	    if( query.child != null ){
	      str += ' > ' + queryToString( query.child );
	    }

	    if( query.descendant != null ){
	      str += ' ' + queryToString( query.descendant );
	    }

	    return str;
	  };

	  for(var i = 0; i < this.length; i++){
	    var query = this[i];

	    str += queryToString( query );

	    if( this.length > 1 && i < this.length - 1 ){
	      str += ', ';
	    }
	  }

	  return str;
	};

	module.exports = Selector;

	},{"./is":77,"./util":94}],82:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it
	styfn.apply = function( eles ){
	  var self = this;

	  if( self._private.newStyle ){ // clear style caches
	    this._private.contextStyles = {};
	    this._private.propDiffs = {};
	  }

	  for( var ie = 0; ie < eles.length; ie++ ){
	    var ele = eles[ie];
	    var cxtMeta = self.getContextMeta( ele );
	    var cxtStyle = self.getContextStyle( cxtMeta );
	    var app = self.applyContextStyle( cxtMeta, cxtStyle, ele );

	    self.updateTransitions( ele, app.diffProps );
	    self.updateStyleHints( ele );

	  } // for elements

	  self._private.newStyle = false;
	};

	styfn.getPropertiesDiff = function( oldCxtKey, newCxtKey ){
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[dualCxtKey];

	  if( cachedVal ){
	    return cachedVal;
	  }

	  var diffProps = [];
	  var addedProp = {};

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[i];
	    var oldHasCxt = oldCxtKey[i] === 't';
	    var newHasCxt = newCxtKey[i] === 't';
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

	    if( cxtHasDiffed || cxtHasMappedProps ){
	      var props;

	      if( cxtHasDiffed && cxtHasMappedProps ){
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if( cxtHasDiffed ){
	        props = cxt.properties; // need to check them all
	      } else if( cxtHasMappedProps ){
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for( var j = 0; j < props.length; j++ ){
	        var prop = props[j];
	        var name = prop.name;

	        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)
	        var laterCxtOverrides = false;
	        for( var k = i + 1; k < self.length; k++ ){
	          var laterCxt = self[k];
	          var hasLaterCxt = newCxtKey[k] === 't';

	          if( !hasLaterCxt ){ continue; } // can't override unless the context is active

	          laterCxtOverrides = laterCxt.properties[ prop.name ] != null;

	          if( laterCxtOverrides ){ break; } // exit early as long as one later context overrides
	        }

	        if( !addedProp[name] && !laterCxtOverrides ){
	          addedProp[name] = true;
	          diffProps.push( name );
	        }
	      } // for props
	    } // if

	  } // for contexts

	  cache[ dualCxtKey ] = diffProps;
	  return diffProps;
	};

	styfn.getContextMeta = function( ele ){
	  var self = this;
	  var cxtKey = '';
	  var diffProps;
	  var prevKey = ele._private.styleCxtKey || '';

	  if( self._private.newStyle ){
	    prevKey = ''; // since we need to apply all style if a fresh stylesheet
	  }

	  // get the cxt key
	  for( var i = 0; i < self.length; i++ ){
	    var context = self[i];
	    var contextSelectorMatches = context.selector && context.selector.matches( ele ); // NB: context.selector may be null for 'core'

	    if( contextSelectorMatches ){
	      cxtKey += 't';
	    } else {
	      cxtKey += 'f';
	    }
	  } // for context

	  diffProps = self.getPropertiesDiff( prevKey, cxtKey );

	  ele._private.styleCxtKey = cxtKey;

	  return {
	    key: cxtKey,
	    diffPropNames: diffProps
	  };
	};

	// gets a computed ele style object based on matched contexts
	styfn.getContextStyle = function( cxtMeta ){
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

	  // if already computed style, returned cached copy
	  if( cxtStyles[cxtKey] ){ return cxtStyles[cxtKey]; }

	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[i];
	    var hasCxt = cxtKey[i] === 't';

	    if( !hasCxt ){ continue; }

	    for( var j = 0; j < cxt.properties.length; j++ ){
	      var prop = cxt.properties[j];
	      var styProp = style[ prop.name ] = prop;

	      styProp.context = cxt;
	    }
	  }

	  cxtStyles[cxtKey] = style;
	  return style;
	};

	styfn.applyContextStyle = function( cxtMeta, cxtStyle, ele ){
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};

	  for( var i = 0; i < diffProps.length; i++ ){
	    var diffPropName = diffProps[i];
	    var cxtProp = cxtStyle[ diffPropName ];
	    var eleProp = ele._private.style[ diffPropName ];

	    // save cycles when the context prop doesn't need to be applied
	    if( !cxtProp || eleProp === cxtProp ){ continue; }

	    var retDiffProp = retDiffProps[ diffPropName ] = {
	      prev: eleProp
	    };

	    self.applyParsedProperty( ele, cxtProp );

	    retDiffProp.next = ele._private.style[ diffPropName ];

	    if( retDiffProp.next && retDiffProp.next.bypass ){
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }

	  return {
	    diffProps: retDiffProps
	  };
	};

	styfn.updateStyleHints = function(ele){
	  var _p = ele._private;
	  var self = this;
	  var style = _p.style;

	  if( ele.removed() ){ return; }

	  // set whether has pie or not; for greater efficiency
	  var hasPie = false;
	  if( _p.group === 'nodes' && self._private.hasPie ){
	    for( var i = 1; i <= self.pieBackgroundN; i++ ){ // 1..N
	      var size = _p.style['pie-' + i + '-background-size'].value;

	      if( size > 0 ){
	        hasPie = true;
	        break;
	      }
	    }
	  }

	  _p.hasPie = hasPie;

	  var transform = style['text-transform'].strValue;
	  var content = style['label'].strValue;
	  var fStyle = style['font-style'].strValue;
	  var size = style['font-size'].pfValue + 'px';
	  var family = style['font-family'].strValue;
	  // var variant = style['font-variant'].strValue;
	  var weight = style['font-weight'].strValue;
	  var valign = style['text-valign'].strValue;
	  var halign = style['text-valign'].strValue;
	  var oWidth = style['text-outline-width'].pfValue;
	  var wrap = style['text-wrap'].strValue;
	  var wrapW = style['text-max-width'].pfValue;
	  _p.labelKey = fStyle +'$'+ size +'$'+ family +'$'+ weight +'$'+ content +'$'+ transform +'$'+ valign +'$'+ halign +'$'+ oWidth + '$' + wrap + '$' + wrapW;
	  _p.fontKey = fStyle +'$'+ weight +'$'+ size +'$'+ family;

	  var width = style['width'].pfValue;
	  var height = style['height'].pfValue;
	  var borderW = style['border-width'].pfValue;
	  _p.boundingBoxKey = width +'$'+ height +'$'+ borderW;

	  if( ele._private.group === 'edges' ){
	    var cpss = style['control-point-step-size'].pfValue;
	    var cpd = style['control-point-distances'] ? style['control-point-distances'].pfValue.join('_') : undefined;
	    var cpw = style['control-point-weights'].value.join('_');
	    var curve = style['curve-style'].strValue;
	    var sd = style['segment-distances'] ? style['segment-distances'].pfValue.join('_') : undefined;
	    var sw = style['segment-weights'].value.join('_');

	    _p.boundingBoxKey += '$'+ cpss +'$'+ cpd +'$'+ cpw +'$'+ sd +'$'+ sw +'$'+ curve;
	  }

	  _p.styleKey = Date.now();
	};

	// apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }
	styfn.applyParsedProperty = function( ele, parsedProp ){
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var fieldVal, flatProp;
	  var types = self.types;
	  var type = self.properties[ prop.name ].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[ prop.name ];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;

	  // can't apply auto to width or height unless it's a parent node
	  if( (parsedProp.name === 'height' || parsedProp.name === 'width') && ele.isNode() ){
	    if( parsedProp.value === 'auto' && !ele.isParent() ){
	      return false;
	    } else if( parsedProp.value !== 'auto' && ele.isParent() ){
	      prop = parsedProp = this.parse( parsedProp.name, 'auto', propIsBypass );
	    }
	  }

	  // check if we need to delete the current bypass
	  if( propIsBypass && prop.deleteBypass ){ // then this property is just here to indicate we need to delete
	    var currentProp = style[ prop.name ];

	    // can only delete if the current prop is a bypass and it points to the property it was overriding
	    if( !currentProp ){
	      return true; // property is already not defined
	    } else if( currentProp.bypass && currentProp.bypassed ){ // then replace the bypass property with the original

	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[ prop.name ] = currentProp.bypassed;
	      return true;

	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function(){
	    util.error('Do not assign mappings to elements without corresponding data (e.g. ele `'+ ele.id() +'` for property `'+ prop.name +'` with data field `'+ prop.field +'`); try a `['+ prop.field +']` selector to limit scope to elements with `'+ prop.field +'` defined');
	  };

	  // put the property in the style objects
	  switch( prop.mapped ){ // flatten the property if mapped
	  case types.mapData:
	  case types.mapLayoutData:
	  case types.mapScratch:

	    var isLayout = prop.mapped === types.mapLayoutData;
	    var isScratch = prop.mapped === types.mapScratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split(".");
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    for( var i = 0; i < fields.length && fieldVal; i++ ){
	      var field = fields[i];
	      fieldVal = fieldVal[ field ];
	    }

	    var percent;
	    if( !is.number(fieldVal) ){ // then keep the mapping but assume 0% for now
	      percent = 0;
	    } else {
	      percent = (fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
	    }

	    // make sure to bound percent value
	    if( percent < 0 ){
	      percent = 0;
	    } else if( percent > 1 ){
	      percent = 1;
	    }

	    if( type.color ){
	      var r1 = prop.valueMin[0];
	      var r2 = prop.valueMax[0];
	      var g1 = prop.valueMin[1];
	      var g2 = prop.valueMax[1];
	      var b1 = prop.valueMin[2];
	      var b2 = prop.valueMax[2];
	      var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	      var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

	      var clr = [
	        Math.round( r1 + (r2 - r1)*percent ),
	        Math.round( g1 + (g2 - g1)*percent ),
	        Math.round( b1 + (b2 - b1)*percent ),
	        Math.round( a1 + (a2 - a1)*percent )
	      ];

	      flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
	        bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
	        name: prop.name,
	        value: clr,
	        strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	      };

	    } else if( type.number ){
	      var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	      flatProp = this.parse( prop.name, calcValue, prop.bypass, true );

	    } else {
	      return false; // can only map to colours and numbers
	    }

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      flatProp = this.parse( prop.name, origProp.strValue, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  // direct mapping
	  case types.data:
	  case types.layoutData:
	  case types.scratch:
	    var isLayout = prop.mapped === types.layoutData;
	    var isScratch = prop.mapped === types.scratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split(".");
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    if( fieldVal ){ for( var i = 0; i < fields.length; i++ ){
	      var field = fields[i];
	      fieldVal = fieldVal[ field ];
	    } }

	    flatProp = this.parse( prop.name, fieldVal, prop.bypass, true );

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      var flatPropVal = origProp ? origProp.strValue : '';

	      flatProp = this.parse( prop.name, flatPropVal, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case types.fn:
	    var fn = prop.value;
	    var fnRetVal = fn( ele );

	    flatProp = this.parse( prop.name, fnRetVal, prop.bypass, true );
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case undefined:
	    break; // just set the property

	  default:
	    return false; // not a valid mapping
	  }

	  // if the property is a bypass property, then link the resultant property to the original one
	  if( propIsBypass ){
	    if( origPropIsBypass ){ // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else { // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }

	    style[ prop.name ] = prop; // and set

	  } else { // prop is not bypass
	    if( origPropIsBypass ){ // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else { // then just replace the old prop with the new one
	      style[ prop.name ] = prop;
	    }
	  }

	  return true;
	};

	// updates the visual style for all elements (useful for manual style modification after init)
	styfn.update = function(){
	  var cy = this._private.cy;
	  var eles = cy.elements();

	  eles.updateStyle();
	};

	// just update the functional properties (i.e. mappings) in the elements'
	// styles (less expensive than recalculation)
	styfn.updateMappers = function( eles ){
	  var self = this;

	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[i];
	    var style = ele._private.style;

	    for( var j = 0; j < self.properties.length; j++ ){ // for each prop
	      var prop = self.properties[j];
	      var propInStyle = style[ prop.name ];

	      if( propInStyle && propInStyle.mapping ){
	        var mapping = propInStyle.mapping;
	        this.applyParsedProperty( ele, mapping ); // reapply the mapping property
	      }
	    }

	    this.updateStyleHints( ele );
	  }
	};

	// diffProps : { name => { prev, next } }
	styfn.updateTransitions = function( ele, diffProps, isBypass ){
	  var self = this;
	  var _p = ele._private;
	  var style = _p.style;
	  var props = style['transition-property'].value;
	  var duration = style['transition-duration'].pfValue;
	  var delay = style['transition-delay'].pfValue;
	  var css = {};

	  if( props.length > 0 && duration > 0 ){

	    // build up the style to animate towards
	    var anyPrev = false;
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[i];
	      var styProp = style[ prop ];
	      var diffProp = diffProps[ prop ];

	      if( !diffProp ){ continue; }

	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if( !fromProp ){ continue; }

	      // consider px values
	      if( is.number( fromProp.pfValue ) && is.number( toProp.pfValue ) ){
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
	        initVal = fromProp.pfValue + initDt * diff;

	      // consider numerical values
	      } else if( is.number( fromProp.value ) && is.number( toProp.value ) ){
	        diff = toProp.value - fromProp.value; // nonzero is truthy
	        initVal = fromProp.value + initDt * diff;

	      // consider colour values
	      } else if( is.array( fromProp.value ) && is.array( toProp.value ) ){
	        diff = fromProp.value[0] !== toProp.value[0]
	          || fromProp.value[1] !== toProp.value[1]
	          || fromProp.value[2] !== toProp.value[2]
	        ;

	        initVal = fromProp.strValue;
	      }

	      // the previous value is good for an animation only if it's different
	      if( diff ){
	        css[ prop ] = toProp.strValue; // to val
	        this.applyBypass( ele, prop, initVal ); // from val
	        anyPrev = true;
	      }

	    } // end if props allow ani

	    // can't transition if there's nothing previous to transition from
	    if( !anyPrev ){ return; }

	    _p.transitioning = true;

	    ele.stop();

	    if( delay > 0 ){
	      ele.delay( delay );
	    }

	    ele.animate({
	      css: css
	    }, {
	      duration: duration,
	      easing: style['transition-timing-function'].value,
	      queue: false,
	      complete: function(){
	        if( !isBypass ){
	          self.removeBypasses( ele, props );
	        }

	        _p.transitioning = false;
	      }
	    });

	  } else if( _p.transitioning ){
	    ele.stop();

	    this.removeBypasses( ele, props );

	    _p.transitioning = false;
	  }
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],83:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');

	var styfn = {};

	// bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property
	styfn.applyBypass = function( eles, name, value, updateTransitions ){
	  var self = this;
	  var props = [];
	  var isBypass = true;

	  // put all the properties (can specify one or many) in an array after parsing them
	  if( name === "*" || name === "**" ){ // apply to all property names

	    if( value !== undefined ){
	      for( var i = 0; i < self.properties.length; i++ ){
	        var prop = self.properties[i];
	        var name = prop.name;

	        var parsedProp = this.parse(name, value, true);

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }

	  } else if( is.string(name) ){ // then parse the single property
	    var parsedProp = this.parse(name, value, true);

	    if( parsedProp ){
	      props.push( parsedProp );
	    }
	  } else if( is.plainObject(name) ){ // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var name = prop.name;
	      var value = specifiedProps[ name ];

	      if( value === undefined ){ // try camel case name too
	        value = specifiedProps[ util.dash2camel(name) ];
	      }

	      if( value !== undefined ){
	        var parsedProp = this.parse(name, value, true);

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }
	  } else { // can't do anything without well defined properties
	    return false;
	  }

	  // we've failed if there are no valid properties
	  if( props.length === 0 ){ return false; }

	  // now, apply the bypass properties on the elements
	  var ret = false; // return true if at least one succesful bypass applied
	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[i];
	    var style = ele._private.style;
	    var diffProps = {};
	    var diffProp;

	    for( var j = 0; j < props.length; j++ ){ // for each prop
	      var prop = props[j];

	      if( updateTransitions ){
	        var prevProp = style[ prop.name ];
	        diffProp = diffProps[ prop.name ] = { prev: prevProp };
	      }

	      ret = this.applyParsedProperty( ele, prop ) || ret;

	      if( updateTransitions ){
	        diffProp.next = style[ prop.name ];
	      }

	    } // for props

	    if( ret ){
	      this.updateStyleHints( ele );
	    }

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles

	  return ret;
	};

	// only useful in specific cases like animation
	styfn.overrideBypass = function( eles, name, value ){
	  name = util.camel2dash(name);

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var prop = ele._private.style[ name ];
	    var type = this.properties[ name ].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;

	    if( !prop.bypass ){ // need a bypass if one doesn't exist
	      this.applyBypass( ele, name, value );
	      continue;
	    }

	    prop.value = value;

	    if( prop.pfValue != null ){
	      prop.pfValue = value;
	    }

	    if( isColor ){
	      prop.strValue = 'rgb(' + value.join(',') + ')';
	    } else if( isMulti ){
	      prop.strValue = value.join(' ');
	    } else {
	      prop.strValue = '' + value;
	    }
	  }
	};

	styfn.removeAllBypasses = function( eles, updateTransitions ){
	  return this.removeBypasses( eles, this.propertyNames, updateTransitions );
	};

	styfn.removeBypasses = function( eles, props, updateTransitions ){
	  var isBypass = true;

	  for( var j = 0; j < eles.length; j++ ){
	    var ele = eles[j];
	    var diffProps = {};
	    var style = ele._private.style;

	    for( var i = 0; i < props.length; i++ ){
	      var name = props[i];
	      var prop = this.properties[ name ];
	      var value = ''; // empty => remove bypass
	      var parsedProp = this.parse(name, value, true);
	      var prevProp = style[ prop.name ];
	      var diffProp = diffProps[ prop.name ] = { prev: prevProp };

	      this.applyParsedProperty(ele, parsedProp);

	      diffProp.next = style[ prop.name ];
	    } // for props

	    this.updateStyleHints( ele );

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],84:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');

	var styfn = {};

	// gets what an em size corresponds to in pixels relative to a dom element
	styfn.getEmSizeInPixels = function(){
	  var px = this.containerCss('font-size');

	  if( px != null ){
	    return parseFloat( px );
	  } else {
	    return 1; // for headless
	  }
	};

	// gets css property from the core container
	styfn.containerCss = function( propName ){
	  var cy = this._private.cy;
	  var domElement = cy.container();

	  if( window && domElement && window.getComputedStyle ){
	    return window.getComputedStyle(domElement).getPropertyValue( propName );
	  }
	};

	module.exports = styfn;

	},{"../window":100}],85:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// gets the rendered style for an element
	styfn.getRenderedStyle = function( ele ){
	  return this.getRawStyle( ele, true );
	};

	// gets the raw style for an element
	styfn.getRawStyle = function( ele, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var rstyle = {};

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var val = self.getStylePropertyValue( ele, prop.name, isRenderedVal );

	      if( val ){
	        rstyle[ prop.name ] = val;
	        rstyle[ util.dash2camel(prop.name) ] = val;
	      }
	    }

	    return rstyle;
	  }
	};

	styfn.getStylePropertyValue = function( ele, propName, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var style = ele._private.style;
	    var prop = self.properties[ propName ];
	    var type = prop.type;
	    var styleProp = style[ prop.name ];
	    var zoom = ele.cy().zoom();

	    if( styleProp ){
	      var units = styleProp.units ? type.implicitUnits || 'px' : null;
	      var val = units ? [].concat( styleProp.pfValue ).map(function( pfValue ){
	        return ( pfValue * (isRenderedVal ? zoom : 1) ) + units;
	      }).join(' ') : styleProp.strValue;

	      return val;
	    }
	  }
	};

	// gets the value style for an element (useful for things like animations)
	styfn.getValueStyle = function( ele ){
	  var self = this;
	  var rstyle = {};
	  var style;
	  var isEle = is.element(ele);

	  if( isEle ){
	    style = ele._private.style;
	  } else {
	    style = ele; // just passed the style itself
	  }

	  if( style ){
	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var styleProp = style[ prop.name ] || style[ util.dash2camel(prop.name) ];

	      if( styleProp !== undefined ){ // then make a prop of it
	        if( is.plainObject( styleProp ) ){
	          styleProp = this.parse( prop.name, styleProp.strValue );
	        } else {
	          styleProp = this.parse( prop.name, styleProp );
	        }
	      }

	      if( styleProp ){
	        rstyle[ prop.name ] = styleProp;
	        rstyle[ util.dash2camel(prop.name) ] = styleProp;
	      }
	    }
	  }

	  return rstyle;
	};

	styfn.getPropsList = function( propsObj ){
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;

	  if( style ){
	    for( var name in style ){
	      var val = style[name];
	      var prop = props[name] || props[ util.camel2dash(name) ];
	      var styleProp = this.parse( prop.name, val );

	      rstyle.push( styleProp );
	    }
	  }

	  return rstyle;
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],86:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var Selector = _dereq_('../selector');

	var Style = function( cy ){

	  if( !(this instanceof Style) ){
	    return new Style(cy);
	  }

	  if( !is.core(cy) ){
	    util.error('A style must have a core reference');
	    return;
	  }

	  this._private = {
	    cy: cy,
	    coreStyle: {},
	    newStyle: true
	  };

	  this.length = 0;

	  this.addDefaultStylesheet();
	};

	var styfn = Style.prototype;

	styfn.instanceString = function(){
	  return 'style';
	};

	// remove all contexts
	styfn.clear = function(){
	  for( var i = 0; i < this.length; i++ ){
	    this[i] = undefined;
	  }
	  this.length = 0;
	  this._private.newStyle = true;

	  return this; // chaining
	};

	styfn.resetToDefault = function(){
	  this.clear();
	  this.addDefaultStylesheet();

	  return this;
	};

	// builds a style object for the 'core' selector
	styfn.core = function(){
	  return this._private.coreStyle;
	};

	// create a new context from the specified selector string and switch to that context
	styfn.selector = function( selectorStr ){
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector( selectorStr );

	  var i = this.length++; // new context means new index
	  this[i] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };

	  return this; // chaining
	};

	// add one or many css rules to the current context
	styfn.css = function(){
	  var self = this;
	  var args = arguments;

	  switch( args.length ){
	  case 1:
	    var map = args[0];

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){
	        mapVal = map[ util.dash2camel(prop.name) ];
	      }

	      if( mapVal !== undefined ){
	        this.cssRule( prop.name, mapVal );
	      }
	    }

	    break;

	  case 2:
	    this.cssRule( args[0], args[1] );
	    break;

	  default:
	    break; // do nothing if args are invalid
	  }

	  return this; // chaining
	};
	styfn.style = styfn.css;

	// add a single css rule to the current context
	styfn.cssRule = function( name, value ){
	  // name-value pair
	  var property = this.parse( name, value );

	  // add property to current context if valid
	  if( property ){
	    var i = this.length - 1;
	    this[i].properties.push( property );
	    this[i].properties[ property.name ] = property; // allow access by name as well

	    if( property.name.match(/pie-(\d+)-background-size/) && property.value ){
	      this._private.hasPie = true;
	    }

	    if( property.mapped ){
	      this[i].mappedProperties.push( property );
	    }

	    // add to core style if necessary
	    var currentSelectorIsCore = !this[i].selector;
	    if( currentSelectorIsCore ){
	      this._private.coreStyle[ property.name ] = property;
	    }
	  }

	  return this; // chaining
	};

	// static function
	Style.fromJson = function( cy, json ){
	  var style = new Style( cy );

	  style.fromJson( json );

	  return style;
	};

	Style.fromString = function( cy, string ){
	  return new Style( cy ).fromString( string );
	};

	[
	  _dereq_('./apply'),
	  _dereq_('./bypass'),
	  _dereq_('./container'),
	  _dereq_('./get-for-ele'),
	  _dereq_('./json'),
	  _dereq_('./string-sheet'),
	  _dereq_('./properties'),
	  _dereq_('./parse')
	].forEach(function( props ){
	  util.extend( styfn, props );
	});


	Style.types = styfn.types;
	Style.properties = styfn.properties;

	module.exports = Style;

	},{"../is":77,"../selector":81,"../util":94,"./apply":82,"./bypass":83,"./container":84,"./get-for-ele":85,"./json":87,"./parse":88,"./properties":89,"./string-sheet":90}],87:[function(_dereq_,module,exports){
	'use strict';

	var styfn = {};

	styfn.applyFromJson = function( json ){
	  var style = this;

	  for( var i = 0; i < json.length; i++ ){
	    var context = json[i];
	    var selector = context.selector;
	    var props = context.style || context.css;

	    style.selector( selector ); // apply selector

	    for( var name in props ){
	      var value = props[name];

	      style.css( name, value ); // apply property
	    }
	  }

	  return style;
	};

	// accessible cy.style() function
	styfn.fromJson = function( json ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromJson( json );

	  return style;
	};

	// get json from cy.style() api
	styfn.json = function(){
	  var json = [];

	  for( var i = this.defaultLength; i < this.length; i++ ){
	    var cxt = this[i];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[j];
	      css[ prop.name ] = prop.strValue;
	    }

	    json.push({
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    });
	  }

	  return json;
	};

	module.exports = styfn;

	},{}],88:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// a caching layer for property parsing
	styfn.parse = function( name, value, propIsBypass, propIsFlat ){
	  var argHash = [ name, value, propIsBypass, propIsFlat ].join('$');
	  var propCache = this.propCache = this.propCache || {};
	  var ret;
	  var impl = parseImpl.bind( this );

	  if( !(ret = propCache[argHash]) ){
	    ret = propCache[argHash] = impl( name, value, propIsBypass, propIsFlat );
	  }

	  // always need a copy since props are mutated later in their lifecycles
	  ret = util.copy( ret );

	  if( ret ){
	    ret.value = util.copy( ret.value ); // because it could be an array, e.g. colour
	  }

	  return ret;
	};

	// parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property
	var parseImpl = function( name, value, propIsBypass, propIsFlat ){
	  var self = this;

	  name = util.camel2dash( name ); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[ name ];
	  var passedValue = value;
	  var types = self.types;

	  if( !property ){ return null; } // return null on property of unknown name
	  if( value === undefined || value === null ){ return null; } // can't assign null

	  // the property may be an alias
	  if( property.alias ){
	    property = property.pointsTo;
	    name = property.name;
	  }

	  var valueIsString = is.string(value);
	  if( valueIsString ){ // trim the value to make parsing easier
	    value = value.trim();
	  }

	  var type = property.type;
	  if( !type ){ return null; } // no type, no luck

	  // check if bypass is null or empty string (i.e. indication to delete bypass property)
	  if( propIsBypass && (value === '' || value === null) ){
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  }

	  // check if value is a function used as a mapper
	  if( is.fn(value) ){
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  }

	  // check if value is mapped
	  var data, mapData, layoutData, mapLayoutData, scratch, mapScratch;
	  if( !valueIsString || propIsFlat ){
	    // then don't bother to do the expensive regex checks

	  } else if(
	    ( data = new RegExp( types.data.regex ).exec( value ) ) ||
	    ( layoutData = new RegExp( types.layoutData.regex ).exec( value ) ) ||
	    ( scratch = new RegExp( types.scratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass

	    var mapped;
	    if( data ){
	      mapped = types.data;
	    } else if( layoutData ){
	      mapped = types.layoutData;
	    } else {
	      mapped = types.scratch;
	    }

	    data = data || layoutData || scratch;

	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };

	  } else if(
	    ( mapData = new RegExp( types.mapData.regex ).exec( value ) ) ||
	    ( mapLayoutData = new RegExp( types.mapLayoutData.regex ).exec( value ) ) ||
	    ( mapScratch = new RegExp( types.mapScratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass
	    if( type.multiple ){ return false; } // impossible to map to num

	    var mapped;
	    if( mapData ){
	      mapped = types.mapData;
	    } else if( mapLayoutData ){
	      mapped = types.mapLayoutData;
	    } else {
	      mapped = types.mapScratch;
	    }

	    mapData = mapData || mapLayoutData || mapScratch;

	    // we can map only if the type is a colour or a number
	    if( !(type.color || type.number) ){ return false; }

	    var valueMin = this.parse( name, mapData[4] ); // parse to validate
	    if( !valueMin || valueMin.mapped ){ return false; } // can't be invalid or mapped

	    var valueMax = this.parse( name, mapData[5] ); // parse to validate
	    if( !valueMax || valueMax.mapped ){ return false; } // can't be invalid or mapped

	    // check if valueMin and valueMax are the same
	    if( valueMin.value === valueMax.value ){
	      return false; // can't make much of a mapper without a range

	    } else if( type.color ){
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;

	      var same = c1[0] === c2[0] // red
	        && c1[1] === c2[1] // green
	        && c1[2] === c2[2] // blue
	        && ( // optional alpha
	          c1[3] === c2[3] // same alpha outright
	          || (
	            (c1[3] == null || c1[3] === 1) // full opacity for colour 1?
	            &&
	            (c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	          )
	        )
	      ;

	      if( same ){ return false; } // can't make a mapper without a range
	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: mapped,
	      field: mapData[1],
	      fieldMin: parseFloat( mapData[2] ), // min & max are numeric
	      fieldMax: parseFloat( mapData[3] ),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }

	  if( type.multiple && propIsFlat !== 'multiple' ){
	    var vals;

	    if( valueIsString ){
	      vals = value.split(/\s+/);
	    } else if( is.array(value) ){
	      vals = value;
	    } else {
	      vals = [ value ];
	    }

	    if( type.evenMultiple && vals.length % 2 !== 0 ){ return null; }

	    var valArr = vals.map(function( v ){
	      var p = self.parse( name, v, propIsBypass, 'multiple' );

	      if( p.pfValue != null ){
	        return p.pfValue;
	      } else {
	        return p.value;
	      }
	    });

	    return {
	      name: name,
	      value: valArr,
	      pfValue: valArr,
	      strValue: valArr.join(' '),
	      bypass: propIsBypass,
	      units: type.number && !type.unitless ? type.implicitUnits || 'px' : undefined
	    };
	  }

	  // several types also allow enums
	  var checkEnums = function(){
	    for( var i = 0; i < type.enums.length; i++ ){
	      var en = type.enums[i];

	      if( en === value ){
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null;
	  };

	  // check the type and return the appropriate object
	  if( type.number ){
	    var units;
	    var implicitUnits = 'px'; // not set => px

	    if( type.units ){ // use specified units if set
	      units = type.units;
	    }

	    if( type.implicitUnits ){
	      implicitUnits = type.implicitUnits;
	    }

	    if( !type.unitless ){
	      if( valueIsString ){
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
	        if( units ){ unitsRegex = units; } // only allow explicit units if so set
	        var match = value.match( '^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$' );

	        if( match ){
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }

	      } else if( !units || type.implicitUnits ) {
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat( value );

	    // if not a number and enums not allowed, then the value is invalid
	    if( isNaN(value) && type.enums === undefined ){
	      return null;
	    }

	    // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)
	    if( isNaN(value) && type.enums !== undefined ){
	      value = passedValue;

	      return checkEnums();
	    }

	    // check if value must be an integer
	    if( type.integer && !is.integer(value) ){
	      return null;
	    }

	    // check value is within range
	    if( (type.min !== undefined && value < type.min)
	    || (type.max !== undefined && value > type.max)
	    ){
	      return null;
	    }

	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    };

	    // normalise value in pixels
	    if( type.unitless || (units !== 'px' && units !== 'em') ){
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = ( units === 'px' || !units ? (value) : (this.getEmSizeInPixels() * value) );
	    }

	    // normalise value in ms
	    if( units === 'ms' || units === 's' ){
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    }

	    // normalise value in rad
	    if( units === 'deg' || units === 'rad' ){
	      ret.pfValue = units === 'rad' ? value : value * Math.PI/180;
	    }

	    return ret;

	  } else if( type.propList ) {

	    var props = [];
	    var propsStr = '' + value;

	    if( propsStr === 'none' ){
	      // leave empty

	    } else { // go over each prop

	      var propsSplit = propsStr.split(',');
	      for( var i = 0; i < propsSplit.length; i++ ){
	        var propName = propsSplit[i].trim();

	        if( self.properties[propName] ){
	          props.push( propName );
	        }
	      }

	      if( props.length === 0 ){ return null; }
	    }

	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join(', '),
	      bypass: propIsBypass
	    };

	  } else if( type.color ){
	    var tuple = util.color2tuple( value );

	    if( !tuple ){ return null; }

	    return {
	      name: name,
	      value: tuple,
	      strValue: '' + value,
	      bypass: propIsBypass,
	      roundValue: true
	    };

	  } else if( type.regex || type.regexes ){

	    // first check enums
	    if( type.enums ){
	      var enumProp = checkEnums();

	      if( enumProp ){ return enumProp; }
	    }

	    var regexes = type.regexes ? type.regexes : [ type.regex ];

	    for( var i = 0; i < regexes.length; i++ ){
	      var regex = new RegExp( regexes[i] ); // make a regex from the type string
	      var m = regex.exec( value );

	      if( m ){ // regex matches
	        return {
	          name: name,
	          value: m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };

	      }
	    }

	    return null; // didn't match any

	  } else if( type.string ){
	    // just return
	    return {
	      name: name,
	      value: value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };

	  } else if( type.enums ){ // check enums last because it's a combo type in others
	    return checkEnums();

	  } else {
	    return null; // not a type we can handle
	  }

	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],89:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var styfn = {};

	(function(){
	  var number = util.regex.number;
	  var rgba = util.regex.rgbaNoBackRefs;
	  var hsla = util.regex.hslaNoBackRefs;
	  var hex3 = util.regex.hex3;
	  var hex6 = util.regex.hex6;
	  var data = function( prefix ){ return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$'; };
	  var mapData = function( prefix ){
	    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };

	  // each visual style property has a type and needs to be validated according to it
	  styfn.types = {
	    time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
	    percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
	    zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
	    nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
	    nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
	    position: { enums: ['parent', 'origin'] },
	    nodeSize: { number: true, min: 0, enums: ['auto', 'label'] },
	    number: { number: true, unitless: true },
	    numbers: { number: true, unitless: true, multiple: true },
	    size: { number: true, min: 0 },
	    bidirectionalSize: { number: true }, // allows negative
	    bidirectionalSizes: { number: true, multiple: true }, // allows negative
	    bgSize: { number: true, min: 0, allowPercent: true },
	    bgWH: { number: true, min: 0, allowPercent: true, enums: ['auto'] },
	    bgPos: { number: true, allowPercent: true },
	    bgRepeat: { enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'] },
	    bgFit: { enums: ['none', 'contain', 'cover'] },
	    bgClip: { enums: ['none', 'node'] },
	    color: { color: true },
	    bool: { enums: ['yes', 'no'] },
	    lineStyle: { enums: ['solid', 'dotted', 'dashed'] },
	    borderStyle: { enums: ['solid', 'dotted', 'dashed', 'double'] },
	    curveStyle: { enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments'] },
	    fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
	    fontVariant: { enums: ['small-caps', 'normal'] },
	    fontStyle: { enums: ['italic', 'normal', 'oblique'] },
	    fontWeight: { enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900] },
	    textDecoration: { enums: ['none', 'underline', 'overline', 'line-through'] },
	    textTransform: { enums: ['none', 'uppercase', 'lowercase'] },
	    textWrap: { enums: ['none', 'wrap'] },
	    textBackgroundShape: { enums: ['rectangle', 'roundrectangle']},
	    nodeShape: { enums: ['rectangle', 'roundrectangle', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'heptagon', 'octagon', 'star', 'diamond', 'vee', 'rhomboid', 'polygon'] },
	    compoundIncludeLabels: { enums: ['include', 'exclude'] },
	    arrowShape: { enums: ['tee', 'triangle', 'triangle-tee', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none'] },
	    arrowFill: { enums: ['filled', 'hollow'] },
	    display: { enums: ['element', 'none'] },
	    visibility: { enums: ['hidden', 'visible'] },
	    valign: { enums: ['top', 'center', 'bottom'] },
	    halign: { enums: ['left', 'center', 'right'] },
	    text: { string: true },
	    data: { mapping: true, regex: data('data') },
	    layoutData: { mapping: true, regex: data('layoutData') },
	    scratch: { mapping: true, regex: data('scratch') },
	    mapData: { mapping: true, regex: mapData('mapData') },
	    mapLayoutData: { mapping: true, regex: mapData('mapLayoutData') },
	    mapScratch: { mapping: true, regex: mapData('mapScratch') },
	    fn: { mapping: true, fn: true },
	    url: { regex: '^url\\s*\\(\\s*([^\\s]+)\\s*\\s*\\)|none|(.+)$' },
	    propList: { propList: true },
	    angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
	    textRotation: { enums: ['none', 'autorotate'] },
	    polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
	    easing: {
	      regexes: [
	        '^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$',
	        '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'
	      ],
	      enums: [
	        'linear',
	        'ease', 'ease-in', 'ease-out', 'ease-in-out',
	        'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine',
	        'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad',
	        'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic',
	        'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart',
	        'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint',
	        'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo',
	        'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ'
	      ]
	    }
	  };

	  // define visual style properties
	  var t = styfn.types;
	  var props = styfn.properties = [
	    // labels
	    { name: 'text-valign', type: t.valign },
	    { name: 'text-halign', type: t.halign },
	    { name: 'color', type: t.color },
	    { name: 'label', type: t.text },
	    { name: 'text-outline-color', type: t.color },
	    { name: 'text-outline-width', type: t.size },
	    { name: 'text-outline-opacity', type: t.zeroOneNumber },
	    { name: 'text-opacity', type: t.zeroOneNumber },
	    { name: 'text-background-color', type: t.color },
	    { name: 'text-background-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-color', type: t.color },
	    { name: 'text-border-width', type: t.size },
	    { name: 'text-border-style', type: t.borderStyle },
	    { name: 'text-background-shape', type: t.textBackgroundShape},
	    // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
	    { name: 'text-transform', type: t.textTransform },
	    { name: 'text-wrap', type: t.textWrap },
	    { name: 'text-max-width', type: t.size },
	    { name: 'text-events', type: t.bool },

	    // { name: 'text-rotation', type: t.angle }, // TODO disabled b/c rotation breaks bounding boxes
	    { name: 'font-family', type: t.fontFamily },
	    { name: 'font-style', type: t.fontStyle },
	    // { name: 'font-variant', type: t.fontVariant }, // not useful
	    { name: 'font-weight', type: t.fontWeight },
	    { name: 'font-size', type: t.size },
	    { name: 'min-zoomed-font-size', type: t.size },
	    { name: 'edge-text-rotation', type: t.textRotation },

	    // behaviour
	    { name: 'events', type: t.bool },

	    // visibility
	    { name: 'display', type: t.display },
	    { name: 'visibility', type: t.visibility },
	    { name: 'opacity', type: t.zeroOneNumber },
	    { name: 'z-index', type: t.nonNegativeInt },

	    // overlays
	    { name: 'overlay-padding', type: t.size },
	    { name: 'overlay-color', type: t.color },
	    { name: 'overlay-opacity', type: t.zeroOneNumber },

	    // shadows
	    { name: 'shadow-blur', type: t.size },
	    { name: 'shadow-color', type: t.color },
	    { name: 'shadow-opacity', type: t.zeroOneNumber },
	    { name: 'shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'shadow-offset-y', type: t.bidirectionalSize },

	    // label shadows
	    { name: 'text-shadow-blur', type: t.size },
	    { name: 'text-shadow-color', type: t.color },
	    { name: 'text-shadow-opacity', type: t.zeroOneNumber },
	    { name: 'text-shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'text-shadow-offset-y', type: t.bidirectionalSize },

	    // transition anis
	    { name: 'transition-property', type: t.propList },
	    { name: 'transition-duration', type: t.time },
	    { name: 'transition-delay', type: t.time },
	    { name: 'transition-timing-function', type: t.easing },

	    // node body
	    { name: 'height', type: t.nodeSize },
	    { name: 'width', type: t.nodeSize },
	    { name: 'shape', type: t.nodeShape },
	    { name: 'shape-polygon-points', type: t.polygonPointList },
	    { name: 'background-color', type: t.color },
	    { name: 'background-opacity', type: t.zeroOneNumber },
	    { name: 'background-blacken', type: t.nOneOneNumber },
	    { name: 'padding-left', type: t.size },
	    { name: 'padding-right', type: t.size },
	    { name: 'padding-top', type: t.size },
	    { name: 'padding-bottom', type: t.size },

	    // node border
	    { name: 'border-color', type: t.color },
	    { name: 'border-opacity', type: t.zeroOneNumber },
	    { name: 'border-width', type: t.size },
	    { name: 'border-style', type: t.borderStyle },

	    // node background images
	    { name: 'background-image', type: t.url },
	    { name: 'background-image-opacity', type: t.zeroOneNumber },
	    { name: 'background-position-x', type: t.bgPos },
	    { name: 'background-position-y', type: t.bgPos },
	    { name: 'background-repeat', type: t.bgRepeat },
	    { name: 'background-fit', type: t.bgFit },
	    { name: 'background-clip', type: t.bgClip },
	    { name: 'background-width', type: t.bgWH },
	    { name: 'background-height', type: t.bgWH },

	    // compound props
	    { name: 'position', type: t.position },
	    { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels },

	    // edge line
	    { name: 'line-style', type: t.lineStyle },
	    { name: 'line-color', type: t.color },
	    { name: 'curve-style', type: t.curveStyle },
	    { name: 'haystack-radius', type: t.zeroOneNumber },
	    { name: 'control-point-step-size', type: t.size },
	    { name: 'control-point-distances', type: t.bidirectionalSizes },
	    { name: 'control-point-weights', type: t.numbers },
	    { name: 'segment-distances', type: t.bidirectionalSizes },
	    { name: 'segment-weights', type: t.numbers },

	    // these are just for the core
	    { name: 'selection-box-color', type: t.color },
	    { name: 'selection-box-opacity', type: t.zeroOneNumber },
	    { name: 'selection-box-border-color', type: t.color },
	    { name: 'selection-box-border-width', type: t.size },
	    { name: 'active-bg-color', type: t.color },
	    { name: 'active-bg-opacity', type: t.zeroOneNumber },
	    { name: 'active-bg-size', type: t.size },
	    { name: 'outside-texture-bg-color', type: t.color },
	    { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }
	  ];

	  // define aliases
	  var aliases = styfn.aliases = [
	    { name: 'content', pointsTo: 'label' },
	    { name: 'control-point-distance', pointsTo: 'control-point-distances' },
	    { name: 'control-point-weight', pointsTo: 'control-point-weights' }
	  ];

	  // pie backgrounds for nodes
	  styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
	  props.push({ name: 'pie-size', type: t.bgSize });
	  for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	    props.push({ name: 'pie-'+i+'-background-color', type: t.color });
	    props.push({ name: 'pie-'+i+'-background-size', type: t.percent });
	    props.push({ name: 'pie-'+i+'-background-opacity', type: t.zeroOneNumber });
	  }

	  // edge arrows
	  var arrowPrefixes = styfn.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
	  [
	    { name: 'arrow-shape', type: t.arrowShape },
	    { name: 'arrow-color', type: t.color },
	    { name: 'arrow-fill', type: t.arrowFill }
	  ].forEach(function( prop ){
	    arrowPrefixes.forEach(function( prefix ){
	      var name = prefix + '-' + prop.name;
	      var type = prop.type;

	      props.push({ name: name, type: type });
	    });
	  }, {});

	  // list of property names
	  styfn.propertyNames = props.map(function(p){ return p.name; });

	  // allow access of properties by name ( e.g. style.properties.height )
	  for( var i = 0; i < props.length; i++ ){
	    var prop = props[i];

	    props[ prop.name ] = prop; // allow lookup by name
	  }

	  // map aliases
	  for( var i = 0; i < aliases.length; i++ ){
	    var alias = aliases[i];
	    var pointsToProp = props[ alias.pointsTo ];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    };

	    // add alias prop for parsing
	    props.push( aliasProp );

	    props[ alias.name ] = aliasProp; // allow lookup by name
	  }
	})();

	// adds the default stylesheet to the current style
	styfn.addDefaultStylesheet = function(){
	  // fill the style with the default stylesheet
	  this
	    .selector('node, edge') // common properties
	      .css( util.extend( {
	        'events': 'yes',
	        'text-events': 'no',
	        'text-valign': 'top',
	        'text-halign': 'center',
	        'color': '#000',
	        'text-outline-color': '#000',
	        'text-outline-width': 0,
	        'text-outline-opacity': 1,
	        'text-opacity': 1,
	        'text-decoration': 'none',
	        'text-transform': 'none',
	        'text-wrap': 'none',
	        'text-max-width': 9999,
	        'text-background-color': '#000',
	        'text-background-opacity': 0,
	        'text-border-opacity': 0,
	        'text-border-width': 0,
	        'text-border-style': 'solid',
	        'text-border-color':'#000',
	        'text-background-shape':'rectangle',
	        'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	        'font-style': 'normal',
	        // 'font-variant': fontVariant,
	        'font-weight': 'normal',
	        'font-size': 16,
	        'min-zoomed-font-size': 0,
	        'edge-text-rotation': 'none',
	        'visibility': 'visible',
	        'display': 'element',
	        'opacity': 1,
	        'z-index': 0,
	        'label': '',
	        'overlay-opacity': 0,
	        'overlay-color': '#000',
	        'overlay-padding': 10,
	        'shadow-opacity': 0,
	        'shadow-color': '#000',
	        'shadow-blur': 10,
	        'shadow-offset-x': 0,
	        'shadow-offset-y': 0,
	        'text-shadow-opacity': 0,
	        'text-shadow-color': '#000',
	        'text-shadow-blur': 5,
	        'text-shadow-offset-x': 0,
	        'text-shadow-offset-y': 0,
	        'transition-property': 'none',
	        'transition-duration': 0,
	        'transition-delay': 0,
	        'transition-timing-function': 'linear',

	        // node props
	        'background-blacken': 0,
	        'background-color': '#888',
	        'background-opacity': 1,
	        'background-image': 'none',
	        'background-image-opacity': 1,
	        'background-position-x': '50%',
	        'background-position-y': '50%',
	        'background-repeat': 'no-repeat',
	        'background-fit': 'none',
	        'background-clip': 'node',
	        'background-width': 'auto',
	        'background-height': 'auto',
	        'border-color': '#000',
	        'border-opacity': 1,
	        'border-width': 0,
	        'border-style': 'solid',
	        'height': 30,
	        'width': 30,
	        'shape': 'ellipse',
	        'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

	        // compound props
	        'padding-top': 0,
	        'padding-bottom': 0,
	        'padding-left': 0,
	        'padding-right': 0,
	        'position': 'origin',
	        'compound-sizing-wrt-labels': 'include'
	      }, {
	        // node pie bg
	        'pie-size': '100%'
	      }, [
	        { name: 'pie-{{i}}-background-color', value: 'black' },
	        { name: 'pie-{{i}}-background-size', value: '0%' },
	        { name: 'pie-{{i}}-background-opacity', value: 1 }
	      ].reduce(function( css, prop ){
	        for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	          var name = prop.name.replace('{{i}}', i);
	          var val = prop.value;

	          css[ name ] = val;
	        }

	        return css;
	      }, {}), {
	        // edge props
	        'line-style': 'solid',
	        'line-color': '#ddd',
	        'control-point-step-size': 40,
	        'control-point-weights': 0.5,
	        'segment-weights': 0.5,
	        'segment-distances': 20,
	        'curve-style': 'bezier',
	        'haystack-radius': 0.8
	      }, [
	        { name: 'arrow-shape', value: 'none' },
	        { name: 'arrow-color', value: '#ddd' },
	        { name: 'arrow-fill', value: 'filled' }
	      ].reduce(function( css, prop ){
	        styfn.arrowPrefixes.forEach(function( prefix ){
	          var name = prefix + '-' + prop.name;
	          var val = prop.value;

	          css[ name ] = val;
	        });

	        return css;
	      }, {}) ) )
	    .selector('$node > node') // compound (parent) node properties
	      .css({
	        'width': 'auto',
	        'height': 'auto',
	        'shape': 'rectangle',
	        'padding-top': 10,
	        'padding-right': 10,
	        'padding-left': 10,
	        'padding-bottom': 10
	      })
	    .selector('edge') // just edge properties
	      .css({
	        'width': 1
	      })
	    .selector(':active')
	      .css({
	        'overlay-color': 'black',
	        'overlay-padding': 10,
	        'overlay-opacity': 0.25
	      })
	    .selector('core') // just core properties
	      .css({
	        'selection-box-color': '#ddd',
	        'selection-box-opacity': 0.65,
	        'selection-box-border-color': '#aaa',
	        'selection-box-border-width': 1,
	        'active-bg-color': 'black',
	        'active-bg-opacity': 0.15,
	        'active-bg-size': 30,
	        'outside-texture-bg-color': '#000',
	        'outside-texture-bg-opacity': 0.125
	      })
	  ;

	  this.defaultLength = this.length;
	};

	module.exports = styfn;

	},{"../util":94}],90:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var Selector = _dereq_('../selector');

	var styfn = {};

	styfn.applyFromString = function( string ){
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr;
	  var blockRem;
	  var propAndValStr;

	  // remove comments from the style string
	  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

	  function removeSelAndBlockFromRemaining(){
	    // remove the parsed selector and block from the remaining text to parse
	    if( remaining.length > selAndBlockStr.length ){
	      remaining = remaining.substr( selAndBlockStr.length );
	    } else {
	      remaining = '';
	    }
	  }

	  function removePropAndValFromRem(){
	    // remove the parsed property and value from the remaining block text to parse
	    if( blockRem.length > propAndValStr.length ){
	      blockRem = blockRem.substr( propAndValStr.length );
	    } else {
	      blockRem = '';
	    }
	  }

	  while(true){
	    var nothingLeftToParse = remaining.match(/^\s*$/);
	    if( nothingLeftToParse ){ break; }

	    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

	    if( !selAndBlock ){
	      util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
	      break;
	    }

	    selAndBlockStr = selAndBlock[0];

	    // parse the selector
	    var selectorStr = selAndBlock[1];
	    if( selectorStr !== 'core' ){
	      var selector = new Selector( selectorStr );
	      if( selector._private.invalid ){
	        util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);

	        // skip this selector and block
	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    }

	    // parse the block of properties and values
	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];

	    while(true){
	      var nothingLeftToParse = blockRem.match(/^\s*$/);
	      if( nothingLeftToParse ){ break; }

	      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

	      if( !propAndVal ){
	        util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
	        invalidBlock = true;
	        break;
	      }

	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];

	      var prop = self.properties[ propStr ];
	      if( !prop ){
	        util.error('Skipping property: Invalid property name in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      var parsedProp = style.parse( propStr, valStr );

	      if( !parsedProp ){
	        util.error('Skipping property: Invalid property definition in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      props.push({
	        name: propStr,
	        val: valStr
	      });
	      removePropAndValFromRem();
	    }

	    if( invalidBlock ){
	      removeSelAndBlockFromRemaining();
	      break;
	    }

	    // put the parsed block in the style
	    style.selector( selectorStr );
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[i];
	      style.css( prop.name, prop.val );
	    }

	    removeSelAndBlockFromRemaining();
	  }

	  return style;
	};

	styfn.fromString = function( string ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromString( string );

	  return style;
	};

	module.exports = styfn;

	},{"../selector":81,"../util":94}],91:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');
	var Style = _dereq_('./style');

	// a dummy stylesheet object that doesn't need a reference to the core
	// (useful for init)
	var Stylesheet = function(){
	  if( !(this instanceof Stylesheet) ){
	    return new Stylesheet();
	  }

	  this.length = 0;
	};

	var sheetfn = Stylesheet.prototype;

	sheetfn.instanceString = function(){
	  return 'stylesheet';
	};

	// just store the selector to be parsed later
	sheetfn.selector = function( selector ){
	  var i = this.length++;

	  this[i] = {
	    selector: selector,
	    properties: []
	  };

	  return this; // chaining
	};

	// just store the property to be parsed later
	sheetfn.css = function( name, value ){
	  var i = this.length - 1;

	  if( is.string(name) ){
	    this[i].properties.push({
	      name: name,
	      value: value
	    });
	  } else if( is.plainObject(name) ){
	    var map = name;

	    for( var j = 0; j < Style.properties.length; j++ ){
	      var prop = Style.properties[j];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){ // also try camel case name
	        mapVal = map[ util.dash2camel(prop.name) ];
	      }

	      if( mapVal !== undefined ){
	        var name = prop.name;
	        var value = mapVal;

	        this[i].properties.push({
	          name: name,
	          value: value
	        });
	      }
	    }
	  }

	  return this; // chaining
	};

	sheetfn.style = sheetfn.css;

	// generate a real style object from the dummy stylesheet
	sheetfn.generateStyle = function( cy ){
	  var style = new Style(cy);

	  for( var i = 0; i < this.length; i++ ){
	    var context = this[i];
	    var selector = context.selector;
	    var props = context.properties;

	    style.selector(selector); // apply selector

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[j];

	      style.css( prop.name, prop.value ); // apply property
	    }
	  }

	  return style;
	};

	module.exports = Stylesheet;

	},{"./is":77,"./style":86,"./util":94}],92:[function(_dereq_,module,exports){
	/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	// cross-env thread/worker
	// NB : uses (heavyweight) processes on nodejs so best not to create too many threads

	'use strict';

	var window = _dereq_('./window');
	var util = _dereq_('./util');
	var Promise = _dereq_('./promise');
	var Event = _dereq_('./event');
	var define = _dereq_('./define');
	var is = _dereq_('./is');

	var Thread = function( opts ){
	  if( !(this instanceof Thread) ){
	    return new Thread( opts );
	  }

	  var _p = this._private = {
	    requires: [],
	    files: [],
	    queue: null,
	    pass: [],
	    disabled: false
	  };

	  if( is.plainObject(opts) ){
	    if( opts.disabled != null ){
	      _p.disabled = !!opts.disabled;
	    }
	  }

	};

	var thdfn = Thread.prototype; // short alias

	var stringifyFieldVal = function( val ){
	  var valStr = is.fn( val ) ? val.toString() : "JSON.parse('" + JSON.stringify(val) + "')";

	  return valStr;
	};

	// allows for requires with prototypes and subobjs etc
	var fnAsRequire = function( fn ){
	  var req;
	  var fnName;

	  if( is.object(fn) && fn.fn ){ // manual fn
	    req = fnAs( fn.fn, fn.name );
	    fnName = fn.name;
	    fn = fn.fn;
	  } else if( is.fn(fn) ){ // auto fn
	    req = fn.toString();
	    fnName = fn.name;
	  } else if( is.string(fn) ){ // stringified fn
	    req = fn;
	  } else if( is.object(fn) ){ // plain object
	    if( fn.proto ){
	      req = '';
	    } else {
	      req = fn.name + ' = {};';
	    }

	    fnName = fn.name;
	    fn = fn.obj;
	  }

	  req += '\n';

	  var protoreq = function( val, subname ){
	    if( val.prototype ){
	      var protoNonempty = false;
	      for( var prop in val.prototype ){ protoNonempty = true; break; } // jshint ignore:line

	      if( protoNonempty ){
	        req += fnAsRequire( {
	          name: subname,
	          obj: val,
	          proto: true
	        }, val );
	      }
	    }
	  };

	  // pull in prototype
	  if( fn.prototype && fnName != null ){

	    for( var name in fn.prototype ){
	      var protoStr = '';

	      var val = fn.prototype[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '.prototype.' + name;

	      protoStr += subname + ' = ' + valStr + ';\n';

	      if( protoStr ){
	        req += protoStr;
	      }

	      protoreq( val, subname ); // subobject with prototype
	    }

	  }

	  // pull in properties for obj/fns
	  if( !is.string(fn) ){ for( var name in fn ){
	    var propsStr = '';

	    if( fn.hasOwnProperty(name) ){
	      var val = fn[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '["' + name + '"]';

	      propsStr += subname + ' = ' + valStr + ';\n';
	    }

	    if( propsStr ){
	      req += propsStr;
	    }

	    protoreq( val, subname ); // subobject with prototype
	  } }

	  return req;
	};

	var isPathStr = function( str ){
	  return is.string(str) && str.match(/\.js$/);
	};

	util.extend(thdfn, {

	  instanceString: function(){ return 'thread'; },

	  require: function( fn, as ){
	    var requires = this._private.requires;

	    if( isPathStr(fn) ){
	      this._private.files.push( fn );

	      return this;
	    }

	    if( as ){
	      if( is.fn(fn) ){
	        fn = { name: as, fn: fn };
	      } else {
	        fn = { name: as, obj: fn };
	      }
	    } else {
	      if( is.fn(fn) ){
	        if( !fn.name ){
	          throw 'The function name could not be automatically determined.  Use thread.require( someFunction, "someFunction" )';
	        }

	        fn = { name: fn.name, fn: fn };
	      }
	    }

	    requires.push( fn );

	    return this; // chaining
	  },

	  pass: function( data ){
	    this._private.pass.push( data );

	    return this; // chaining
	  },

	  run: function( fn, pass ){ // fn used like main()
	    var self = this;
	    var _p = this._private;
	    pass = pass || _p.pass.shift();

	    if( _p.stopped ){
	      throw 'Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.';
	    }

	    if( _p.running ){
	      return ( _p.queue = _p.queue.then(function(){ // inductive step
	        return self.run( fn, pass );
	      }) );
	    }

	    var useWW = window != null && !_p.disabled;
	    var useNode = !window && typeof module !== 'undefined' && !_p.disabled;

	    self.trigger('run');

	    var runP = new Promise(function( resolve, reject ){

	      _p.running = true;

	      var threadTechAlreadyExists = _p.ran;

	      var fnImplStr = is.string( fn ) ? fn : fn.toString();

	      // worker code to exec
	      var fnStr = '\n' + ( _p.requires.map(function( r ){
	        return fnAsRequire( r );
	      }) ).concat( _p.files.map(function( f ){
	        if( useWW ){
	          var wwifyFile = function( file ){
	            if( file.match(/^\.\//) || file.match(/^\.\./) ){
	              return window.location.origin + window.location.pathname + file;
	            } else if( file.match(/^\//) ){
	              return window.location.origin + '/' + file;
	            }
	            return file;
	          };

	          return 'importScripts("' + wwifyFile(f) + '");';
	        } else if( useNode ) {
	          return 'eval( require("fs").readFileSync("' + f + '", { encoding: "utf8" }) );';
	        } else {
	          throw 'External file `' + f + '` can not be required without any threading technology.';
	        }
	      }) ).concat([
	        '( function(){',
	          'var ret = (' + fnImplStr + ')(' + JSON.stringify(pass) + ');',
	          'if( ret !== undefined ){ resolve(ret); }', // assume if ran fn returns defined value (incl. null), that we want to resolve to it
	        '} )()\n'
	      ]).join('\n');

	      // because we've now consumed the requires, empty the list so we don't dupe on next run()
	      _p.requires = [];
	      _p.files = [];

	      if( useWW ){
	        var fnBlob, fnUrl;

	        // add normalised thread api functions
	        if( !threadTechAlreadyExists ){
	          var fnPre = fnStr + '';

	          fnStr = [
	            'function _ref_(o){ return eval(o); };',
	            'function broadcast(m){ return message(m); };', // alias
	            'function message(m){ postMessage(m); };',
	            'function listen(fn){',
	            '  self.addEventListener("message", function(m){ ',
	            '    if( typeof m === "object" && (m.data.$$eval || m.data === "$$start") ){',
	            '    } else { ',
	            '      fn( m.data );',
	            '    }',
	            '  });',
	            '};',
	            'self.addEventListener("message", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',
	            'function resolve(v){ postMessage({ $$resolve: v }); };',
	            'function reject(v){ postMessage({ $$reject: v }); };'
	          ].join('\n');

	          fnStr += fnPre;

	          fnBlob = new Blob([ fnStr ], {
	            type: 'application/javascript'
	          });
	          fnUrl = window.URL.createObjectURL( fnBlob );
	        }
	        // create webworker and let it exec the serialised code
	        var ww = _p.webworker = _p.webworker || new Worker( fnUrl );

	        if( threadTechAlreadyExists ){ // then just exec new run() code
	          ww.postMessage({
	            $$eval: fnStr
	          });
	        }

	        // worker messages => events
	        var cb;
	        ww.addEventListener('message', cb = function( m ){
	          var isObject = is.object(m) && is.object( m.data );

	          if( isObject && ('$$resolve' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c resolve()

	            resolve( m.data.$$resolve );
	          } else if( isObject && ('$$reject' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c reject()

	            reject( m.data.$$reject );
	          } else {
	            self.trigger( new Event(m, { type: 'message', message: m.data }) );
	          }
	        }, false);

	        if( !threadTechAlreadyExists ){
	          ww.postMessage('$$start'); // start up the worker
	        }

	      } else if( useNode ){
	        // create a new process

	        if( !_p.child ){
	          _p.child = ( _dereq_('child_process').fork( _dereq_('path').join(__dirname, 'thread-node-fork') ) );
	        }

	        var child = _p.child;

	        // child process messages => events
	        var cb;
	        child.on('message', cb = function( m ){
	          if( is.object(m) && ('$$resolve' in m) ){
	            child.removeListener('message', cb); // done listening b/c resolve()

	            resolve( m.$$resolve );
	          } else if( is.object(m) && ('$$reject' in m) ){
	            child.removeListener('message', cb); // done listening b/c reject()

	            reject( m.$$reject );
	          } else {
	            self.trigger( new Event({}, { type: 'message', message: m }) );
	          }
	        });

	        // ask the child process to eval the worker code
	        child.send({
	          $$eval: fnStr
	        });

	      } else { // use a fallback mechanism using a timeout

	        var promiseResolve = resolve;
	        var promiseReject = reject;

	        var timer = _p.timer = _p.timer || {

	          listeners: [],

	          exec: function(){
	            // as a string so it can't be mangled by minifiers and processors
	            fnStr = [
	              'function _ref_(o){ return eval(o); };',
	              'function broadcast(m){ return message(m); };',
	              'function message(m){ self.trigger( new Event({}, { type: "message", message: m }) ); };',
	              'function listen(fn){ timer.listeners.push( fn ); };',
	              'function resolve(v){ promiseResolve(v); };',
	              'function reject(v){ promiseReject(v); };'
	            ].join('\n') + fnStr;

	            // the .run() code
	            eval( fnStr ); // jshint ignore:line
	          },

	          message: function( m ){
	            var ls = timer.listeners;

	            for( var i = 0; i < ls.length; i++ ){
	              var fn = ls[i];

	              fn( m );
	            }
	          }

	        };

	        timer.exec();
	      }

	    }).then(function( v ){
	      _p.running = false;
	      _p.ran = true;

	      self.trigger('ran');

	      return v;
	    });

	    if( _p.queue == null ){
	      _p.queue = runP; // i.e. first step of inductive promise chain (for queue)
	    }

	    return runP;
	  },

	  // send the thread a message
	  message: function( m ){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.postMessage( m );
	    }

	    if( _p.child ){
	      _p.child.send( m );
	    }

	    if( _p.timer ){
	      _p.timer.message( m );
	    }

	    return this; // chaining
	  },

	  stop: function(){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.terminate();
	    }

	    if( _p.child ){
	      _p.child.kill();
	    }

	    if( _p.timer ){
	      // nothing we can do if we've run a timeout
	    }

	    _p.stopped = true;

	    return this.trigger('stop'); // chaining
	  },

	  stopped: function(){
	    return this._private.stopped;
	  }

	});

	// turns a stringified function into a (re)named function
	var fnAs = function( fn, name ){
	  var fnStr = fn.toString();
	  fnStr = fnStr.replace(/function\s*?\S*?\s*?\(/, 'function ' + name + '(');

	  return fnStr;
	};

	var defineFnal = function( opts ){
	  opts = opts || {};

	  return function fnalImpl( fn, arg1 ){
	    var fnStr = fnAs( fn, '_$_$_' + opts.name );

	    this.require( fnStr );

	    return this.run( [
	      'function( data ){',
	      '  var origResolve = resolve;',
	      '  var res = [];',
	      '  ',
	      '  resolve = function( val ){',
	      '    res.push( val );',
	      '  };',
	      '  ',
	      '  var ret = data.' + opts.name + '( _$_$_' + opts.name + ( arguments.length > 1 ? ', ' + JSON.stringify(arg1) : '' ) + ' );',
	      '  ',
	      '  resolve = origResolve;',
	      '  resolve( res.length > 0 ? res : ret );',
	      '}'
	    ].join('\n') );
	  };
	};

	util.extend(thdfn, {
	  reduce: defineFnal({ name: 'reduce' }),

	  reduceRight: defineFnal({ name: 'reduceRight' }),

	  map: defineFnal({ name: 'map' })
	});

	// aliases
	var fn = thdfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(thdfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( thdfn );

	module.exports = Thread;

	},{"./define":41,"./event":42,"./is":77,"./promise":80,"./util":94,"./window":100,"child_process":undefined,"path":undefined}],93:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	module.exports = {
	  // get [r, g, b] from #abc or #aabbcc
	  hex2tuple: function( hex ){
	    if( !(hex.length === 4 || hex.length === 7) || hex[0] !== "#" ){ return; }

	    var shortHex = hex.length === 4;
	    var r, g, b;
	    var base = 16;

	    if( shortHex ){
	      r = parseInt( hex[1] + hex[1], base );
	      g = parseInt( hex[2] + hex[2], base );
	      b = parseInt( hex[3] + hex[3], base );
	    } else {
	      r = parseInt( hex[1] + hex[2], base );
	      g = parseInt( hex[3] + hex[4], base );
	      b = parseInt( hex[5] + hex[6], base );
	    }

	    return [r, g, b];
	  },

	  // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
	  hsl2tuple: function( hsl ){
	    var ret;
	    var h, s, l, a, r, g, b;
	    function hue2rgb(p, q, t){
	      if(t < 0) t += 1;
	      if(t > 1) t -= 1;
	      if(t < 1/6) return p + (q - p) * 6 * t;
	      if(t < 1/2) return q;
	      if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	      return p;
	    }

	    var m = new RegExp("^" + this.regex.hsla + "$").exec(hsl);
	    if( m ){

	      // get hue
	      h = parseInt( m[1] );
	      if( h < 0 ){
	        h = ( 360 - (-1*h % 360) ) % 360;
	      } else if( h > 360 ){
	        h = h % 360;
	      }
	      h /= 360; // normalise on [0, 1]

	      s = parseFloat( m[2] );
	      if( s < 0 || s > 100 ){ return; } // saturation is [0, 100]
	      s = s/100; // normalise on [0, 1]

	      l = parseFloat( m[3] );
	      if( l < 0 || l > 100 ){ return; } // lightness is [0, 100]
	      l = l/100; // normalise on [0, 1]

	      a = m[4];
	      if( a !== undefined ){
	        a = parseFloat( a );

	        if( a < 0 || a > 1 ){ return; } // alpha is [0, 1]
	      }

	      // now, convert to rgb
	      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	      if( s === 0 ){
	        r = g = b = Math.round(l * 255); // achromatic
	      } else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = Math.round( 255 * hue2rgb(p, q, h + 1/3) );
	        g = Math.round( 255 * hue2rgb(p, q, h) );
	        b = Math.round( 255 * hue2rgb(p, q, h - 1/3) );
	      }

	      ret = [r, g, b, a];
	    }

	    return ret;
	  },

	  // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
	  rgb2tuple: function( rgb ){
	    var ret;

	    var m = new RegExp("^" + this.regex.rgba + "$").exec(rgb);
	    if( m ){
	      ret = [];

	      var isPct = [];
	      for( var i = 1; i <= 3; i++ ){
	        var channel = m[i];

	        if( channel[ channel.length - 1 ] === "%" ){
	          isPct[i] = true;
	        }
	        channel = parseFloat( channel );

	        if( isPct[i] ){
	          channel = channel/100 * 255; // normalise to [0, 255]
	        }

	        if( channel < 0 || channel > 255 ){ return; } // invalid channel value

	        ret.push( Math.floor(channel) );
	      }

	      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	      var allArePct = isPct[1] && isPct[2] && isPct[3];
	      if( atLeastOneIsPct && !allArePct ){ return; } // must all be percent values if one is

	      var alpha = m[4];
	      if( alpha !== undefined ){
	        alpha = parseFloat( alpha );

	        if( alpha < 0 || alpha > 1 ){ return; } // invalid alpha value

	        ret.push( alpha );
	      }
	    }

	    return ret;
	  },

	  colorname2tuple: function( color ){
	    return this.colors[ color.toLowerCase() ];
	  },

	  color2tuple: function( color ){
	    return ( is.array(color) ? color : null )
	      || this.colorname2tuple(color)
	      || this.hex2tuple(color)
	      || this.rgb2tuple(color)
	      || this.hsl2tuple(color);
	  },

	  colors: {
	    // special colour names
	    transparent: [0, 0, 0, 0], // NB alpha === 0

	    // regular colours
	    aliceblue: [240, 248, 255],
	    antiquewhite: [250, 235, 215],
	    aqua: [0, 255, 255],
	    aquamarine: [127, 255, 212],
	    azure: [240, 255, 255],
	    beige: [245, 245, 220],
	    bisque: [255, 228, 196],
	    black: [0, 0, 0],
	    blanchedalmond: [255, 235, 205],
	    blue: [0, 0, 255],
	    blueviolet: [138, 43, 226],
	    brown: [165, 42, 42],
	    burlywood: [222, 184, 135],
	    cadetblue: [95, 158, 160],
	    chartreuse: [127, 255, 0],
	    chocolate: [210, 105, 30],
	    coral: [255, 127, 80],
	    cornflowerblue: [100, 149, 237],
	    cornsilk: [255, 248, 220],
	    crimson: [220, 20, 60],
	    cyan: [0, 255, 255],
	    darkblue: [0, 0, 139],
	    darkcyan: [0, 139, 139],
	    darkgoldenrod: [184, 134, 11],
	    darkgray: [169, 169, 169],
	    darkgreen: [0, 100, 0],
	    darkgrey: [169, 169, 169],
	    darkkhaki: [189, 183, 107],
	    darkmagenta: [139, 0, 139],
	    darkolivegreen: [85, 107, 47],
	    darkorange: [255, 140, 0],
	    darkorchid: [153, 50, 204],
	    darkred: [139, 0, 0],
	    darksalmon: [233, 150, 122],
	    darkseagreen: [143, 188, 143],
	    darkslateblue: [72, 61, 139],
	    darkslategray: [47, 79, 79],
	    darkslategrey: [47, 79, 79],
	    darkturquoise: [0, 206, 209],
	    darkviolet: [148, 0, 211],
	    deeppink: [255, 20, 147],
	    deepskyblue: [0, 191, 255],
	    dimgray: [105, 105, 105],
	    dimgrey: [105, 105, 105],
	    dodgerblue: [30, 144, 255],
	    firebrick: [178, 34, 34],
	    floralwhite: [255, 250, 240],
	    forestgreen: [34, 139, 34],
	    fuchsia: [255, 0, 255],
	    gainsboro: [220, 220, 220],
	    ghostwhite: [248, 248, 255],
	    gold: [255, 215, 0],
	    goldenrod: [218, 165, 32],
	    gray: [128, 128, 128],
	    grey: [128, 128, 128],
	    green: [0, 128, 0],
	    greenyellow: [173, 255, 47],
	    honeydew: [240, 255, 240],
	    hotpink: [255, 105, 180],
	    indianred: [205, 92, 92],
	    indigo: [75, 0, 130],
	    ivory: [255, 255, 240],
	    khaki: [240, 230, 140],
	    lavender: [230, 230, 250],
	    lavenderblush: [255, 240, 245],
	    lawngreen: [124, 252, 0],
	    lemonchiffon: [255, 250, 205],
	    lightblue: [173, 216, 230],
	    lightcoral: [240, 128, 128],
	    lightcyan: [224, 255, 255],
	    lightgoldenrodyellow: [250, 250, 210],
	    lightgray: [211, 211, 211],
	    lightgreen: [144, 238, 144],
	    lightgrey: [211, 211, 211],
	    lightpink: [255, 182, 193],
	    lightsalmon: [255, 160, 122],
	    lightseagreen: [32, 178, 170],
	    lightskyblue: [135, 206, 250],
	    lightslategray: [119, 136, 153],
	    lightslategrey: [119, 136, 153],
	    lightsteelblue: [176, 196, 222],
	    lightyellow: [255, 255, 224],
	    lime: [0, 255, 0],
	    limegreen: [50, 205, 50],
	    linen: [250, 240, 230],
	    magenta: [255, 0, 255],
	    maroon: [128, 0, 0],
	    mediumaquamarine: [102, 205, 170],
	    mediumblue: [0, 0, 205],
	    mediumorchid: [186, 85, 211],
	    mediumpurple: [147, 112, 219],
	    mediumseagreen: [60, 179, 113],
	    mediumslateblue: [123, 104, 238],
	    mediumspringgreen: [0, 250, 154],
	    mediumturquoise: [72, 209, 204],
	    mediumvioletred: [199, 21, 133],
	    midnightblue: [25, 25, 112],
	    mintcream: [245, 255, 250],
	    mistyrose: [255, 228, 225],
	    moccasin: [255, 228, 181],
	    navajowhite: [255, 222, 173],
	    navy: [0, 0, 128],
	    oldlace: [253, 245, 230],
	    olive: [128, 128, 0],
	    olivedrab: [107, 142, 35],
	    orange: [255, 165, 0],
	    orangered: [255, 69, 0],
	    orchid: [218, 112, 214],
	    palegoldenrod: [238, 232, 170],
	    palegreen: [152, 251, 152],
	    paleturquoise: [175, 238, 238],
	    palevioletred: [219, 112, 147],
	    papayawhip: [255, 239, 213],
	    peachpuff: [255, 218, 185],
	    peru: [205, 133, 63],
	    pink: [255, 192, 203],
	    plum: [221, 160, 221],
	    powderblue: [176, 224, 230],
	    purple: [128, 0, 128],
	    red: [255, 0, 0],
	    rosybrown: [188, 143, 143],
	    royalblue: [65, 105, 225],
	    saddlebrown: [139, 69, 19],
	    salmon: [250, 128, 114],
	    sandybrown: [244, 164, 96],
	    seagreen: [46, 139, 87],
	    seashell: [255, 245, 238],
	    sienna: [160, 82, 45],
	    silver: [192, 192, 192],
	    skyblue: [135, 206, 235],
	    slateblue: [106, 90, 205],
	    slategray: [112, 128, 144],
	    slategrey: [112, 128, 144],
	    snow: [255, 250, 250],
	    springgreen: [0, 255, 127],
	    steelblue: [70, 130, 180],
	    tan: [210, 180, 140],
	    teal: [0, 128, 128],
	    thistle: [216, 191, 216],
	    tomato: [255, 99, 71],
	    turquoise: [64, 224, 208],
	    violet: [238, 130, 238],
	    wheat: [245, 222, 179],
	    white: [255, 255, 255],
	    whitesmoke: [245, 245, 245],
	    yellow: [255, 255, 0],
	    yellowgreen: [154, 205, 50]
	  }
	};

	},{"../is":77}],94:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var math = _dereq_('../math');

	var util = {

	  falsify: function(){ return false; },

	  zeroify: function(){ return 0; },

	  noop: function(){},

	  /* jshint ignore:start */
	  error: function( msg ){
	    if( console.error ){
	      console.error.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    } else {
	      console.log.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    }
	  },
	  /* jshint ignore:end */

	  clone: function( obj ){
	    return this.extend( {}, obj );
	  },

	  // gets a shallow copy of the argument
	  copy: function( obj ){
	    if( obj == null ){
	      return obj;
	    } if( is.array(obj) ){
	      return obj.slice();
	    } else if( is.plainObject(obj) ){
	      return this.clone( obj );
	    } else {
	      return obj;
	    }
	  }

	};

	util.makeBoundingBox = math.makeBoundingBox.bind( math );

	util._staticEmptyObject = {};

	util.staticEmptyObject = function(){
	  return util._staticEmptyObject;
	};

	util.extend = Object.assign != null ? Object.assign : function( tgt ){
	  var args = arguments;

	  for( var i = 1; i < args.length; i++ ){
	    var obj = args[i];

	    for( var k in obj ){
	      tgt[k] = obj[k];
	    }
	  }

	  return tgt;
	};

	[
	  _dereq_('./colors'),
	  _dereq_('./maps'),
	  { memoize: _dereq_('./memoize') },
	  _dereq_('./regex'),
	  _dereq_('./strings'),
	  _dereq_('./timing')
	].forEach(function( req ){
	  util.extend( util, req );
	});

	module.exports = util;

	},{"../is":77,"../math":79,"./colors":93,"./maps":95,"./memoize":96,"./regex":97,"./strings":98,"./timing":99}],95:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	module.exports = {
	  // has anything been set in the map
	  mapEmpty: function( map ){
	    var empty = true;

	    if( map != null ){
	      for(var i in map){ // jshint ignore:line
	        empty = false;
	        break;
	      }
	    }

	    return empty;
	  },

	  // pushes to the array at the end of a map (map may not be built)
	  pushMap: function( options ){
	    var array = this.getMap(options);

	    if( array == null ){ // if empty, put initial array
	      this.setMap( this.extend({}, options, {
	        value: [ options.value ]
	      }) );
	    } else {
	      array.push( options.value );
	    }
	  },

	  // sets the value in a map (map may not be built)
	  setMap: function( options ){
	    var obj = options.map;
	    var key;
	    var keys = options.keys;
	    var l = keys.length;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to set map with object key');
	      }

	      if( i < keys.length - 1 ){

	        // extend the map if necessary
	        if( obj[key] == null ){
	          obj[key] = {};
	        }

	        obj = obj[key];
	      } else {
	        // set the value
	        obj[key] = options.value;
	      }
	    }
	  },

	  // gets the value in a map even if it's not built in places
	  getMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to get map with object key');
	      }

	      obj = obj[key];

	      if( obj == null ){
	        return obj;
	      }
	    }

	    return obj;
	  },

	  // deletes the entry in the map
	  deleteMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;
	    var keepChildren = options.keepChildren;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to delete map with object key');
	      }

	      var lastKey = i === options.keys.length - 1;
	      if( lastKey ){

	        if( keepChildren ){ // then only delete child fields not in keepChildren
	          for( var child in obj ){
	            if( !keepChildren[child] ){
	              obj[child] = undefined;
	            }
	          }
	        } else {
	          obj[key] = undefined;
	        }

	      } else {
	        obj = obj[key];
	      }
	    }
	  }
	};

	},{"../is":77}],96:[function(_dereq_,module,exports){
	'use strict';

	module.exports = function memoize( fn, keyFn ){
	  var self = this;
	  var cache = {};

	  if( !keyFn ){
	    keyFn = function(){
	      if( arguments.length === 1 ){
	        return arguments[0];
	      }

	      var args = [];

	      for( var i = 0; i < arguments.length; i++ ){
	        args.push( arguments[i] );
	      }

	      return args.join('$');
	    };
	  }

	  return function memoizedFn(){
	    var args = arguments;
	    var ret;
	    var k = keyFn.apply( self, args );

	    if( !(ret = cache[k]) ){
	      ret = cache[k] = fn.apply( self, args );
	    }

	    return ret;
	  };
	};

	},{}],97:[function(_dereq_,module,exports){
	'use strict';

	var number = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";

	var rgba = "rgb[a]?\\(("+ number +"[%]?)\\s*,\\s*("+ number +"[%]?)\\s*,\\s*("+ number +"[%]?)(?:\\s*,\\s*("+ number +"))?\\)";
	var rgbaNoBackRefs = "rgb[a]?\\((?:"+ number +"[%]?)\\s*,\\s*(?:"+ number +"[%]?)\\s*,\\s*(?:"+ number +"[%]?)(?:\\s*,\\s*(?:"+ number +"))?\\)";

	var hsla = "hsl[a]?\\(("+ number +")\\s*,\\s*("+ number +"[%])\\s*,\\s*("+ number +"[%])(?:\\s*,\\s*("+ number +"))?\\)";
	var hslaNoBackRefs = "hsl[a]?\\((?:"+ number +")\\s*,\\s*(?:"+ number +"[%])\\s*,\\s*(?:"+ number +"[%])(?:\\s*,\\s*(?:"+ number +"))?\\)";

	var hex3 = "\\#[0-9a-fA-F]{3}";
	var hex6 = "\\#[0-9a-fA-F]{6}";

	module.exports = {
	  regex: {
	    number: number,
	    rgba: rgba,
	    rgbaNoBackRefs: rgbaNoBackRefs,
	    hsla: hsla,
	    hslaNoBackRefs: hslaNoBackRefs,
	    hex3: hex3,
	    hex6: hex6
	  }
	};

	},{}],98:[function(_dereq_,module,exports){
	'use strict';

	var memoize = _dereq_('./memoize');
	var is = _dereq_('../is');

	module.exports = {

	  camel2dash: memoize( function( str ){
	    return str.replace(/([A-Z])/g, function( v ){
	      return '-' + v.toLowerCase();
	    });
	  } ),

	  dash2camel: memoize( function( str ){
	    return str.replace(/(-\w)/g, function( v ){
	      return v[1].toUpperCase();
	    });
	  } ),

	  capitalize: function(str){
	    if( is.emptyString(str) ){
	      return str;
	    }

	    return str.charAt(0).toUpperCase() + str.substring(1);
	  }

	};

	},{"../is":77,"./memoize":96}],99:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');
	var is = _dereq_('../is');
	var performance = window ? window.performance : null;

	var util = {};

	var raf = !window ? null : ( window.requestAnimationFrame || window.mozRequestAnimationFrame ||
	      window.webkitRequestAnimationFrame || window.msRequestAnimationFrame );

	raf = raf || function( fn ){
	  if( fn ){
	    setTimeout(function(){
	      fn( pnow() );
	    }, 1000/60);
	  }
	};

	util.requestAnimationFrame = function(fn){
	  raf( fn );
	};

	var pnow = performance && performance.now ? function(){ return performance.now(); } : function(){ return Date.now(); };

	util.performanceNow = pnow;

	// ported lodash throttle function
	util.throttle = function(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (options === false) {
	    leading = false;
	  } else if (is.plainObject(options)) {
	    leading = 'leading' in options ? options.leading : leading;
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  options = options || {};
	  options.leading = leading;
	  options.maxWait = wait;
	  options.trailing = trailing;

	  return util.debounce(func, wait, options);
	};

	util.now = function(){
	  return Date.now();
	};

	util.debounce = function(func, wait, options) { // ported lodash debounce function
	  var util = this;
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;

	  if (!is.fn(func)) {
	    return;
	  }
	  wait = Math.max(0, wait) || 0;
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (is.plainObject(options)) {
	    leading = options.leading;
	    maxWait = 'maxWait' in options && (Math.max(wait, options.maxWait) || 0);
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  var delayed = function() {
	    var remaining = wait - (util.now() - stamp);
	    if (remaining <= 0) {
	      if (maxTimeoutId) {
	        clearTimeout(maxTimeoutId);
	      }
	      var isCalled = trailingCall;
	      maxTimeoutId = timeoutId = trailingCall = undefined;
	      if (isCalled) {
	        lastCalled = util.now();
	        result = func.apply(thisArg, args);
	        if (!timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	      }
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  };

	  var maxDelayed = function() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (trailing || (maxWait !== wait)) {
	      lastCalled = util.now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = null;
	      }
	    }
	  };

	  return function() {
	    args = arguments;
	    stamp = util.now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);

	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0;

	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = null;
	    }
	    return result;
	  };
	};

	module.exports = util;

	},{"../is":77,"../window":100}],100:[function(_dereq_,module,exports){
	module.exports = ( typeof window === 'undefined' ? null : window );

	},{}]},{},[76])(76)
	});


	//# sourceMappingURL=cytoscape.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(438).setImmediate, "/"))

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(4).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(438).setImmediate, __webpack_require__(438).clearImmediate))

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.cyjsSelected = cyjsSelected;
	exports.fetchNetwork = fetchNetwork;

	var _Actions = __webpack_require__(440);

	var _isomorphicFetch = __webpack_require__(441);

	var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Cytoscape.js Constants
	var NODES = 'nodes';
	var EDGES = 'edges';

	function cyjsSelected(selected) {

	  var objType = selected.group();

	  if (objType === NODES) {
	    return {
	      type: _Actions.NODE_SELECTED,
	      selected: selected
	    };
	  } else if (objType === EDGES) {
	    return {
	      type: _Actions.EDGE_SELECTED,
	      selected: selected
	    };
	  }
	}

	function requestNetwork(networkUrl) {

	  return {
	    type: _Actions.REQUEST_NETWORK,
	    graphUrl: networkUrl
	  };
	}

	function receiveNetwork(networkUrl, json) {

	  console.log("****** receive");

	  var result = {
	    type: _Actions.RECEIVE_NETWORK,
	    graphUrl: networkUrl,
	    graph: json
	  };

	  console.log(result);

	  return result;
	}

	function fetchNetwork(networkUrl) {

	  return function (dispatch) {

	    dispatch(requestNetwork(networkUrl));

	    return (0, _isomorphicFetch2.default)(networkUrl).then(function (response) {
	      return response.json();
	    }).then(function (json) {
	      return dispatch(receiveNetwork(networkUrl, json));
	    });
	  };
	}

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "GraphAction.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Pre-defined list of actions supported by the network widget
	*/

	var NODE_SELECTED = exports.NODE_SELECTED = "NODE_SELECTED";
	var EDGE_SELECTED = exports.EDGE_SELECTED = "EDGE_SELECTED";

	var REQUEST_NETWORK = exports.REQUEST_NETWORK = 'REQUEST_NETWORK';
	var RECEIVE_NETWORK = exports.RECEIVE_NETWORK = 'RECEIVE_NETWORK';

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "Actions.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	// the whatwg-fetch polyfill installs the fetch() function
	// on the global object (window or self)
	//
	// Return that as the export for use in Webpack, Browserify etc.
	__webpack_require__(442);
	module.exports = self.fetch.bind(self);


/***/ },
/* 442 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)

	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }

	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    reader.readAsText(blob)
	    return fileReaderReady(reader)
	  }

	  var support = {
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob();
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  function Body() {
	    this.bodyUsed = false


	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }

	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this)
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = xhr.getAllResponseHeaders().trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers;
	  self.Request = Request;
	  self.Response = Response;

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }

	      var xhr = new XMLHttpRequest()

	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }

	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }

	        return;
	      }

	      xhr.onload = function() {
	        var status = (xhr.status === 1223) ? 204 : xhr.status
	        if (status < 100 || status > 599) {
	          reject(new TypeError('Network request failed'))
	          return
	        }
	        var options = {
	          status: status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = configureStore;

	var _redux = __webpack_require__(165);

	var _reduxThunk = __webpack_require__(444);

	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

	var _reduxLogger = __webpack_require__(445);

	var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

	var _rootReducer = __webpack_require__(446);

	var _rootReducer2 = _interopRequireDefault(_rootReducer);

	var _DevTools = __webpack_require__(179);

	var _DevTools2 = _interopRequireDefault(_DevTools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var logger = (0, _reduxLogger2.default)();

	var finalCreateStore = (0, _redux.compose)((0, _redux.applyMiddleware)(_reduxThunk2.default, logger), _DevTools2.default.instrument())(_redux.createStore);

	function configureStore(initialState) {

	  var store = finalCreateStore(_rootReducer2.default, initialState);

	  if (false) {
	    module.hot.accept('../reducers/rootReducer.jsx', function () {
	      return store.replaceReducer(require('../reducers/rootReducer.jsx'));
	    });
	  }

	  return store;
	}

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "store.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 444 */
/***/ function(module, exports) {

	'use strict';

	function thunkMiddleware(_ref) {
	  var dispatch = _ref.dispatch;
	  var getState = _ref.getState;

	  return function (next) {
	    return function (action) {
	      return typeof action === 'function' ? action(dispatch, getState) : next(action);
	    };
	  };
	}

	module.exports = thunkMiddleware;

/***/ },
/* 445 */
/***/ function(module, exports) {

	"use strict";

	var repeat = function repeat(str, times) {
	  return new Array(times + 1).join(str);
	};
	var pad = function pad(num, maxLength) {
	  return repeat("0", maxLength - num.toString().length) + num;
	};
	var formatTime = function formatTime(time) {
	  return " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
	};

	// Use the new performance api to get better precision if available
	var timer = typeof performance !== "undefined" && typeof performance.now === "function" ? performance : Date;

	/**
	 * Creates logger with followed options
	 *
	 * @namespace
	 * @property {object} options - options for logger
	 * @property {string} options.level - console[level]
	 * @property {boolean} options.duration - print duration of each action?
	 * @property {boolean} options.timestamp - print timestamp with each action?
	 * @property {object} options.colors - custom colors
	 * @property {object} options.logger - implementation of the `console` API
	 * @property {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?
	 * @property {boolean} options.collapsed - is group collapsed?
	 * @property {boolean} options.predicate - condition which resolves logger behavior
	 * @property {function} options.stateTransformer - transform state before print
	 * @property {function} options.actionTransformer - transform action before print
	 * @property {function} options.errorTransformer - transform error before print
	 */

	function createLogger() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var _options$level = options.level;
	  var level = _options$level === undefined ? "log" : _options$level;
	  var _options$logger = options.logger;
	  var logger = _options$logger === undefined ? console : _options$logger;
	  var _options$logErrors = options.logErrors;
	  var logErrors = _options$logErrors === undefined ? true : _options$logErrors;
	  var collapsed = options.collapsed;
	  var predicate = options.predicate;
	  var _options$duration = options.duration;
	  var duration = _options$duration === undefined ? false : _options$duration;
	  var _options$timestamp = options.timestamp;
	  var timestamp = _options$timestamp === undefined ? true : _options$timestamp;
	  var transformer = options.transformer;
	  var _options$stateTransfo = options.stateTransformer;
	  var // deprecated
	  stateTransformer = _options$stateTransfo === undefined ? function (state) {
	    return state;
	  } : _options$stateTransfo;
	  var _options$actionTransf = options.actionTransformer;
	  var actionTransformer = _options$actionTransf === undefined ? function (actn) {
	    return actn;
	  } : _options$actionTransf;
	  var _options$errorTransfo = options.errorTransformer;
	  var errorTransformer = _options$errorTransfo === undefined ? function (error) {
	    return error;
	  } : _options$errorTransfo;
	  var _options$colors = options.colors;
	  var colors = _options$colors === undefined ? {
	    title: function title() {
	      return "#000000";
	    },
	    prevState: function prevState() {
	      return "#9E9E9E";
	    },
	    action: function action() {
	      return "#03A9F4";
	    },
	    nextState: function nextState() {
	      return "#4CAF50";
	    },
	    error: function error() {
	      return "#F20404";
	    }
	  } : _options$colors;

	  // exit if console undefined

	  if (typeof logger === "undefined") {
	    return function () {
	      return function (next) {
	        return function (action) {
	          return next(action);
	        };
	      };
	    };
	  }

	  if (transformer) {
	    console.error("Option 'transformer' is deprecated, use stateTransformer instead");
	  }

	  var logBuffer = [];
	  function printBuffer() {
	    logBuffer.forEach(function (logEntry, key) {
	      var started = logEntry.started;
	      var action = logEntry.action;
	      var prevState = logEntry.prevState;
	      var error = logEntry.error;
	      var took = logEntry.took;
	      var nextState = logEntry.nextState;

	      var nextEntry = logBuffer[key + 1];
	      if (nextEntry) {
	        nextState = nextEntry.prevState;
	        took = nextEntry.started - started;
	      }
	      // message
	      var formattedAction = actionTransformer(action);
	      var time = new Date(started);
	      var isCollapsed = typeof collapsed === "function" ? collapsed(function () {
	        return nextState;
	      }, action) : collapsed;

	      var formattedTime = formatTime(time);
	      var titleCSS = colors.title ? "color: " + colors.title(formattedAction) + ";" : null;
	      var title = "action " + formattedAction.type + (timestamp ? formattedTime : "") + (duration ? " in " + took.toFixed(2) + " ms" : "");

	      // render
	      try {
	        if (isCollapsed) {
	          if (colors.title) logger.groupCollapsed("%c " + title, titleCSS);else logger.groupCollapsed(title);
	        } else {
	          if (colors.title) logger.group("%c " + title, titleCSS);else logger.group(title);
	        }
	      } catch (e) {
	        logger.log(title);
	      }

	      if (colors.prevState) logger[level]("%c prev state", "color: " + colors.prevState(prevState) + "; font-weight: bold", prevState);else logger[level]("prev state", prevState);

	      if (colors.action) logger[level]("%c action", "color: " + colors.action(formattedAction) + "; font-weight: bold", formattedAction);else logger[level]("action", formattedAction);

	      if (error) {
	        if (colors.error) logger[level]("%c error", "color: " + colors.error(error, prevState) + "; font-weight: bold", error);else logger[level]("error", error);
	      }

	      if (colors.nextState) logger[level]("%c next state", "color: " + colors.nextState(nextState) + "; font-weight: bold", nextState);else logger[level]("next state", nextState);

	      try {
	        logger.groupEnd();
	      } catch (e) {
	        logger.log("—— log end ——");
	      }
	    });
	    logBuffer.length = 0;
	  }

	  return function (_ref) {
	    var getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        // exit early if predicate function returns false
	        if (typeof predicate === "function" && !predicate(getState, action)) {
	          return next(action);
	        }

	        var logEntry = {};
	        logBuffer.push(logEntry);

	        logEntry.started = timer.now();
	        logEntry.prevState = stateTransformer(getState());
	        logEntry.action = action;

	        var returnedValue = undefined;
	        if (logErrors) {
	          try {
	            returnedValue = next(action);
	          } catch (e) {
	            logEntry.error = errorTransformer(e);
	          }
	        } else {
	          returnedValue = next(action);
	        }

	        logEntry.took = timer.now() - logEntry.started;
	        logEntry.nextState = stateTransformer(getState());

	        printBuffer();

	        if (logEntry.error) throw logEntry.error;
	        return returnedValue;
	      };
	    };
	  };
	}

	module.exports = createLogger;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _redux = __webpack_require__(165);

	var _graphReducer = __webpack_require__(447);

	var _graphReducer2 = _interopRequireDefault(_graphReducer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _redux.combineReducers)({
	  graph: _graphReducer2.default
	});

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "rootReducer.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/kono/git/ci/prime/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = graph;

	var _Actions = __webpack_require__(440);

	var EMPTY_GRAPH = {
	  elements: []
	};

	var INITIAL_STATE = {
	  graph: EMPTY_GRAPH,
	  selected: null,
	  graphUrl: '',
	  isFetching: false
	};

	function graph() {
	  var state = arguments.length <= 0 || arguments[0] === undefined ? INITIAL_STATE : arguments[0];
	  var action = arguments[1];


	  switch (action.type) {

	    case _Actions.REQUEST_NETWORK:
	      return Object.assign({}, state, {
	        graphUrl: action.graphUrl,
	        isFetching: true
	      });
	    case _Actions.RECEIVE_NETWORK:
	      var newState = Object.assign({}, state, {
	        graph: action.graph,
	        isFetching: false
	      });

	      console.log(newState);
	      return newState;

	    default:
	      return state;
	  }
	}

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/kono/git/ci/prime/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "graphReducer.jsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(449);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(451)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./app.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./app.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(450)();
	// imports


	// module
	exports.push([module.id, "body {\n  background: white; }\n", ""]);

	// exports


/***/ },
/* 450 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);